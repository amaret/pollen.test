pollen version 0.2.137
pollen version 0.2.137
In file included from ../test86_out/test86/Test_11/Test_11-prog.c:188:
../test86_out/test86/Test_11/../../virtual.mcu/ConsolePrint/ConsolePrint.c:26:20: warning: format specifies type 'unsigned long' but the argument has type 'uint32' (aka 'unsigned int') [-Wformat]
     printf("%lu", u) ;
             ~~~   ^
             %u
../test86_out/test86/Test_11/../../virtual.mcu/ConsolePrint/ConsolePrint.c:36:20: warning: format specifies type 'long' but the argument has type 'int32' (aka 'int') [-Wformat]
     printf("%li", i) ;
             ~~~   ^
             %i
2 warnings generated.
Now run executeable
in loop to post events
Event posted..GlobalInterrupts disable
GlobalInterrupts enable
in loop to post events
Event posted..GlobalInterrupts disable
GlobalInterrupts enable
in loop to post events
Event posted..GlobalInterrupts disable
GlobalInterrupts enable
in loop to post events
Event posted..GlobalInterrupts disable
GlobalInterrupts enable
in loop to post events
Event posted..GlobalInterrupts disable
GlobalInterrupts enable
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
Dispatching..GlobalInterrupts enable
TICK 1
event fire!
Dispatching..GlobalInterrupts enable
TICK 2
event fire!
Dispatching..GlobalInterrupts enable
TICK 3
event fire!
Dispatching..GlobalInterrupts enable
TICK 4
event fire!
Dispatching..GlobalInterrupts enable
TICK 5
event fire!
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
GlobalInterrupts disable
In dispatch()..
GlobalInterrupts enable
Shutdown

/*
 * ======== string literals ========
 */

static const char pollen_event_Dispatcher__s__fileName[] = "Dispatcher.p";
static const char pollen_event_Dispatcher__s__2[] = "Dispatcher";
static const char pollen_event_Dispatcher__s__0[] = "Event registered. Capacity=";
static const char pollen_event_Dispatcher__s__1[] = "In dispatch()..\n";

/*
 * ======== function definitions ========
 */

void pollen_event_Dispatcher_postFromInterrupt__E( struct pollen_event_Event*  e ) {
    pollen_event_EventQueue_EventQueue_add__E(&(pollen_event_Dispatcher_events__V), (e));
}

void pollen_event_Dispatcher_dispatch__I() {
    pollen_event_Event_ e;
    e = null;
    (e) = pollen_event_EventQueue_EventQueue_remove__E(&(pollen_event_Dispatcher_events__V));
    test86_Test_11_pollen__printStr((string)pollen_event_Dispatcher__s__1);
    while ((e) != null) {
        printf("Dispatching..");

        virtual_mcu_GlobalInterrupts_enable__E();
        pollen_event_Event_Event_fire__E(e);
        (e) = pollen_event_EventQueue_EventQueue_remove__E(&(pollen_event_Dispatcher_events__V));
    }
}

void pollen_event_Dispatcher_post__E( struct pollen_event_Event*  e ) {
    printf("Event posted..");

    virtual_mcu_GlobalInterrupts_disable__E();
    pollen_event_EventQueue_EventQueue_add__E(&(pollen_event_Dispatcher_events__V), (e));
    virtual_mcu_GlobalInterrupts_enable__E();
}

void pollen_event_Dispatcher_run__E() {
    uint8 count;
    uint8 limit;
    count = 0;
    limit = 25;
    virtual_mcu_GlobalInterrupts_enable__E();
    while (true) {
        virtual_mcu_GlobalInterrupts_disable__E();
        pollen_event_Dispatcher_dispatch__I();
        virtual_mcu_GlobalInterrupts_enable__E();
        (count)++;
        if ((count) > (limit)) {
            break;
        }
    }
}

void pollen_event_Dispatcher_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_EventQueue__M
#define pollen_event_EventQueue__M
#include "../../pollen.event/EventQueue/EventQueue.h"
#endif

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test86_Test_11_pollen__reset__E();
void test86_Test_11_pollen__ready__E();
void test86_Test_11_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_event_Dispatcher_ pollen_event_Dispatcher;

/*
 * ======== struct module definition (unit Dispatcher) ========
 */

struct pollen_event_EventQueue;
struct virtual_mcu_GlobalInterrupts_;
struct pollen_event_Dispatcher_ {
    struct virtual_mcu_GlobalInterrupts_ *GI;
};
typedef struct pollen_event_Dispatcher_ pollen_event_Dispatcher_;

/*
 * ======== host variables (unit Dispatcher) ========
 */

typedef uint8 pollen_event_Dispatcher_capacity__TYPE;
extern const pollen_event_Dispatcher_capacity__TYPE pollen_event_Dispatcher_capacity__V;
typedef struct pollen_event_EventQueue pollen_event_Dispatcher_events__TYPE;
extern pollen_event_Dispatcher_events__TYPE pollen_event_Dispatcher_events__V;

/*
 * ======== function members (unit Dispatcher) ========
 */

struct pollen_event_Event;
extern void pollen_event_Dispatcher_postFromInterrupt__E( struct pollen_event_Event*  e );
extern void pollen_event_Dispatcher_dispatch__I();
extern void pollen_event_Dispatcher_post__E( struct pollen_event_Event*  e );
extern void pollen_event_Dispatcher_run__E();
extern void pollen_event_Dispatcher_targetInit__I();

/*
 * ======== data members (unit Dispatcher) ========
 */

#define pollen_event_Dispatcher_events__V pollen_event_Dispatcher_events
#define pollen_event_Dispatcher_GI__V pollen_event_Dispatcher.GI

/*
 * ======== string literals ========
 */

static const char pollen_event_Event__s__fileName[] = "Event.p";
static const char pollen_event_Event__s__0[] = "Event";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void pollen_event_Event_Event_setHandler__E( pollen_event_Event_ this, pollen_event_Event_EP_handler h ) {
    (this->eventHandler) = (h);
}

void pollen_event_Event_Event_fire__E( pollen_event_Event_ this ) {
    if ((this->eventHandler) != null) {
        this->eventHandler();
    }
    printf("event fire!\n");

}

pollen_event_Event_ pollen_event_Event_Event_new___E( pollen_event_Event_ this, pollen_event_Event_EP_handler h ) {
    this->eventHandler = (h);
    return this;
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test86_Test_11_pollen__reset__E();
void test86_Test_11_pollen__ready__E();
void test86_Test_11_pollen__shutdown__E(uint8 i);

/*
 * ======== class definition (unit Event) ========
 */

typedef void (*pollen_event_Event_EP_handler)();
struct pollen_event_Event {
;
    pollen_event_Event_EP_handler eventHandler;
};
typedef struct pollen_event_Event pollen_event_Event;
typedef struct pollen_event_Event* pollen_event_Event_;

/*
 * ======== function members (unit Event) ========
 */

extern void pollen_event_Event_Event_setHandler__E( pollen_event_Event_ this, pollen_event_Event_EP_handler h );
extern void pollen_event_Event_Event_fire__E( pollen_event_Event_ this );
extern pollen_event_Event_ pollen_event_Event_Event_new___E( pollen_event_Event_ this, pollen_event_Event_EP_handler h );


/*
 * ======== string literals ========
 */

static const char pollen_event_EventQueue__s__fileName[] = "EventQueue.p";
static const char pollen_event_EventQueue__s__0[] = "EventQueue";

/*
 * ======== function definitions ========
 */

bool pollen_event_EventQueue_EventQueue_add__E( pollen_event_EventQueue_ this, struct pollen_event_Event*  e ) {
    if (this->length < this->capacity) {
        this->elements[(this->tail)] = (e);
        ++(this->tail);
        ++(this->length);
        if ((this->tail) == (this->capacity)) {
            (this->tail) = 0;
        }
        return(  true  );
    }
    else {
        return(  false  );
    }
}

bool pollen_event_EventQueue_EventQueue_isEmpty__E( pollen_event_EventQueue_ this ) {
    return(  (this->length) == 0  );
}

uint8 pollen_event_EventQueue_EventQueue_getLength__E( pollen_event_EventQueue_ this ) {
    return(  this->length  );
}

pollen_event_EventQueue_ pollen_event_EventQueue_EventQueue_new___E( pollen_event_EventQueue_ this ) {
    return this;
}

pollen_event_Event_ pollen_event_EventQueue_EventQueue_remove__E( pollen_event_EventQueue_ this ) {
    pollen_event_Event_ e;
    e = null;
    if (!pollen_event_EventQueue_EventQueue_isEmpty__E(this)) {
        (e) = this->elements[(this->head)];
        ++(this->head);
        --(this->length);
        if ((this->head) == (this->capacity)) {
            (this->head) = 0;
        }
    }
    return(  (e)  );
}

pollen_event_Event_ pollen_event_EventQueue_EventQueue_peek__E( pollen_event_EventQueue_ this ) {
    if (!pollen_event_EventQueue_EventQueue_isEmpty__E(this)) {
        return(  (this->elements[(this->head)])  );
    }
    else {
        return(  null  );
    }
}

uint8 pollen_event_EventQueue_EventQueue_getCapacity__E( pollen_event_EventQueue_ this ) {
    return(  this->capacity  );
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test86_Test_11_pollen__reset__E();
void test86_Test_11_pollen__ready__E();
void test86_Test_11_pollen__shutdown__E(uint8 i);

/*
 * ======== class definition (unit EventQueue) ========
 */

struct pollen_event_Event;
struct pollen_event_EventQueue {
    const uint8 capacity;
    struct pollen_event_Event*  elements[10] /* capacity */;
    uint8 length;
    uint8 head;
    uint8 tail;
    uint8 maxLength;
};
typedef struct pollen_event_EventQueue pollen_event_EventQueue;
typedef struct pollen_event_EventQueue* pollen_event_EventQueue_;

/*
 * ======== function members (unit EventQueue) ========
 */

extern bool pollen_event_EventQueue_EventQueue_add__E( pollen_event_EventQueue_ this, struct pollen_event_Event*  e );
extern bool pollen_event_EventQueue_EventQueue_isEmpty__E( pollen_event_EventQueue_ this );
extern uint8 pollen_event_EventQueue_EventQueue_getLength__E( pollen_event_EventQueue_ this );
extern pollen_event_EventQueue_ pollen_event_EventQueue_EventQueue_new___E( pollen_event_EventQueue_ this );
extern struct pollen_event_Event*  pollen_event_EventQueue_EventQueue_remove__E( pollen_event_EventQueue_ this );
extern struct pollen_event_Event*  pollen_event_EventQueue_EventQueue_peek__E( pollen_event_EventQueue_ this );
extern uint8 pollen_event_EventQueue_EventQueue_getCapacity__E( pollen_event_EventQueue_ this );

/*
 * ======== const definitions ========
 */

#define pollen_event_EventQueue_capacity (10)

/*
 * ======== string literals ========
 */

static const char test54_PrintImpl__s__fileName[] = "PrintImpl.p";
static const char test54_PrintImpl__s__0[] = "PrintImpl";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test54_PrintImpl_printUint__E( uint32 u ) {
     printf("%u", (unsigned int)u) ;

}

void test54_PrintImpl_printInt__E( int32 i ) {
     printf("%i", (int)i) ;

}

void test54_PrintImpl_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void test54_PrintImpl_printBool__E( bool b ) {
    if ((b)) {
         printf("%s", "true") ;

    }
    else {
         printf("%s", "false") ;

    }
}

void test54_PrintImpl_targetInit__I() {
}

void test54_PrintImpl_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test86_Test_11_pollen__reset__E();
void test86_Test_11_pollen__ready__E();
void test86_Test_11_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test54_PrintImpl_ test54_PrintImpl;

/*
 * ======== struct module definition (unit PrintImpl) ========
 */

struct test54_PrintImpl_ {
};
typedef struct test54_PrintImpl_ test54_PrintImpl_;

/*
 * ======== function members (unit PrintImpl) ========
 */

extern void test54_PrintImpl_printUint__E( uint32 u );
extern void test54_PrintImpl_printInt__E( int32 i );
extern void test54_PrintImpl_printReal__E( float f );
extern void test54_PrintImpl_printBool__E( bool b );
extern void test54_PrintImpl_targetInit__I();
extern void test54_PrintImpl_printStr__E( string s );

/*
 * ======== data members (unit PrintImpl) ========
 */

#include <std.h>

/*
 * ======== protocol member pollen.event.Dispatcher.GI delegates virtual_mcu_GlobalInterrupts ========
 */

#ifndef virtual_mcu_GlobalInterrupts__M
#define virtual_mcu_GlobalInterrupts__M
#include "../../virtual.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

/*
 * ======== protocol member test86.Test_11.pollenPrintProxy delegates test54_PrintImpl ========
 */

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== unit headers ========
 */

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

#ifndef pollen_event_EventQueue__M
#define pollen_event_EventQueue__M
#include "../../pollen.event/EventQueue/EventQueue.h"
#endif

#ifndef pollen_event_Dispatcher__M
#define pollen_event_Dispatcher__M
#include "../../pollen.event/Dispatcher/Dispatcher.h"
#endif

#ifndef virtual_mcu_ConsolePrint__M
#define virtual_mcu_ConsolePrint__M
#include "../../virtual.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef virtual_mcu_GlobalInterrupts__M
#define virtual_mcu_GlobalInterrupts__M
#include "../../virtual.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

#ifndef test86_Test_11__M
#define test86_Test_11__M
#include "../../test86/Test_11/Test_11.h"
#endif

/*
 * ======== host data definitions (unit Dispatcher) ========
 */

const pollen_event_Dispatcher_capacity__TYPE pollen_event_Dispatcher_capacity__V = (uint8)0x5;
pollen_event_Dispatcher_events__TYPE pollen_event_Dispatcher_events__V = /* pollen.event.EventQueue object init */
{
    (const uint8)0xa,    /* capacity */
    {
        null,  /* [0] */
        null,  /* [1] */
        null,  /* [2] */
        null,  /* [3] */
        null,  /* [4] */
        null,  /* [5] */
        null,  /* [6] */
        null,  /* [7] */
        null,  /* [8] */
        null,  /* [9] */
    },    /* elements */
    (uint8)0x0,              /* length */
    (uint8)0x0,              /* head */
    (uint8)0x0,              /* tail */
    (uint8)0x5,              /* maxLength */
};

/*
 * ======== target data definitions (unit Dispatcher) ========
 */

struct pollen_event_Dispatcher_ pollen_event_Dispatcher = { /* module data */
    &virtual_mcu_GlobalInterrupts,    /* GI */
};

/*
 * ======== target data definitions (unit ConsolePrint) ========
 */

struct virtual_mcu_ConsolePrint_ virtual_mcu_ConsolePrint = { /* module data */
    "[95m",                 /* HEADER */
    "[94m",                 /* OKBLUE */
    "[92m",                 /* OKGREEN */
    "[93m",                 /* WARNING */
    "[91m",                 /* FAIL */
    "[0m",                  /* ENDC */
};

/*
 * ======== target data definitions (unit GlobalInterrupts) ========
 */

struct virtual_mcu_GlobalInterrupts_ virtual_mcu_GlobalInterrupts = { /* module data */
};

/*
 * ======== target data definitions (unit PrintImpl) ========
 */

struct test54_PrintImpl_ test54_PrintImpl = { /* module data */
};

/*
 * ======== host data definitions (unit Test_11) ========
 */

test86_Test_11_events__TYPE test86_Test_11_events__A[] = {
    /* pollen.event.Event object init */
    {
        test86_Test_11_tick1__I,    /* eventHandler */
    },  /* [0] */
    /* pollen.event.Event object init */
    {
        test86_Test_11_tick2__I,    /* eventHandler */
    },  /* [1] */
    /* pollen.event.Event object init */
    {
        test86_Test_11_tick3__I,    /* eventHandler */
    },  /* [2] */
    /* pollen.event.Event object init */
    {
        test86_Test_11_tick4__I,    /* eventHandler */
    },  /* [3] */
    /* pollen.event.Event object init */
    {
        test86_Test_11_tick5__I,    /* eventHandler */
    },  /* [4] */
};

/*
 * ======== target data definitions (unit Test_11) ========
 */

struct test86_Test_11_ test86_Test_11 = { /* module data */
    (const uint8)0x5,    /* NumEvents */
    &test54_PrintImpl,    /* pollenPrintProxy */
};

/*
 * ======== pollen print ========
 */

void test86_Test_11_pollen__printBool(bool b) {
    test54_PrintImpl_printBool__E(b);
}
void test86_Test_11_pollen__printInt(int32 i) {
    test54_PrintImpl_printInt__E(i);
}
void test86_Test_11_pollen__printReal(float f) {
    test54_PrintImpl_printReal__E(f);
}
void test86_Test_11_pollen__printUint(uint32 u) {
    test54_PrintImpl_printUint__E(u);
}
void test86_Test_11_pollen__printStr(string s) {
    test54_PrintImpl_printStr__E(s);
}

/*
 * ======== module functions ========
 */

#include "../../pollen.event/Event/Event.c"
#include "../../pollen.event/EventQueue/EventQueue.c"
#include "../../pollen.event/Dispatcher/Dispatcher.c"
#include "../../virtual.mcu/ConsolePrint/ConsolePrint.c"
#include "../../virtual.mcu/GlobalInterrupts/GlobalInterrupts.c"
#include "../../test54/PrintImpl/PrintImpl.c"
#include "../../test86/Test_11/Test_11.c"

/*
 * ======== pollen.reset() ========
 */

void test86_Test_11_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test86_Test_11_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== main() ========
 */

int main() {
    test86_Test_11_pollen__reset__E();
    pollen_event_Dispatcher_targetInit__I();
    virtual_mcu_ConsolePrint_targetInit__I();
    virtual_mcu_GlobalInterrupts_targetInit__I();
    test54_PrintImpl_targetInit__I();
    test86_Test_11_targetInit__I();
    test86_Test_11_pollen__ready__E();
    test86_Test_11_pollen__run__E();
    test86_Test_11_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test86_Test_11__s__fileName[] = "Test_11.p";
static const char test86_Test_11__s__2[] = "TICK 1\n";
static const char test86_Test_11__s__1[] = "Shutdown\n";
static const char test86_Test_11__s__6[] = "TICK 5\n";
static const char test86_Test_11__s__5[] = "TICK 4\n";
static const char test86_Test_11__s__0[] = "in loop to post events\n";
static const char test86_Test_11__s__3[] = "TICK 2\n";
static const char test86_Test_11__s__4[] = "TICK 3\n";
static const char test86_Test_11__s__7[] = "Test_11";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test86_Test_11_tick4__I() {
    test86_Test_11_pollen__printStr((string)test86_Test_11__s__5);
}

void test86_Test_11_pollen__run__E() {
    pollen_event_Event_ e;
    uint8 i;
    e = null;
    for (i = 0; (i) < (test86_Test_11_NumEvents__V); ++(i)) {
        test86_Test_11_pollen__printStr((string)test86_Test_11__s__0);
        (e) = &(test86_Test_11_events__A[(i)]);
        pollen_event_Dispatcher_post__E((e));
    }
    pollen_event_Dispatcher_run__E();
}

void test86_Test_11_tick3__I() {
    test86_Test_11_pollen__printStr((string)test86_Test_11__s__4);
}

void test86_Test_11_tick2__I() {
    test86_Test_11_pollen__printStr((string)test86_Test_11__s__3);
}

void test86_Test_11_tick1__I() {
    test86_Test_11_pollen__printStr((string)test86_Test_11__s__2);
}

void test86_Test_11_pollen__shutdown__E( uint8 id ) {
    virtual_mcu_ConsolePrint_printStr__E(test86_Test_11__s__1);
}

void test86_Test_11_tick5__I() {
    test86_Test_11_pollen__printStr((string)test86_Test_11__s__6);
}

void test86_Test_11_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_Dispatcher__M
#define pollen_event_Dispatcher__M
#include "../../pollen.event/Dispatcher/Dispatcher.h"
#endif

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

#ifndef virtual_mcu_ConsolePrint__M
#define virtual_mcu_ConsolePrint__M
#include "../../virtual.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef virtual_mcu_GlobalInterrupts__M
#define virtual_mcu_GlobalInterrupts__M
#include "../../virtual.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test86_Test_11_pollen__reset__E();
void test86_Test_11_pollen__ready__E();

/*
 * ======== extern definition ========
 */

extern struct test86_Test_11_ test86_Test_11;

/*
 * ======== struct module definition (unit Test_11) ========
 */

struct pollen_event_Event;
struct test54_PrintImpl_;
struct test86_Test_11_ {
    const uint8 NumEvents;
    struct test54_PrintImpl_ *pollenPrintProxy;
};
typedef struct test86_Test_11_ test86_Test_11_;

/*
 * ======== host variables (unit Test_11) ========
 */

typedef pollen_event_Event test86_Test_11_events__TYPE;
extern test86_Test_11_events__TYPE test86_Test_11_events__A[];

/*
 * ======== function members (unit Test_11) ========
 */

extern void test86_Test_11_tick4__I();
extern void test86_Test_11_pollen__run__E();
extern void test86_Test_11_tick3__I();
extern void test86_Test_11_tick2__I();
extern void test86_Test_11_tick1__I();
extern void test86_Test_11_pollen__shutdown__E( uint8 id );
extern void test86_Test_11_tick5__I();
extern void test86_Test_11_targetInit__I();

/*
 * ======== const definitions ========
 */

#define test86_Test_11_NumEvents (5)

/*
 * ======== data members (unit Test_11) ========
 */

#define test86_Test_11_NumEvents__V test86_Test_11.NumEvents
#define test86_Test_11_pollenPrintProxy__V test86_Test_11.pollenPrintProxy

/*
 * ======== string literals ========
 */

static const char virtual_mcu_ConsolePrint__s__fileName[] = "ConsolePrint.p";
static const char virtual_mcu_ConsolePrint__s__2[] = "\033[92m";
static const char virtual_mcu_ConsolePrint__s__4[] = "\033[91m";
static const char virtual_mcu_ConsolePrint__s__0[] = "\033[95m";
static const char virtual_mcu_ConsolePrint__s__1[] = "\033[94m";
static const char virtual_mcu_ConsolePrint__s__3[] = "\033[93m";
static const char virtual_mcu_ConsolePrint__s__5[] = "\033[0m";
static const char virtual_mcu_ConsolePrint__s__6[] = "ConsolePrint";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void virtual_mcu_ConsolePrint_printUint__E( uint32 u ) {
     printf("%lu", u) ;

}

void virtual_mcu_ConsolePrint_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void virtual_mcu_ConsolePrint_printInt__E( int32 i ) {
     printf("%li", i) ;

}

void virtual_mcu_ConsolePrint_printBool__E( bool b ) {
    if ((b)) {
         printf("true") ;

    }
    else {
         printf("false") ;

    }
}

void virtual_mcu_ConsolePrint_targetInit__I() {
}

void virtual_mcu_ConsolePrint_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test86_Test_11_pollen__reset__E();
void test86_Test_11_pollen__ready__E();
void test86_Test_11_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct virtual_mcu_ConsolePrint_ virtual_mcu_ConsolePrint;

/*
 * ======== struct module definition (unit ConsolePrint) ========
 */

struct virtual_mcu_ConsolePrint_ {
    const string HEADER;
    const string OKBLUE;
    const string OKGREEN;
    const string WARNING;
    const string FAIL;
    const string ENDC;
};
typedef struct virtual_mcu_ConsolePrint_ virtual_mcu_ConsolePrint_;

/*
 * ======== function members (unit ConsolePrint) ========
 */

extern void virtual_mcu_ConsolePrint_printUint__E( uint32 u );
extern void virtual_mcu_ConsolePrint_printReal__E( float f );
extern void virtual_mcu_ConsolePrint_printInt__E( int32 i );
extern void virtual_mcu_ConsolePrint_printBool__E( bool b );
extern void virtual_mcu_ConsolePrint_targetInit__I();
extern void virtual_mcu_ConsolePrint_printStr__E( string s );

/*
 * ======== const definitions ========
 */

#define virtual_mcu_ConsolePrint_HEADER (virtual_mcu_ConsolePrint__s__0)
#define virtual_mcu_ConsolePrint_OKBLUE (virtual_mcu_ConsolePrint__s__1)
#define virtual_mcu_ConsolePrint_OKGREEN (virtual_mcu_ConsolePrint__s__2)
#define virtual_mcu_ConsolePrint_WARNING (virtual_mcu_ConsolePrint__s__3)
#define virtual_mcu_ConsolePrint_FAIL (virtual_mcu_ConsolePrint__s__4)
#define virtual_mcu_ConsolePrint_ENDC (virtual_mcu_ConsolePrint__s__5)

/*
 * ======== data members (unit ConsolePrint) ========
 */

#define virtual_mcu_ConsolePrint_HEADER__V virtual_mcu_ConsolePrint.HEADER
#define virtual_mcu_ConsolePrint_OKBLUE__V virtual_mcu_ConsolePrint.OKBLUE
#define virtual_mcu_ConsolePrint_OKGREEN__V virtual_mcu_ConsolePrint.OKGREEN
#define virtual_mcu_ConsolePrint_WARNING__V virtual_mcu_ConsolePrint.WARNING
#define virtual_mcu_ConsolePrint_FAIL__V virtual_mcu_ConsolePrint.FAIL
#define virtual_mcu_ConsolePrint_ENDC__V virtual_mcu_ConsolePrint.ENDC

/*
 * ======== string literals ========
 */

static const char virtual_mcu_GlobalInterrupts__s__fileName[] = "GlobalInterrupts.p";
static const char virtual_mcu_GlobalInterrupts__s__0[] = "GlobalInterrupts";

/*
 * ======== function definitions ========
 */

void virtual_mcu_GlobalInterrupts_enable__E() {
     printf("GlobalInterrupts enable\n") ;

}

void virtual_mcu_GlobalInterrupts_disable__E() {
     printf("GlobalInterrupts disable\n") ;

}

void virtual_mcu_GlobalInterrupts_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test86_Test_11_pollen__reset__E();
void test86_Test_11_pollen__ready__E();
void test86_Test_11_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct virtual_mcu_GlobalInterrupts_ virtual_mcu_GlobalInterrupts;

/*
 * ======== struct module definition (unit GlobalInterrupts) ========
 */

struct virtual_mcu_GlobalInterrupts_ {
};
typedef struct virtual_mcu_GlobalInterrupts_ virtual_mcu_GlobalInterrupts_;

/*
 * ======== function members (unit GlobalInterrupts) ========
 */

extern void virtual_mcu_GlobalInterrupts_enable__E();
extern void virtual_mcu_GlobalInterrupts_disable__E();
extern void virtual_mcu_GlobalInterrupts_targetInit__I();

/*
 * ======== data members (unit GlobalInterrupts) ========
 */


/*
 * ======== MODULE pollen.event.Dispatcher ========
 */

var $$c = function() {
    const Dispatcher = {};
    Dispatcher.Dispatcher = Dispatcher
    Dispatcher.$name = 'pollen.event.Dispatcher';
    Dispatcher.pollen$used = 0;
    Dispatcher.EventQueue = $units['pollen.event.EventQueue'];
    Dispatcher.Event = $units['pollen.event.Event'];
    Dispatcher.targetInit = new $$Ref('pollen_event_Dispatcher_targetInit__I');
    Dispatcher.post = new $$Ref('pollen_event_Dispatcher_post__E');
    Dispatcher.postFromInterrupt = new $$Ref('pollen_event_Dispatcher_postFromInterrupt__E');
    Dispatcher.run = new $$Ref('pollen_event_Dispatcher_run__E');
    Dispatcher.dispatch = new $$Ref('pollen_event_Dispatcher_dispatch__I');
    Dispatcher.$$hostInit = function() {
        var $$text = '';
        Dispatcher.events = new $units['pollen.event.EventQueue'].EventQueue('pollen_event_Dispatcher_events__V'); Dispatcher.events.new_host((Dispatcher.capacity));
        return $$text;
    }
    Dispatcher.registerEvent = function() {
        var $$text = '';
        Dispatcher.events.setCapacityOnHost(++(Dispatcher.capacity));
        $$printf("Event registered. Capacity=", (Dispatcher.capacity));
        return $$text;
    }
    Dispatcher.pollen__uses__ = function() {
        $$bind($units['pollen.event.EventQueue'], 'pollen$used', true);
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
    }
    Dispatcher.$$privateInit = function() {
        Dispatcher.capacity = 5;
        Dispatcher.GI = 0;
    }
    return Dispatcher;
}
var $$u = $$c();
$units['pollen.event.Dispatcher'] = $$u;
$units.push($$u);


/*
 * ======== CLASS pollen.event.Event ========
 */

var $$c = function() {
    const Event = {};
    Event.Event = Event
    Event.$name = 'pollen.event.Event';
    Event.pollen$used = 0;
    Event.Event$$id = 1;
    Event.Event = function(cn) {
        this.$$id = Event.Event$$id++;
        this.$$cname = cn ? cn : 'pollen_event_Event_Event__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_Event_Event';
        this.$$uname = 'pollen.event.Event';
        this.eventHandler = 0;
    }
    Event.Event.prototype = new $$Struct('pollen.event.Event.Event');
    Event.Event.prototype.$$isAggFld = {};
    Event.Event.prototype.$$isAggFld.eventHandler = false;
    Event.Event.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                this.eventHandler = (h);
        }
        this.$$hostInitLastPass();
        return this;
    }
    Event.Event.prototype.setHandlerOnHost = function( h ) {
        var $$text = '';
        (this.eventHandler) = (h);
        this.$$hostInitLastPass();
        return $$text;
    }
    Event.pollen__uses__ = function() {
    }
    Event.Event.prototype.$$privateInit = function() {
    }
    Event.Event.prototype.$$hostInitLastPass = function() {
    }
    return Event;
}
var $$u = $$c();
$units['pollen.event.Event'] = $$u;
$units.push($$u);


/*
 * ======== pollen.event.EventProtocol ========
 */

var $$c = function() {
    const EventProtocol = {};
    EventProtocol.EventProtocol = EventProtocol
    EventProtocol.$name = 'pollen.event.EventProtocol';
    EventProtocol.pollen$used = 0;
    EventProtocol.pollen__uses__ = function() {
    }
    EventProtocol.$$privateInit = function() {
    }
    return EventProtocol;
}
var $$u = $$c();
$units['pollen.event.EventProtocol'] = $$u;
$units.push($$u);


/*
 * ======== CLASS pollen.event.EventQueue ========
 */

var $$c = function() {
    const EventQueue = {};
    EventQueue.EventQueue = EventQueue
    EventQueue.$name = 'pollen.event.EventQueue';
    EventQueue.pollen$used = 0;
    EventQueue.Event = $units['pollen.event.Event'];
    EventQueue.EventQueue$$id = 1;
    EventQueue.EventQueue = function(cn) {
        this.$$id = EventQueue.EventQueue$$id++;
        this.$$cname = cn ? cn : 'pollen_event_EventQueue_EventQueue__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_EventQueue_EventQueue';
        this.$$uname = 'pollen.event.EventQueue';
        this.capacity = 10;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
        this.maxLength = 0;
    }
    EventQueue.EventQueue.prototype = new $$Struct('pollen.event.EventQueue.EventQueue');
    EventQueue.EventQueue.prototype.$$isAggFld = {};
    EventQueue.EventQueue.prototype.$$isAggFld.capacity = false;
    EventQueue.EventQueue.prototype.$$isAggFld.elements = true;
    EventQueue.EventQueue.prototype.$$isAggFld.length = false;
    EventQueue.EventQueue.prototype.$$isAggFld.head = false;
    EventQueue.EventQueue.prototype.$$isAggFld.tail = false;
    EventQueue.EventQueue.prototype.$$isAggFld.maxLength = false;
    EventQueue.EventQueue.prototype.new_host = function( max ) {
        var $$text = '';
        this.$$privateInit();
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_event_EventQueue_elements__A', false); this.elements.$$assign((new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null, null, null, null, null, null, null, null ]));
        if (arguments.length == 1) {
                this.length = 0;
                this.head = 0;
                this.tail = 0;
                this.maxLength = (max);
                if ((max) > this.capacity) {
            this.capacity = (max);
        }
        }
        this.$$hostInitLastPass();
        return this;
    }
    EventQueue.EventQueue.prototype.setCapacityOnHost = function( capacity ) {
        var $$text = '';
        this.capacity = (capacity);
        this.$$hostInitLastPass();
        return $$text;
    }
    EventQueue.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
    }
    EventQueue.EventQueue.prototype.$$privateInit = function() {
        this.capacity = 10;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
        this.maxLength = 0;
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_event_EventQueue_elements__A', false); this.elements.$$assign((new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null, null, null, null, null, null, null, null ]));
    }
    EventQueue.EventQueue.prototype.$$hostInitLastPass = function() {
    }
    return EventQueue;
}
var $$u = $$c();
$units['pollen.event.EventQueue'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.GlobalInterruptsProtocol ========
 */

var $$c = function() {
    const GlobalInterruptsProtocol = {};
    GlobalInterruptsProtocol.GlobalInterruptsProtocol = GlobalInterruptsProtocol
    GlobalInterruptsProtocol.$name = 'pollen.hardware.GlobalInterruptsProtocol';
    GlobalInterruptsProtocol.pollen$used = 0;
    GlobalInterruptsProtocol.pollen__uses__ = function() {
    }
    GlobalInterruptsProtocol.$$privateInit = function() {
    }
    return GlobalInterruptsProtocol;
}
var $$u = $$c();
$units['pollen.hardware.GlobalInterruptsProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.hardware.GlobalInterruptsProtocol ========
 */

var $$c = function() {
    const GlobalInterruptsProtocol = {};
    GlobalInterruptsProtocol.GlobalInterruptsProtocol = GlobalInterruptsProtocol
    GlobalInterruptsProtocol.$name = 'pollen.hardware.GlobalInterruptsProtocol';
    GlobalInterruptsProtocol.pollen$used = 0;
    GlobalInterruptsProtocol.pollen__uses__ = function() {
    }
    GlobalInterruptsProtocol.$$privateInit = function() {
    }
    return GlobalInterruptsProtocol;
}
var $$u = $$c();
$units['pollen.hardware.GlobalInterruptsProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.event.EventProtocol ========
 */

var $$c = function() {
    const EventProtocol = {};
    EventProtocol.EventProtocol = EventProtocol
    EventProtocol.$name = 'pollen.event.EventProtocol';
    EventProtocol.pollen$used = 0;
    EventProtocol.pollen__uses__ = function() {
    }
    EventProtocol.$$privateInit = function() {
    }
    return EventProtocol;
}
var $$u = $$c();
$units['pollen.event.EventProtocol'] = $$u;
$units.push($$u);

/*
 * ======== CLASS pollen.event.Event ========
 */

var $$c = function() {
    const Event = {};
    Event.Event = Event
    Event.$name = 'pollen.event.Event';
    Event.pollen$used = 0;
    Event.Event$$id = 1;
    Event.Event = function(cn) {
        this.$$id = Event.Event$$id++;
        this.$$cname = cn ? cn : 'pollen_event_Event_Event__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_Event_Event';
        this.$$uname = 'pollen.event.Event';
        this.eventHandler = 0;
    }
    Event.Event.prototype = new $$Struct('pollen.event.Event.Event');
    Event.Event.prototype.$$isAggFld = {};
    Event.Event.prototype.$$isAggFld.eventHandler = false;
    Event.Event.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                this.eventHandler = (h);
        }
        this.$$hostInitLastPass();
        return this;
    }
    Event.Event.prototype.setHandlerOnHost = function( h ) {
        var $$text = '';
        (this.eventHandler) = (h);
        this.$$hostInitLastPass();
        return $$text;
    }
    Event.pollen__uses__ = function() {
    }
    Event.Event.prototype.$$privateInit = function() {
    }
    Event.Event.prototype.$$hostInitLastPass = function() {
    }
    return Event;
}
var $$u = $$c();
$units['pollen.event.Event'] = $$u;
$units.push($$u);

/*
 * ======== CLASS pollen.event.EventQueue ========
 */

var $$c = function() {
    const EventQueue = {};
    EventQueue.EventQueue = EventQueue
    EventQueue.$name = 'pollen.event.EventQueue';
    EventQueue.pollen$used = 0;
    EventQueue.Event = $units['pollen.event.Event'];
    EventQueue.EventQueue$$id = 1;
    EventQueue.EventQueue = function(cn) {
        this.$$id = EventQueue.EventQueue$$id++;
        this.$$cname = cn ? cn : 'pollen_event_EventQueue_EventQueue__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_EventQueue_EventQueue';
        this.$$uname = 'pollen.event.EventQueue';
        this.capacity = 10;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
        this.maxLength = 0;
    }
    EventQueue.EventQueue.prototype = new $$Struct('pollen.event.EventQueue.EventQueue');
    EventQueue.EventQueue.prototype.$$isAggFld = {};
    EventQueue.EventQueue.prototype.$$isAggFld.capacity = false;
    EventQueue.EventQueue.prototype.$$isAggFld.elements = true;
    EventQueue.EventQueue.prototype.$$isAggFld.length = false;
    EventQueue.EventQueue.prototype.$$isAggFld.head = false;
    EventQueue.EventQueue.prototype.$$isAggFld.tail = false;
    EventQueue.EventQueue.prototype.$$isAggFld.maxLength = false;
    EventQueue.EventQueue.prototype.new_host = function( max ) {
        var $$text = '';
        this.$$privateInit();
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_event_EventQueue_elements__A', false); this.elements.$$assign((new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null, null, null, null, null, null, null, null ]));
        if (arguments.length == 1) {
                this.length = 0;
                this.head = 0;
                this.tail = 0;
                this.maxLength = (max);
                if ((max) > this.capacity) {
            this.capacity = (max);
        }
        }
        this.$$hostInitLastPass();
        return this;
    }
    EventQueue.EventQueue.prototype.setCapacityOnHost = function( capacity ) {
        var $$text = '';
        this.capacity = (capacity);
        this.$$hostInitLastPass();
        return $$text;
    }
    EventQueue.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
    }
    EventQueue.EventQueue.prototype.$$privateInit = function() {
        this.capacity = 10;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
        this.maxLength = 0;
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_event_EventQueue_elements__A', false); this.elements.$$assign((new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null, null, null, null, null, null, null, null ]));
    }
    EventQueue.EventQueue.prototype.$$hostInitLastPass = function() {
    }
    return EventQueue;
}
var $$u = $$c();
$units['pollen.event.EventQueue'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.event.Dispatcher ========
 */

var $$c = function() {
    const Dispatcher = {};
    Dispatcher.Dispatcher = Dispatcher
    Dispatcher.$name = 'pollen.event.Dispatcher';
    Dispatcher.pollen$used = 0;
    Dispatcher.EventQueue = $units['pollen.event.EventQueue'];
    Dispatcher.Event = $units['pollen.event.Event'];
    Dispatcher.targetInit = new $$Ref('pollen_event_Dispatcher_targetInit__I');
    Dispatcher.post = new $$Ref('pollen_event_Dispatcher_post__E');
    Dispatcher.postFromInterrupt = new $$Ref('pollen_event_Dispatcher_postFromInterrupt__E');
    Dispatcher.run = new $$Ref('pollen_event_Dispatcher_run__E');
    Dispatcher.dispatch = new $$Ref('pollen_event_Dispatcher_dispatch__I');
    Dispatcher.$$hostInit = function() {
        var $$text = '';
        Dispatcher.events = new $units['pollen.event.EventQueue'].EventQueue('pollen_event_Dispatcher_events__V'); Dispatcher.events.new_host((Dispatcher.capacity));
        return $$text;
    }
    Dispatcher.registerEvent = function() {
        var $$text = '';
        Dispatcher.events.setCapacityOnHost(++(Dispatcher.capacity));
        $$printf("Event registered. Capacity=", (Dispatcher.capacity));
        return $$text;
    }
    Dispatcher.pollen__uses__ = function() {
        $$bind($units['pollen.event.EventQueue'], 'pollen$used', true);
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
    }
    Dispatcher.$$privateInit = function() {
        Dispatcher.capacity = 5;
        Dispatcher.GI = 0;
    }
    return Dispatcher;
}
var $$u = $$c();
$units['pollen.event.Dispatcher'] = $$u;
$units.push($$u);

/*
 * ======== MODULE virtual.mcu.ConsolePrint ========
 */

var $$c = function() {
    const ConsolePrint = {};
    ConsolePrint.ConsolePrint = ConsolePrint
    ConsolePrint.$name = 'virtual.mcu.ConsolePrint';
    ConsolePrint.pollen$used = 0;
    ConsolePrint.printBool = new $$Ref('virtual_mcu_ConsolePrint_printBool__E');
    ConsolePrint.printReal = new $$Ref('virtual_mcu_ConsolePrint_printReal__E');
    ConsolePrint.printInt = new $$Ref('virtual_mcu_ConsolePrint_printInt__E');
    ConsolePrint.printUint = new $$Ref('virtual_mcu_ConsolePrint_printUint__E');
    ConsolePrint.printStr = new $$Ref('virtual_mcu_ConsolePrint_printStr__E');
    ConsolePrint.targetInit = new $$Ref('virtual_mcu_ConsolePrint_targetInit__I');
    ConsolePrint.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    ConsolePrint.pollen__uses__ = function() {
    }
    ConsolePrint.$$privateInit = function() {
        ConsolePrint.HEADER = "\033[95m";
        ConsolePrint.OKBLUE = "\033[94m";
        ConsolePrint.OKGREEN = "\033[92m";
        ConsolePrint.WARNING = "\033[93m";
        ConsolePrint.FAIL = "\033[91m";
        ConsolePrint.ENDC = "\033[0m";
    }
    return ConsolePrint;
}
var $$u = $$c();
$units['virtual.mcu.ConsolePrint'] = $$u;
$units.push($$u);

/*
 * ======== MODULE virtual.mcu.GlobalInterrupts ========
 */

var $$c = function() {
    const GlobalInterrupts = {};
    GlobalInterrupts.GlobalInterrupts = GlobalInterrupts
    GlobalInterrupts.$name = 'virtual.mcu.GlobalInterrupts';
    GlobalInterrupts.pollen$used = 0;
    GlobalInterrupts.enable = new $$Ref('virtual_mcu_GlobalInterrupts_enable__E');
    GlobalInterrupts.disable = new $$Ref('virtual_mcu_GlobalInterrupts_disable__E');
    GlobalInterrupts.targetInit = new $$Ref('virtual_mcu_GlobalInterrupts_targetInit__I');
    GlobalInterrupts.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    GlobalInterrupts.pollen__uses__ = function() {
    }
    GlobalInterrupts.$$privateInit = function() {
    }
    return GlobalInterrupts;
}
var $$u = $$c();
$units['virtual.mcu.GlobalInterrupts'] = $$u;
$units.push($$u);

/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test86.Test_11 ========
 */

var $$c = function() {
    const Test_11 = {};
    Test_11.Test_11 = Test_11
    Test_11.$name = 'test86.Test_11';
    Test_11.pollen$used = 0;
    Test_11.Dispatcher = $units['pollen.event.Dispatcher'];
    Test_11.Event = $units['pollen.event.Event'];
    Test_11.Console = $units['virtual.mcu.ConsolePrint'];
    Test_11.GlobalInterrupts = $units['virtual.mcu.GlobalInterrupts'];
    Test_11.PrintImpl = $units['test54.PrintImpl'];
    Test_11.pollen__run = new $$Ref('test86_Test_11_pollen__run__E');
    Test_11.pollen__shutdown = new $$Ref('test86_Test_11_pollen__shutdown__E');
    Test_11.tick1 = new $$Ref('test86_Test_11_tick1__I');
    Test_11.tick2 = new $$Ref('test86_Test_11_tick2__I');
    Test_11.tick3 = new $$Ref('test86_Test_11_tick3__I');
    Test_11.tick4 = new $$Ref('test86_Test_11_tick4__I');
    Test_11.tick5 = new $$Ref('test86_Test_11_tick5__I');
    Test_11.targetInit = new $$Ref('test86_Test_11_targetInit__I');
    Test_11.$$hostInit = function() {
        var $$text = '';
        Test_11.events = new $$Array((Test_11.NumEvents), function($$cn,$$idx){ return 0;}, 'test86_Test_11_events__A', false); Test_11.events.$$assign((new $$Array((Test_11.NumEvents), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ new $units['pollen.event.Event'].Event().new_host((Test_11.tick1)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick2)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick3)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick4)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick5)) ]));
        var $$v = 'virtual_mcu_GlobalInterrupts';
        var $$s = $$bind($units['test86.Test_11'], 'Dispatcher.GI', $$v);{ $$v.pollen$used = true;
        $units['virtual.mcu.GlobalInterrupts'].pollen$used = true;}

        return $$text;
    }
    Test_11.pollen__uses__ = function() {
        $$bind($units['pollen.event.Dispatcher'], 'pollen$used', true);
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
        $$bind($units['virtual.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['virtual.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Test_11.$$privateInit = function() {
        Test_11.NumEvents = 5;
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test86.Test_11'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Test_11;
}
var $$u = $$c();
$units['test86.Test_11'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test86.Test_11'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test86.Test_11 ========
 */

var $$c = function() {
    const Test_11 = {};
    Test_11.Test_11 = Test_11
    Test_11.$name = 'test86.Test_11';
    Test_11.pollen$used = 0;
    Test_11.Dispatcher = $units['pollen.event.Dispatcher'];
    Test_11.Event = $units['pollen.event.Event'];
    Test_11.Console = $units['virtual.mcu.ConsolePrint'];
    Test_11.GlobalInterrupts = $units['virtual.mcu.GlobalInterrupts'];
    Test_11.PrintImpl = $units['test54.PrintImpl'];
    Test_11.pollen__run = new $$Ref('test86_Test_11_pollen__run__E');
    Test_11.pollen__shutdown = new $$Ref('test86_Test_11_pollen__shutdown__E');
    Test_11.tick1 = new $$Ref('test86_Test_11_tick1__I');
    Test_11.tick2 = new $$Ref('test86_Test_11_tick2__I');
    Test_11.tick3 = new $$Ref('test86_Test_11_tick3__I');
    Test_11.tick4 = new $$Ref('test86_Test_11_tick4__I');
    Test_11.tick5 = new $$Ref('test86_Test_11_tick5__I');
    Test_11.targetInit = new $$Ref('test86_Test_11_targetInit__I');
    Test_11.$$hostInit = function() {
        var $$text = '';
        Test_11.events = new $$Array((Test_11.NumEvents), function($$cn,$$idx){ return 0;}, 'test86_Test_11_events__A', false); Test_11.events.$$assign((new $$Array((Test_11.NumEvents), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ new $units['pollen.event.Event'].Event().new_host((Test_11.tick1)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick2)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick3)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick4)), new $units['pollen.event.Event'].Event().new_host((Test_11.tick5)) ]));
        var $$v = 'virtual_mcu_GlobalInterrupts';
        var $$s = $$bind($units['test86.Test_11'], 'Dispatcher.GI', $$v);{ $$v.pollen$used = true;
        $units['virtual.mcu.GlobalInterrupts'].pollen$used = true;}

        return $$text;
    }
    Test_11.pollen__uses__ = function() {
        $$bind($units['pollen.event.Dispatcher'], 'pollen$used', true);
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
        $$bind($units['virtual.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['virtual.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Test_11.$$privateInit = function() {
        Test_11.NumEvents = 5;
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test86.Test_11'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Test_11;
}
var $$u = $$c();
$units['test86.Test_11'] = $$u;
$units.push($$u);


/*
 * ======== MODULE virtual.mcu.ConsolePrint ========
 */

var $$c = function() {
    const ConsolePrint = {};
    ConsolePrint.ConsolePrint = ConsolePrint
    ConsolePrint.$name = 'virtual.mcu.ConsolePrint';
    ConsolePrint.pollen$used = 0;
    ConsolePrint.printBool = new $$Ref('virtual_mcu_ConsolePrint_printBool__E');
    ConsolePrint.printReal = new $$Ref('virtual_mcu_ConsolePrint_printReal__E');
    ConsolePrint.printInt = new $$Ref('virtual_mcu_ConsolePrint_printInt__E');
    ConsolePrint.printUint = new $$Ref('virtual_mcu_ConsolePrint_printUint__E');
    ConsolePrint.printStr = new $$Ref('virtual_mcu_ConsolePrint_printStr__E');
    ConsolePrint.targetInit = new $$Ref('virtual_mcu_ConsolePrint_targetInit__I');
    ConsolePrint.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    ConsolePrint.pollen__uses__ = function() {
    }
    ConsolePrint.$$privateInit = function() {
        ConsolePrint.HEADER = "\033[95m";
        ConsolePrint.OKBLUE = "\033[94m";
        ConsolePrint.OKGREEN = "\033[92m";
        ConsolePrint.WARNING = "\033[93m";
        ConsolePrint.FAIL = "\033[91m";
        ConsolePrint.ENDC = "\033[0m";
    }
    return ConsolePrint;
}
var $$u = $$c();
$units['virtual.mcu.ConsolePrint'] = $$u;
$units.push($$u);


/*
 * ======== MODULE virtual.mcu.GlobalInterrupts ========
 */

var $$c = function() {
    const GlobalInterrupts = {};
    GlobalInterrupts.GlobalInterrupts = GlobalInterrupts
    GlobalInterrupts.$name = 'virtual.mcu.GlobalInterrupts';
    GlobalInterrupts.pollen$used = 0;
    GlobalInterrupts.enable = new $$Ref('virtual_mcu_GlobalInterrupts_enable__E');
    GlobalInterrupts.disable = new $$Ref('virtual_mcu_GlobalInterrupts_disable__E');
    GlobalInterrupts.targetInit = new $$Ref('virtual_mcu_GlobalInterrupts_targetInit__I');
    GlobalInterrupts.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    GlobalInterrupts.pollen__uses__ = function() {
    }
    GlobalInterrupts.$$privateInit = function() {
    }
    return GlobalInterrupts;
}
var $$u = $$c();
$units['virtual.mcu.GlobalInterrupts'] = $$u;
$units.push($$u);

