pollen version 0.2.137
pollen version 0.2.137
pollen.text.Text.p, line 127:5, the pegging operator cannot be used in declarations.
Now run executeable
1. For operands s1 = xxx1, s2 = xyz1, n = 3
   strncmp() returned s1 less than s2
2. For operands s1 = xxx1, s2 = xyz1
   strcmp() returned s1 less than s2
3. For operand s1 = xxx1   strlen() returned 4

1. For operands s1 = xxx1, s2 = xxx1, n = 3
   strncmp() returned s1, s2 equal
2. For operands s1 = xxx1, s2 = xxx1
   strcmp() returned s1, s2 equal
3. For operand s1 = lxkjdkajfkajsd;lfkajsd;lfkja;lsefjl;asjk   strlen() returned 40

1. For operands s1 = xxx1, s2 = x, n = 3
   strncmp() returned s2 less than s1
2. For operands s1 = xxx1, s2 = x
   strcmp() returned s2 less than s1
3. For operand s1 =    strlen() returned 0

1. For operands s1 = xxx1, s2 = x, n = 1
   strncmp() returned s1, s2 equal
2. For operands s1 = xxx1, s2 = x
   strcmp() returned s2 less than s1
3. For operand s1 = x   strlen() returned 1

1. For operands s1 = xxx1, s2 = c, n = 1
   strncmp() returned s2 less than s1
2. For operands s1 = xxx1, s2 = c
   strcmp() returned s2 less than s1

1. For operands s1 = xxx1, s2 = , n = 1
   strncmp() returned s2 less than s1
2. For operands s1 = xxx1, s2 = 
   strcmp() returned s2 less than s1

1. For operands s1 = , s2 = , n = 1
   strncmp() returned s1, s2 equal
2. For operands s1 = , s2 = 
   strcmp() returned s1, s2 equal


/*
 * ======== string literals ========
 */

static const char pollen_text_Text__s__fileName[] = "Text.p";
static const char pollen_text_Text__s__0[] = "Text";

/*
 * ======== function definitions ========
 */

int32 pollen_text_Text_strcmp__E( string s1, string s2 ) {
    
         while (*s1 == *s2++)
                 if (*s1++ == '\0')
                         return (0);
         return (*(const unsigned char *)s1 - *(const unsigned char *)(s2 - 1));
   ;

}

int32 pollen_text_Text_strncmp__E( string s1, string s2, uint16 n ) {
     
         if (n == 0)
                 return (0);
         do {
                 if (*s1 != *s2++)
                         return (*(const unsigned char *)s1 -
                                 *(const unsigned char *)(s2 - 1));
                 if (*s1++ == '\0')
                         break;
         } while (--n != 0);
         return (0);
    ;

}

uint16 pollen_text_Text_strlen__E( string s ) {
    uint16 i;
    byte * b = (char*) (s);
    i = 0;
    while ((b[(i)]) != '\0') {
        (i)++;
    }
    return(  (i)  );
}

void pollen_text_Text_itoa__E( int32 num, byte  str[], uint8 base ) {
    uint16 i;
    bool isNegative;
    uint32 rem;
    i = 0;
    isNegative = false;
    if ((num) == 0) {
        (str[(i)++]) = '0';
        (str[(i)]) = '\0';
        return;
    }
    if ((num) < 0 && (base) == 10) {
        (isNegative) = true;
        (num) = -(num);
    }
    while ((num) != 0) {
        rem = (num) % (base);
        (str[(i)++]) = ((rem) > 9) ? ((rem) - 10) + 0x61 : (rem) + 0x30;
        (num) = (num) / (base);
    }
    if ((isNegative)) {
        (str[(i)++]) = '-';
    }
    (str[(i)]) = '\0';
    pollen_text_Text_reverse__E((str), (i));
}

void pollen_text_Text_reverse__E( byte  data[], uint16 length ) {
    uint16 start;
    uint16 end;
    byte b;
    start = 0;
    end = (length) - 1;
    while ((start) < (end)) {
        b = (data[(start)]);
        (data[(start)]) = (data[(end)]);
        (data[(end)]) = (b);
        (start)++;
        (end)--;
    }
}

void pollen_text_Text_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test93_Mod1_pollen__reset__E();
void test93_Mod1_pollen__ready__E();
void test93_Mod1_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_text_Text_ pollen_text_Text;

/*
 * ======== struct module definition (unit Text) ========
 */

struct pollen_text_Text_ {
};
typedef struct pollen_text_Text_ pollen_text_Text_;

/*
 * ======== function members (unit Text) ========
 */

extern int32 pollen_text_Text_strcmp__E( string s1, string s2 );
extern int32 pollen_text_Text_strncmp__E( string s1, string s2, uint16 n );
extern uint16 pollen_text_Text_strlen__E( string s );
extern void pollen_text_Text_itoa__E( int32 num, byte  str[], uint8 base );
extern void pollen_text_Text_reverse__E( byte  data[], uint16 length );
extern void pollen_text_Text_targetInit__I();

/*
 * ======== data members (unit Text) ========
 */


/*
 * ======== string literals ========
 */

static const char test54_PrintImpl__s__fileName[] = "PrintImpl.p";
static const char test54_PrintImpl__s__0[] = "PrintImpl";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test54_PrintImpl_printUint__E( uint32 u ) {
     printf("%u", (unsigned int)u) ;

}

void test54_PrintImpl_printInt__E( int32 i ) {
     printf("%i", (int)i) ;

}

void test54_PrintImpl_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void test54_PrintImpl_printBool__E( bool b ) {
    if ((b)) {
         printf("%s", "true") ;

    }
    else {
         printf("%s", "false") ;

    }
}

void test54_PrintImpl_targetInit__I() {
}

void test54_PrintImpl_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test93_Mod1_pollen__reset__E();
void test93_Mod1_pollen__ready__E();
void test93_Mod1_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test54_PrintImpl_ test54_PrintImpl;

/*
 * ======== struct module definition (unit PrintImpl) ========
 */

struct test54_PrintImpl_ {
};
typedef struct test54_PrintImpl_ test54_PrintImpl_;

/*
 * ======== function members (unit PrintImpl) ========
 */

extern void test54_PrintImpl_printUint__E( uint32 u );
extern void test54_PrintImpl_printInt__E( int32 i );
extern void test54_PrintImpl_printReal__E( float f );
extern void test54_PrintImpl_printBool__E( bool b );
extern void test54_PrintImpl_targetInit__I();
extern void test54_PrintImpl_printStr__E( string s );

/*
 * ======== data members (unit PrintImpl) ========
 */

#include <std.h>

/*
 * ======== protocol member test93.Mod1.pollenPrintProxy delegates test54_PrintImpl ========
 */

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== unit headers ========
 */

#ifndef pollen_text_Text__M
#define pollen_text_Text__M
#include "../../pollen.text/Text/Text.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

#ifndef test93_Mod1__M
#define test93_Mod1__M
#include "../../test93/Mod1/Mod1.h"
#endif

/*
 * ======== target data definitions (unit Text) ========
 */

struct pollen_text_Text_ pollen_text_Text = { /* module data */
};

/*
 * ======== target data definitions (unit PrintImpl) ========
 */

struct test54_PrintImpl_ test54_PrintImpl = { /* module data */
};

/*
 * ======== target data definitions (unit Mod1) ========
 */

struct test93_Mod1_ test93_Mod1 = { /* module data */
    "xxx1",                  /* s1 */
    "xyz1",                  /* s2 */
    &test54_PrintImpl,    /* pollenPrintProxy */
};

/*
 * ======== pollen print ========
 */

void test93_Mod1_pollen__printBool(bool b) {
    test54_PrintImpl_printBool__E(b);
}
void test93_Mod1_pollen__printInt(int32 i) {
    test54_PrintImpl_printInt__E(i);
}
void test93_Mod1_pollen__printReal(float f) {
    test54_PrintImpl_printReal__E(f);
}
void test93_Mod1_pollen__printUint(uint32 u) {
    test54_PrintImpl_printUint__E(u);
}
void test93_Mod1_pollen__printStr(string s) {
    test54_PrintImpl_printStr__E(s);
}

/*
 * ======== module functions ========
 */

#include "../../pollen.text/Text/Text.c"
#include "../../test54/PrintImpl/PrintImpl.c"
#include "../../test93/Mod1/Mod1.c"

/*
 * ======== pollen.reset() ========
 */

void test93_Mod1_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test93_Mod1_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== pollen.shutdown(uint8) ========
 */

void test93_Mod1_pollen__shutdown__E(uint8 i) {
    volatile int dummy = 0xCAFE;
    while (dummy) ;
}

/*
 * ======== main() ========
 */

int main() {
    test93_Mod1_pollen__reset__E();
    pollen_text_Text_targetInit__I();
    test54_PrintImpl_targetInit__I();
    test93_Mod1_targetInit__I();
    test93_Mod1_pollen__ready__E();
    test93_Mod1_pollen__run__E();
    test93_Mod1_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test93_Mod1__s__fileName[] = "Mod1.p";
static const char test93_Mod1__s__16[] = "";
static const char test93_Mod1__s__17[] = "c";
static const char test93_Mod1__s__12[] = "3. For operand s1 = ";
static const char test93_Mod1__s__3[] = "s1 less than s2";
static const char test93_Mod1__s__18[] = "Mod1";
static const char test93_Mod1__s__7[] = ", n = ";
static const char test93_Mod1__s__10[] = "2. For operands s1 = ";
static const char test93_Mod1__s__6[] = ", s2 = ";
static const char test93_Mod1__s__15[] = "x";
static const char test93_Mod1__s__4[] = "s1, s2 equal";
static const char test93_Mod1__s__5[] = "1. For operands s1 = ";
static const char test93_Mod1__s__2[] = "s2 less than s1";
static const char test93_Mod1__s__1[] = "xyz1";
static const char test93_Mod1__s__9[] = "   strncmp() returned ";
static const char test93_Mod1__s__11[] = "   strcmp() returned ";
static const char test93_Mod1__s__14[] = "lxkjdkajfkajsd;lfkajsd;lfkja;lsefjl;asjk";
static const char test93_Mod1__s__13[] = "   strlen() returned ";
static const char test93_Mod1__s__8[] = "\n";
static const char test93_Mod1__s__0[] = "xxx1";

/*
 * ======== code injections ========
 */

 #include <stdlib.h> 

/*
 * ======== function definitions ========
 */

string test93_Mod1_test_strcmp__I( string s1, string s2 ) {
    int32 r;
    string rslt;
    r = pollen_text_Text_strcmp__E((s1), (s2));
    rslt = (r) > 0 ? test93_Mod1__s__2 : (r) < 0 ? test93_Mod1__s__3 : test93_Mod1__s__4;
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__10);
	test93_Mod1_pollen__printStr((string)(s1));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__6);
	test93_Mod1_pollen__printStr((string)(s2));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__11);
	test93_Mod1_pollen__printStr((string)(rslt));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    return(  (rslt)  );
}

void test93_Mod1_pollen__run__E() {
    string rslt;
    string s3;
    rslt = test93_Mod1_test_strncmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V), 3);
    (rslt) = test93_Mod1_test_strcmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V));
    test93_Mod1_test_strlen__I((test93_Mod1_s1__V));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    (test93_Mod1_s2__V) = (test93_Mod1_s1__V);
    s3 = test93_Mod1__s__14;
    (rslt) = test93_Mod1_test_strncmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V), 3);
    (rslt) = test93_Mod1_test_strcmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V));
    test93_Mod1_test_strlen__I((s3));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    (test93_Mod1_s2__V) = test93_Mod1__s__15;
    (s3) = test93_Mod1__s__16;
    (rslt) = test93_Mod1_test_strncmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V), 3);
    (rslt) = test93_Mod1_test_strcmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V));
    test93_Mod1_test_strlen__I((s3));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    (test93_Mod1_s2__V) = test93_Mod1__s__15;
    (s3) = (test93_Mod1_s2__V);
    (rslt) = test93_Mod1_test_strncmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V), 1);
    (rslt) = test93_Mod1_test_strcmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V));
    test93_Mod1_test_strlen__I((s3));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    (test93_Mod1_s2__V) = test93_Mod1__s__17;
    (rslt) = test93_Mod1_test_strncmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V), 1);
    (rslt) = test93_Mod1_test_strcmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    (test93_Mod1_s2__V) = test93_Mod1__s__16;
    (rslt) = test93_Mod1_test_strncmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V), 1);
    (rslt) = test93_Mod1_test_strcmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    (test93_Mod1_s1__V) = test93_Mod1__s__16;
    (test93_Mod1_s2__V) = test93_Mod1__s__16;
    (rslt) = test93_Mod1_test_strncmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V), 1);
    (rslt) = test93_Mod1_test_strcmp__I((test93_Mod1_s1__V), (test93_Mod1_s2__V));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
     exit(0) ;

}

void test93_Mod1_test_strlen__I( string s1 ) {
    uint16 r;
    r = pollen_text_Text_strlen__E((s1));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__12);
	test93_Mod1_pollen__printStr((string)(s1));
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__13);
	test93_Mod1_pollen__printUint((uint32)(r));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
}

string test93_Mod1_test_strncmp__I( string s1, string s2, uint16 n ) {
    int32 r;
    string rslt;
    r = pollen_text_Text_strncmp__E((s1), (s2), (n));
    rslt = (r) > 0 ? test93_Mod1__s__2 : (r) < 0 ? test93_Mod1__s__3 : test93_Mod1__s__4;
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__5);
	test93_Mod1_pollen__printStr((string)(s1));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__6);
	test93_Mod1_pollen__printStr((string)(s2));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__7);
	test93_Mod1_pollen__printUint((uint32)(n));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    test93_Mod1_pollen__printStr((string)test93_Mod1__s__9);
	test93_Mod1_pollen__printStr((string)(rslt));
	test93_Mod1_pollen__printStr((string)test93_Mod1__s__8);
    return(  (rslt)  );
}

void test93_Mod1_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef pollen_text_Text__M
#define pollen_text_Text__M
#include "../../pollen.text/Text/Text.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test93_Mod1_pollen__reset__E();
void test93_Mod1_pollen__ready__E();
void test93_Mod1_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test93_Mod1_ test93_Mod1;

/*
 * ======== struct module definition (unit Mod1) ========
 */

struct test54_PrintImpl_;
struct test93_Mod1_ {
    string s1;
    string s2;
    struct test54_PrintImpl_ *pollenPrintProxy;
};
typedef struct test93_Mod1_ test93_Mod1_;

/*
 * ======== function members (unit Mod1) ========
 */

extern string test93_Mod1_test_strcmp__I( string s1, string s2 );
extern void test93_Mod1_pollen__run__E();
extern void test93_Mod1_test_strlen__I( string s1 );
extern string test93_Mod1_test_strncmp__I( string s1, string s2, uint16 n );
extern void test93_Mod1_targetInit__I();

/*
 * ======== data members (unit Mod1) ========
 */

#define test93_Mod1_s1__V test93_Mod1.s1
#define test93_Mod1_s2__V test93_Mod1.s2
#define test93_Mod1_pollenPrintProxy__V test93_Mod1.pollenPrintProxy

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.text.Text ========
 */

var $$c = function() {
    const Text = {};
    Text.Text = Text
    Text.$name = 'pollen.text.Text';
    Text.pollen$used = 0;
    Text.itoa = new $$Ref('pollen_text_Text_itoa__E');
    Text.reverse = new $$Ref('pollen_text_Text_reverse__E');
    Text.strcmp = new $$Ref('pollen_text_Text_strcmp__E');
    Text.strncmp = new $$Ref('pollen_text_Text_strncmp__E');
    Text.strlen = new $$Ref('pollen_text_Text_strlen__E');
    Text.targetInit = new $$Ref('pollen_text_Text_targetInit__I');
    Text.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Text.pollen__uses__ = function() {
    }
    Text.$$privateInit = function() {
    }
    return Text;
}
var $$u = $$c();
$units['pollen.text.Text'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.text.Text ========
 */

var $$c = function() {
    const Text = {};
    Text.Text = Text
    Text.$name = 'pollen.text.Text';
    Text.pollen$used = 0;
    Text.itoa = new $$Ref('pollen_text_Text_itoa__E');
    Text.reverse = new $$Ref('pollen_text_Text_reverse__E');
    Text.strcmp = new $$Ref('pollen_text_Text_strcmp__E');
    Text.strncmp = new $$Ref('pollen_text_Text_strncmp__E');
    Text.strlen = new $$Ref('pollen_text_Text_strlen__E');
    Text.targetInit = new $$Ref('pollen_text_Text_targetInit__I');
    Text.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Text.pollen__uses__ = function() {
    }
    Text.$$privateInit = function() {
    }
    return Text;
}
var $$u = $$c();
$units['pollen.text.Text'] = $$u;
$units.push($$u);

/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test93.Mod1 ========
 */

var $$c = function() {
    const Mod1 = {};
    Mod1.Mod1 = Mod1
    Mod1.$name = 'test93.Mod1';
    Mod1.pollen$used = 0;
    Mod1.Text = $units['pollen.text.Text'];
    Mod1.PrintImpl = $units['test54.PrintImpl'];
    Mod1.test_strncmp = new $$Ref('test93_Mod1_test_strncmp__I');
    Mod1.test_strcmp = new $$Ref('test93_Mod1_test_strcmp__I');
    Mod1.test_strlen = new $$Ref('test93_Mod1_test_strlen__I');
    Mod1.pollen__run = new $$Ref('test93_Mod1_pollen__run__E');
    Mod1.targetInit = new $$Ref('test93_Mod1_targetInit__I');
    Mod1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Mod1.pollen__uses__ = function() {
        $$bind($units['pollen.text.Text'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Mod1.$$privateInit = function() {
        Mod1.s1 = "xxx1";
        Mod1.s2 = "xyz1";
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test93.Mod1'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Mod1;
}
var $$u = $$c();
$units['test93.Mod1'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test93.Mod1'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test93.Mod1 ========
 */

var $$c = function() {
    const Mod1 = {};
    Mod1.Mod1 = Mod1
    Mod1.$name = 'test93.Mod1';
    Mod1.pollen$used = 0;
    Mod1.Text = $units['pollen.text.Text'];
    Mod1.PrintImpl = $units['test54.PrintImpl'];
    Mod1.test_strncmp = new $$Ref('test93_Mod1_test_strncmp__I');
    Mod1.test_strcmp = new $$Ref('test93_Mod1_test_strcmp__I');
    Mod1.test_strlen = new $$Ref('test93_Mod1_test_strlen__I');
    Mod1.pollen__run = new $$Ref('test93_Mod1_pollen__run__E');
    Mod1.targetInit = new $$Ref('test93_Mod1_targetInit__I');
    Mod1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Mod1.pollen__uses__ = function() {
        $$bind($units['pollen.text.Text'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Mod1.$$privateInit = function() {
        Mod1.s1 = "xxx1";
        Mod1.s2 = "xyz1";
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test93.Mod1'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Mod1;
}
var $$u = $$c();
$units['test93.Mod1'] = $$u;
$units.push($$u);

