pollen version 0.2.137
pollen version 0.2.137
test45.Test1.p, line 5:1, 'N.bar': function is not declared in (or not visible to) the current scope Test1.test1
test45.Test1.p, line 5:1, 'bar': identifier is not declared in (or not visible to) the current scope Test1.test1
test45.Test1.p, line 5:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
test45.Test2.p, line 7:1, 'N.foo': function is not declared in (or not visible to) the current scope Test2.test
test45.Test2.p, line 7:1, 'foo': identifier is not declared in (or not visible to) the current scope Test2.test
test45.Test2.p, line 7:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
test45.Test3.p, line 4:1, 'P.foo': function is not declared in (or not visible to) the current scope Test3.test
test45.Test3.p, line 4:1, 'foo': identifier is not declared in (or not visible to) the current scope Test3.test
test45.Test3.p, line 4:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
test45.Test4.p, line 5:1, 'M1.foo': function is not declared in (or not visible to) the current scope Test4.test
test45.Test4.p, line 5:1, 'M1.foo': identifier is not declared in (or not visible to) the current scope Test4.test
test45.Test4.p, line 5:1, 'M1.bar': function is not declared in (or not visible to) the current scope Test4.test
test45.Test4.p, line 5:1, 'M1.bar': identifier is not declared in (or not visible to) the current scope Test4.test
test45.Test4.p, line 5:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
test45.C5.p, line 7:1, non-unique name 'bar'. Exported function names in a composition must be unique regardless of module qualifier.
test45.Test5.p, line 5:1, 'M1.foo': function is not declared in (or not visible to) the current scope Test5.test
test45.Test5.p, line 5:1, 'foo': identifier is not declared in (or not visible to) the current scope Test5.test
test45.Test5.p, line 5:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
unknown: No such file or directory

avrdude done.  Thank you.

pollen version 0.2.137
test45.Test7.p, line 3:1, 'N.foo': function is not declared in (or not visible to) the current scope Test7.test
test45.Test7.p, line 3:1, 'foo': identifier is not declared in (or not visible to) the current scope Test7.test
test45.Test7.p, line 3:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
test45.Test8.p, line 10:0, 'M': not an exported unit
test45.Test8.p, line 5:1, 'M.foo': function is not declared in (or not visible to) the current scope Test8.test1
test45.Test8.p, line 5:1, 'foo': identifier is not declared in (or not visible to) the current scope Test8.test1
test45.Test8.p, line 5:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
test45.C10.p, line 4:0, 'C1.bar': function to be exported not found in (or not accessible to) current scope
test45.Test9.p, line 5:1, 'Z.bar': function is not declared in (or not visible to) the current scope Test9.test
test45.Test9.p, line 5:1, 'bar': identifier is not declared in (or not visible to) the current scope Test9.test
test45.Test9.p, line 5:1, 'C10.bar': function is not declared in (or not visible to) the current scope Test9.test
test45.Test9.p, line 5:1, Serious errors encountered. C files will be generated but not compiled and no binary will be produced.
pollen version 0.2.137
unknown: No such file or directory

avrdude done.  Thank you.


/*
 * ======== string literals ========
 */

static const char test45_M__s__fileName[] = "M.p";
static const char test45_M__s__0[] = "M";

/*
 * ======== function definitions ========
 */

void test45_M_bar__E() {
}

void test45_M_foo__E() {
}

void test45_M_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test10_pollen__reset__E();
void test45_Test10_pollen__ready__E();
void test45_Test10_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_M_ test45_M;

/*
 * ======== struct module definition (unit M) ========
 */

struct test45_M_ {
};
typedef struct test45_M_ test45_M_;

/*
 * ======== function members (unit M) ========
 */

extern void test45_M_bar__E();
extern void test45_M_foo__E();
extern void test45_M_targetInit__I();

/*
 * ======== data members (unit M) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_N__s__fileName[] = "N.p";
static const char test45_N__s__0[] = "N";

/*
 * ======== function definitions ========
 */

void test45_N_bar__E() {
}

void test45_N_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test5_pollen__reset__E();
void test45_Test5_pollen__ready__E();
void test45_Test5_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_N_ test45_N;

/*
 * ======== struct module definition (unit N) ========
 */

struct test45_N_ {
};
typedef struct test45_N_ test45_N_;

/*
 * ======== function members (unit N) ========
 */

extern void test45_N_bar__E();
extern void test45_N_targetInit__I();

/*
 * ======== data members (unit N) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Q__s__fileName[] = "Q.p";
static const char test45_Q__s__0[] = "Q";

/*
 * ======== function definitions ========
 */

void test45_Q_reset__E() {
}

void test45_Q_cycle__E() {
}

void test45_Q_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test10_pollen__reset__E();
void test45_Test10_pollen__ready__E();
void test45_Test10_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Q_ test45_Q;

/*
 * ======== struct module definition (unit Q) ========
 */

struct test45_Q_ {
};
typedef struct test45_Q_ test45_Q_;

/*
 * ======== function members (unit Q) ========
 */

extern void test45_Q_reset__E();
extern void test45_Q_cycle__E();
extern void test45_Q_targetInit__I();

/*
 * ======== data members (unit Q) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test1__s__fileName[] = "Test1.p";
static const char test45_Test1__s__0[] = "Test1";

/*
 * ======== function definitions ========
 */

void test45_Test1_pollen__run__E() {
}

void test45_Test1_test1__I() {
    test45_M_foo__E();
    bar /* ?? missing symbol ?? */ ();
}

void test45_Test1_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef test45_M__M
#define test45_M__M
#include "../../test45/M/M.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test1_pollen__reset__E();
void test45_Test1_pollen__ready__E();
void test45_Test1_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test1_ test45_Test1;

/*
 * ======== struct module definition (unit Test1) ========
 */

struct test45_Test1_ {
};
typedef struct test45_Test1_ test45_Test1_;

/*
 * ======== function members (unit Test1) ========
 */

extern void test45_Test1_pollen__run__E();
extern void test45_Test1_test1__I();
extern void test45_Test1_targetInit__I();

/*
 * ======== data members (unit Test1) ========
 */

#include <std.h>

/*
 * ======== unit headers ========
 */

#ifndef test45_M__M
#define test45_M__M
#include "../../test45/M/M.h"
#endif

#ifndef test45_Q__M
#define test45_Q__M
#include "../../test45/Q/Q.h"
#endif

#ifndef test45_Test10__M
#define test45_Test10__M
#include "../../test45/Test10/Test10.h"
#endif

/*
 * ======== target data definitions (unit M) ========
 */

struct test45_M_ test45_M = { /* module data */
};

/*
 * ======== target data definitions (unit Q) ========
 */

struct test45_Q_ test45_Q = { /* module data */
};

/*
 * ======== target data definitions (unit Test10) ========
 */

struct test45_Test10_ test45_Test10 = { /* module data */
};

/*
 * ======== pollen print ========
 */

void test45_Test10_pollen__printBool(bool b) {
}
void test45_Test10_pollen__printInt(int32 i) {
}
void test45_Test10_pollen__printReal(float f) {
}
void test45_Test10_pollen__printUint(uint32 u) {
}
void test45_Test10_pollen__printStr(string s) {
}

/*
 * ======== module functions ========
 */

#include "../../test45/M/M.c"
#include "../../test45/Q/Q.c"
#include "../../test45/Test10/Test10.c"

/*
 * ======== pollen.reset() ========
 */

void test45_Test10_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test45_Test10_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== pollen.shutdown(uint8) ========
 */

void test45_Test10_pollen__shutdown__E(uint8 i) {
    volatile int dummy = 0xCAFE;
    while (dummy) ;
}

/*
 * ======== main() ========
 */

int main() {
    test45_Test10_pollen__reset__E();
    test45_M_targetInit__I();
    test45_Q_targetInit__I();
    test45_Test10_targetInit__I();
    test45_Test10_pollen__ready__E();
    test45_Test10_pollen__run__E();
    test45_Test10_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test45_Test10__s__fileName[] = "Test10.p";
static const char test45_Test10__s__0[] = "Test10";

/*
 * ======== function definitions ========
 */

void test45_Test10_test__I() {
    test45_M_foo__E();
    test45_Q_cycle__E();
}

void test45_Test10_pollen__run__E() {
}

void test45_Test10_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test10_pollen__reset__E();
void test45_Test10_pollen__ready__E();
void test45_Test10_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test10_ test45_Test10;

/*
 * ======== struct module definition (unit Test10) ========
 */

struct test45_Test10_ {
};
typedef struct test45_Test10_ test45_Test10_;

/*
 * ======== function members (unit Test10) ========
 */

extern void test45_Test10_test__I();
extern void test45_Test10_pollen__run__E();
extern void test45_Test10_targetInit__I();

/*
 * ======== data members (unit Test10) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test2__s__fileName[] = "Test2.p";
static const char test45_Test2__s__0[] = "Test2";

/*
 * ======== function definitions ========
 */

void test45_Test2_test__I() {
    foo /* ?? missing symbol ?? */ ();
    test45_M_bar__E();
}

void test45_Test2_pollen__run__E() {
}

void test45_Test2_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test2_pollen__reset__E();
void test45_Test2_pollen__ready__E();
void test45_Test2_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test2_ test45_Test2;

/*
 * ======== struct module definition (unit Test2) ========
 */

struct test45_Test2_ {
};
typedef struct test45_Test2_ test45_Test2_;

/*
 * ======== function members (unit Test2) ========
 */

extern void test45_Test2_test__I();
extern void test45_Test2_pollen__run__E();
extern void test45_Test2_targetInit__I();

/*
 * ======== data members (unit Test2) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test3__s__fileName[] = "Test3.p";
static const char test45_Test3__s__0[] = "Test3";

/*
 * ======== function definitions ========
 */

void test45_Test3_test__I() {
    foo /* ?? missing symbol ?? */ ();
    test45_M_bar__E();
}

void test45_Test3_pollen__run__E() {
}

void test45_Test3_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test3_pollen__reset__E();
void test45_Test3_pollen__ready__E();
void test45_Test3_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test3_ test45_Test3;

/*
 * ======== struct module definition (unit Test3) ========
 */

struct test45_Test3_ {
};
typedef struct test45_Test3_ test45_Test3_;

/*
 * ======== function members (unit Test3) ========
 */

extern void test45_Test3_test__I();
extern void test45_Test3_pollen__run__E();
extern void test45_Test3_targetInit__I();

/*
 * ======== data members (unit Test3) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test4__s__fileName[] = "Test4.p";
static const char test45_Test4__s__0[] = "Test4";

/*
 * ======== function definitions ========
 */

void test45_Test4_test__I() {
    M1.foo /* ?? missing symbol ?? */ ();
    M1.bar /* ?? missing symbol ?? */ ();
    test45_N_bar__E();
}

void test45_Test4_pollen__run__E() {
}

void test45_Test4_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test4_pollen__reset__E();
void test45_Test4_pollen__ready__E();
void test45_Test4_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test4_ test45_Test4;

/*
 * ======== struct module definition (unit Test4) ========
 */

struct test45_Test4_ {
};
typedef struct test45_Test4_ test45_Test4_;

/*
 * ======== function members (unit Test4) ========
 */

extern void test45_Test4_test__I();
extern void test45_Test4_pollen__run__E();
extern void test45_Test4_targetInit__I();

/*
 * ======== data members (unit Test4) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test5__s__fileName[] = "Test5.p";
static const char test45_Test5__s__0[] = "Test5";

/*
 * ======== function definitions ========
 */

void test45_Test5_test__I() {
    foo /* ?? missing symbol ?? */ ();
    test45_N_bar__E();
    test45_N_bar__E();
}

void test45_Test5_pollen__run__E() {
}

void test45_Test5_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test5_pollen__reset__E();
void test45_Test5_pollen__ready__E();
void test45_Test5_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test5_ test45_Test5;

/*
 * ======== struct module definition (unit Test5) ========
 */

struct test45_Test5_ {
};
typedef struct test45_Test5_ test45_Test5_;

/*
 * ======== function members (unit Test5) ========
 */

extern void test45_Test5_test__I();
extern void test45_Test5_pollen__run__E();
extern void test45_Test5_targetInit__I();

/*
 * ======== data members (unit Test5) ========
 */

#include <std.h>

/*
 * ======== unit headers ========
 */

#ifndef test45_M__M
#define test45_M__M
#include "../../test45/M/M.h"
#endif

#ifndef test45_Q__M
#define test45_Q__M
#include "../../test45/Q/Q.h"
#endif

#ifndef test45_Test6__M
#define test45_Test6__M
#include "../../test45/Test6/Test6.h"
#endif

/*
 * ======== target data definitions (unit M) ========
 */

struct test45_M_ test45_M = { /* module data */
};

/*
 * ======== target data definitions (unit Q) ========
 */

struct test45_Q_ test45_Q = { /* module data */
};

/*
 * ======== target data definitions (unit Test6) ========
 */

struct test45_Test6_ test45_Test6 = { /* module data */
};

/*
 * ======== pollen print ========
 */

void test45_Test6_pollen__printBool(bool b) {
}
void test45_Test6_pollen__printInt(int32 i) {
}
void test45_Test6_pollen__printReal(float f) {
}
void test45_Test6_pollen__printUint(uint32 u) {
}
void test45_Test6_pollen__printStr(string s) {
}

/*
 * ======== module functions ========
 */

#include "../../test45/M/M.c"
#include "../../test45/Q/Q.c"
#include "../../test45/Test6/Test6.c"

/*
 * ======== pollen.reset() ========
 */

void test45_Test6_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test45_Test6_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== pollen.shutdown(uint8) ========
 */

void test45_Test6_pollen__shutdown__E(uint8 i) {
    volatile int dummy = 0xCAFE;
    while (dummy) ;
}

/*
 * ======== main() ========
 */

int main() {
    test45_Test6_pollen__reset__E();
    test45_M_targetInit__I();
    test45_Q_targetInit__I();
    test45_Test6_targetInit__I();
    test45_Test6_pollen__ready__E();
    test45_Test6_pollen__run__E();
    test45_Test6_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test45_Test6__s__fileName[] = "Test6.p";
static const char test45_Test6__s__0[] = "Test6";

/*
 * ======== function definitions ========
 */

void test45_Test6_test__I() {
    test45_M_foo__E();
    test45_M_bar__E();
    test45_Q_cycle__E();
    test45_Q_reset__E();
}

void test45_Test6_pollen__run__E() {
}

void test45_Test6_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef test45_Q__M
#define test45_Q__M
#include "../../test45/Q/Q.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test6_pollen__reset__E();
void test45_Test6_pollen__ready__E();
void test45_Test6_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test6_ test45_Test6;

/*
 * ======== struct module definition (unit Test6) ========
 */

struct test45_Test6_ {
};
typedef struct test45_Test6_ test45_Test6_;

/*
 * ======== function members (unit Test6) ========
 */

extern void test45_Test6_test__I();
extern void test45_Test6_pollen__run__E();
extern void test45_Test6_targetInit__I();

/*
 * ======== data members (unit Test6) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test7__s__fileName[] = "Test7.p";
static const char test45_Test7__s__0[] = "Test7";

/*
 * ======== function definitions ========
 */

void test45_Test7_test__I() {
    foo /* ?? missing symbol ?? */ ();
    test45_M_bar__E();
}

void test45_Test7_pollen__run__E() {
}

void test45_Test7_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test7_pollen__reset__E();
void test45_Test7_pollen__ready__E();
void test45_Test7_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test7_ test45_Test7;

/*
 * ======== struct module definition (unit Test7) ========
 */

struct test45_Test7_ {
};
typedef struct test45_Test7_ test45_Test7_;

/*
 * ======== function members (unit Test7) ========
 */

extern void test45_Test7_test__I();
extern void test45_Test7_pollen__run__E();
extern void test45_Test7_targetInit__I();

/*
 * ======== data members (unit Test7) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test8__s__fileName[] = "Test8.p";
static const char test45_Test8__s__0[] = "Test8";

/*
 * ======== function definitions ========
 */

void test45_Test8_pollen__run__E() {
}

void test45_Test8_test1__I() {
    foo /* ?? missing symbol ?? */ ();
}

void test45_Test8_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test8_pollen__reset__E();
void test45_Test8_pollen__ready__E();
void test45_Test8_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test8_ test45_Test8;

/*
 * ======== struct module definition (unit Test8) ========
 */

struct test45_Test8_ {
};
typedef struct test45_Test8_ test45_Test8_;

/*
 * ======== function members (unit Test8) ========
 */

extern void test45_Test8_pollen__run__E();
extern void test45_Test8_test1__I();
extern void test45_Test8_targetInit__I();

/*
 * ======== data members (unit Test8) ========
 */


/*
 * ======== string literals ========
 */

static const char test45_Test9__s__fileName[] = "Test9.p";
static const char test45_Test9__s__0[] = "Test9";

/*
 * ======== function definitions ========
 */

void test45_Test9_test__I() {
    test45_M_foo__E();
    bar /* ?? missing symbol ?? */ ();
    test45_M_foo__E();
    bar /* ?? missing symbol ?? */ ();
}

void test45_Test9_pollen__run__E() {
}

void test45_Test9_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test45_Test9_pollen__reset__E();
void test45_Test9_pollen__ready__E();
void test45_Test9_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test45_Test9_ test45_Test9;

/*
 * ======== struct module definition (unit Test9) ========
 */

struct test45_Test9_ {
};
typedef struct test45_Test9_ test45_Test9_;

/*
 * ======== function members (unit Test9) ========
 */

extern void test45_Test9_test__I();
extern void test45_Test9_pollen__run__E();
extern void test45_Test9_targetInit__I();

/*
 * ======== data members (unit Test9) ========
 */


/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C1 ========
 */

var $$c = function() {
    const C1 = {};
    C1.C1 = C1
    C1.$name = 'test45.C1';
    C1.pollen$used = 0;
    C1.N = $units['test45.M'];
    return C1;
}
var $$u = $$c();
$units['test45.C1'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C10 ========
 */

var $$c = function() {
    const C10 = {};
    C10.C10 = C10
    C10.$name = 'test45.C10';
    C10.pollen$used = 0;
    return C10;
}
var $$u = $$c();
$units['test45.C10'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C11 ========
 */

var $$c = function() {
    const C11 = {};
    C11.C11 = C11
    C11.$name = 'test45.C11';
    C11.pollen$used = 0;
    C11.R = $units['test45.Q'];
    return C11;
}
var $$u = $$c();
$units['test45.C11'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C12 ========
 */

var $$c = function() {
    const C12 = {};
    C12.C12 = C12
    C12.$name = 'test45.C12';
    C12.pollen$used = 0;
    C12.M = $units['test45.M'];
    C12.N = $units['test45.N'];
    return C12;
}
var $$u = $$c();
$units['test45.C12'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C2 ========
 */

var $$c = function() {
    const C2 = {};
    C2.C2 = C2
    C2.$name = 'test45.C2';
    C2.pollen$used = 0;
    return C2;
}
var $$u = $$c();
$units['test45.C2'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C3 ========
 */

var $$c = function() {
    const C3 = {};
    C3.C3 = C3
    C3.$name = 'test45.C3';
    C3.pollen$used = 0;
    return C3;
}
var $$u = $$c();
$units['test45.C3'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C5 ========
 */

var $$c = function() {
    const C5 = {};
    C5.C5 = C5
    C5.$name = 'test45.C5';
    C5.pollen$used = 0;
    return C5;
}
var $$u = $$c();
$units['test45.C5'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C6 ========
 */

var $$c = function() {
    const C6 = {};
    C6.C6 = C6
    C6.$name = 'test45.C6';
    C6.pollen$used = 0;
    return C6;
}
var $$u = $$c();
$units['test45.C6'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION test45.C8 ========
 */

var $$c = function() {
    const C8 = {};
    C8.C8 = C8
    C8.$name = 'test45.C8';
    C8.pollen$used = 0;
    return C8;
}
var $$u = $$c();
$units['test45.C8'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test45.N ========
 */

var $$c = function() {
    const N = {};
    N.N = N
    N.$name = 'test45.N';
    N.pollen$used = 0;
    N.bar = new $$Ref('test45_N_bar__E');
    N.targetInit = new $$Ref('test45_N_targetInit__I');
    N.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    N.pollen__uses__ = function() {
    }
    N.$$privateInit = function() {
    }
    return N;
}
var $$u = $$c();
$units['test45.N'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test45.Q ========
 */

var $$c = function() {
    const Q = {};
    Q.Q = Q
    Q.$name = 'test45.Q';
    Q.pollen$used = 0;
    Q.cycle = new $$Ref('test45_Q_cycle__E');
    Q.reset = new $$Ref('test45_Q_reset__E');
    Q.targetInit = new $$Ref('test45_Q_targetInit__I');
    Q.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Q.pollen__uses__ = function() {
    }
    Q.$$privateInit = function() {
    }
    return Q;
}
var $$u = $$c();
$units['test45.Q'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C1 ========
 */

var $$c = function() {
    const C1 = {};
    C1.C1 = C1
    C1.$name = 'test45.C1';
    C1.pollen$used = 0;
    C1.N = $units['test45.M'];
    return C1;
}
var $$u = $$c();
$units['test45.C1'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test1 ========
 */

var $$c = function() {
    const Test1 = {};
    Test1.Test1 = Test1
    Test1.$name = 'test45.Test1';
    Test1.pollen$used = 0;
    Test1.test1 = new $$Ref('test45_Test1_test1__I');
    Test1.pollen__run = new $$Ref('test45_Test1_pollen__run__E');
    Test1.targetInit = new $$Ref('test45_Test1_targetInit__I');
    Test1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test1.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
    }
    Test1.$$privateInit = function() {
    }
    return Test1;
}
var $$u = $$c();
$units['test45.Test1'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test1'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test1 ========
 */

var $$c = function() {
    const Test1 = {};
    Test1.Test1 = Test1
    Test1.$name = 'test45.Test1';
    Test1.pollen$used = 0;
    Test1.test1 = new $$Ref('test45_Test1_test1__I');
    Test1.pollen__run = new $$Ref('test45_Test1_pollen__run__E');
    Test1.targetInit = new $$Ref('test45_Test1_targetInit__I');
    Test1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test1.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
    }
    Test1.$$privateInit = function() {
    }
    return Test1;
}
var $$u = $$c();
$units['test45.Test1'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Q ========
 */

var $$c = function() {
    const Q = {};
    Q.Q = Q
    Q.$name = 'test45.Q';
    Q.pollen$used = 0;
    Q.cycle = new $$Ref('test45_Q_cycle__E');
    Q.reset = new $$Ref('test45_Q_reset__E');
    Q.targetInit = new $$Ref('test45_Q_targetInit__I');
    Q.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Q.pollen__uses__ = function() {
    }
    Q.$$privateInit = function() {
    }
    return Q;
}
var $$u = $$c();
$units['test45.Q'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test10 ========
 */

var $$c = function() {
    const Test10 = {};
    Test10.Test10 = Test10
    Test10.$name = 'test45.Test10';
    Test10.pollen$used = 0;
    Test10.test = new $$Ref('test45_Test10_test__I');
    Test10.pollen__run = new $$Ref('test45_Test10_pollen__run__E');
    Test10.targetInit = new $$Ref('test45_Test10_targetInit__I');
    Test10.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test10.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
        $$bind($units['test45.Q'], 'pollen$used', true);
    }
    Test10.$$privateInit = function() {
    }
    return Test10;
}
var $$u = $$c();
$units['test45.Test10'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test10'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test10 ========
 */

var $$c = function() {
    const Test10 = {};
    Test10.Test10 = Test10
    Test10.$name = 'test45.Test10';
    Test10.pollen$used = 0;
    Test10.test = new $$Ref('test45_Test10_test__I');
    Test10.pollen__run = new $$Ref('test45_Test10_pollen__run__E');
    Test10.targetInit = new $$Ref('test45_Test10_targetInit__I');
    Test10.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test10.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
        $$bind($units['test45.Q'], 'pollen$used', true);
    }
    Test10.$$privateInit = function() {
    }
    return Test10;
}
var $$u = $$c();
$units['test45.Test10'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C2 ========
 */

var $$c = function() {
    const C2 = {};
    C2.C2 = C2
    C2.$name = 'test45.C2';
    C2.pollen$used = 0;
    return C2;
}
var $$u = $$c();
$units['test45.C2'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test2 ========
 */

var $$c = function() {
    const Test2 = {};
    Test2.Test2 = Test2
    Test2.$name = 'test45.Test2';
    Test2.pollen$used = 0;
    Test2.test = new $$Ref('test45_Test2_test__I');
    Test2.pollen__run = new $$Ref('test45_Test2_pollen__run__E');
    Test2.targetInit = new $$Ref('test45_Test2_targetInit__I');
    Test2.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test2.pollen__uses__ = function() {
    }
    Test2.$$privateInit = function() {
    }
    return Test2;
}
var $$u = $$c();
$units['test45.Test2'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test2'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test2 ========
 */

var $$c = function() {
    const Test2 = {};
    Test2.Test2 = Test2
    Test2.$name = 'test45.Test2';
    Test2.pollen$used = 0;
    Test2.test = new $$Ref('test45_Test2_test__I');
    Test2.pollen__run = new $$Ref('test45_Test2_pollen__run__E');
    Test2.targetInit = new $$Ref('test45_Test2_targetInit__I');
    Test2.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test2.pollen__uses__ = function() {
    }
    Test2.$$privateInit = function() {
    }
    return Test2;
}
var $$u = $$c();
$units['test45.Test2'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C3 ========
 */

var $$c = function() {
    const C3 = {};
    C3.C3 = C3
    C3.$name = 'test45.C3';
    C3.pollen$used = 0;
    return C3;
}
var $$u = $$c();
$units['test45.C3'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test3 ========
 */

var $$c = function() {
    const Test3 = {};
    Test3.Test3 = Test3
    Test3.$name = 'test45.Test3';
    Test3.pollen$used = 0;
    Test3.test = new $$Ref('test45_Test3_test__I');
    Test3.pollen__run = new $$Ref('test45_Test3_pollen__run__E');
    Test3.targetInit = new $$Ref('test45_Test3_targetInit__I');
    Test3.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test3.pollen__uses__ = function() {
    }
    Test3.$$privateInit = function() {
    }
    return Test3;
}
var $$u = $$c();
$units['test45.Test3'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test3'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test3 ========
 */

var $$c = function() {
    const Test3 = {};
    Test3.Test3 = Test3
    Test3.$name = 'test45.Test3';
    Test3.pollen$used = 0;
    Test3.test = new $$Ref('test45_Test3_test__I');
    Test3.pollen__run = new $$Ref('test45_Test3_pollen__run__E');
    Test3.targetInit = new $$Ref('test45_Test3_targetInit__I');
    Test3.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test3.pollen__uses__ = function() {
    }
    Test3.$$privateInit = function() {
    }
    return Test3;
}
var $$u = $$c();
$units['test45.Test3'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.N ========
 */

var $$c = function() {
    const N = {};
    N.N = N
    N.$name = 'test45.N';
    N.pollen$used = 0;
    N.bar = new $$Ref('test45_N_bar__E');
    N.targetInit = new $$Ref('test45_N_targetInit__I');
    N.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    N.pollen__uses__ = function() {
    }
    N.$$privateInit = function() {
    }
    return N;
}
var $$u = $$c();
$units['test45.N'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test4 ========
 */

var $$c = function() {
    const Test4 = {};
    Test4.Test4 = Test4
    Test4.$name = 'test45.Test4';
    Test4.pollen$used = 0;
    Test4.test = new $$Ref('test45_Test4_test__I');
    Test4.pollen__run = new $$Ref('test45_Test4_pollen__run__E');
    Test4.targetInit = new $$Ref('test45_Test4_targetInit__I');
    Test4.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test4.pollen__uses__ = function() {
        $$bind($units['test45.N'], 'pollen$used', true);
    }
    Test4.$$privateInit = function() {
    }
    return Test4;
}
var $$u = $$c();
$units['test45.Test4'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test4'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test4 ========
 */

var $$c = function() {
    const Test4 = {};
    Test4.Test4 = Test4
    Test4.$name = 'test45.Test4';
    Test4.pollen$used = 0;
    Test4.test = new $$Ref('test45_Test4_test__I');
    Test4.pollen__run = new $$Ref('test45_Test4_pollen__run__E');
    Test4.targetInit = new $$Ref('test45_Test4_targetInit__I');
    Test4.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test4.pollen__uses__ = function() {
        $$bind($units['test45.N'], 'pollen$used', true);
    }
    Test4.$$privateInit = function() {
    }
    return Test4;
}
var $$u = $$c();
$units['test45.Test4'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.N ========
 */

var $$c = function() {
    const N = {};
    N.N = N
    N.$name = 'test45.N';
    N.pollen$used = 0;
    N.bar = new $$Ref('test45_N_bar__E');
    N.targetInit = new $$Ref('test45_N_targetInit__I');
    N.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    N.pollen__uses__ = function() {
    }
    N.$$privateInit = function() {
    }
    return N;
}
var $$u = $$c();
$units['test45.N'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C5 ========
 */

var $$c = function() {
    const C5 = {};
    C5.C5 = C5
    C5.$name = 'test45.C5';
    C5.pollen$used = 0;
    return C5;
}
var $$u = $$c();
$units['test45.C5'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test5 ========
 */

var $$c = function() {
    const Test5 = {};
    Test5.Test5 = Test5
    Test5.$name = 'test45.Test5';
    Test5.pollen$used = 0;
    Test5.test = new $$Ref('test45_Test5_test__I');
    Test5.pollen__run = new $$Ref('test45_Test5_pollen__run__E');
    Test5.targetInit = new $$Ref('test45_Test5_targetInit__I');
    Test5.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test5.pollen__uses__ = function() {
    }
    Test5.$$privateInit = function() {
    }
    return Test5;
}
var $$u = $$c();
$units['test45.Test5'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test5'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test5 ========
 */

var $$c = function() {
    const Test5 = {};
    Test5.Test5 = Test5
    Test5.$name = 'test45.Test5';
    Test5.pollen$used = 0;
    Test5.test = new $$Ref('test45_Test5_test__I');
    Test5.pollen__run = new $$Ref('test45_Test5_pollen__run__E');
    Test5.targetInit = new $$Ref('test45_Test5_targetInit__I');
    Test5.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test5.pollen__uses__ = function() {
    }
    Test5.$$privateInit = function() {
    }
    return Test5;
}
var $$u = $$c();
$units['test45.Test5'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C6 ========
 */

var $$c = function() {
    const C6 = {};
    C6.C6 = C6
    C6.$name = 'test45.C6';
    C6.pollen$used = 0;
    return C6;
}
var $$u = $$c();
$units['test45.C6'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Q ========
 */

var $$c = function() {
    const Q = {};
    Q.Q = Q
    Q.$name = 'test45.Q';
    Q.pollen$used = 0;
    Q.cycle = new $$Ref('test45_Q_cycle__E');
    Q.reset = new $$Ref('test45_Q_reset__E');
    Q.targetInit = new $$Ref('test45_Q_targetInit__I');
    Q.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Q.pollen__uses__ = function() {
    }
    Q.$$privateInit = function() {
    }
    return Q;
}
var $$u = $$c();
$units['test45.Q'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C11 ========
 */

var $$c = function() {
    const C11 = {};
    C11.C11 = C11
    C11.$name = 'test45.C11';
    C11.pollen$used = 0;
    C11.R = $units['test45.Q'];
    return C11;
}
var $$u = $$c();
$units['test45.C11'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test6 ========
 */

var $$c = function() {
    const Test6 = {};
    Test6.Test6 = Test6
    Test6.$name = 'test45.Test6';
    Test6.pollen$used = 0;
    Test6.test = new $$Ref('test45_Test6_test__I');
    Test6.pollen__run = new $$Ref('test45_Test6_pollen__run__E');
    Test6.targetInit = new $$Ref('test45_Test6_targetInit__I');
    Test6.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test6.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
        $$bind($units['test45.Q'], 'pollen$used', true);
    }
    Test6.$$privateInit = function() {
    }
    return Test6;
}
var $$u = $$c();
$units['test45.Test6'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test6'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test6 ========
 */

var $$c = function() {
    const Test6 = {};
    Test6.Test6 = Test6
    Test6.$name = 'test45.Test6';
    Test6.pollen$used = 0;
    Test6.test = new $$Ref('test45_Test6_test__I');
    Test6.pollen__run = new $$Ref('test45_Test6_pollen__run__E');
    Test6.targetInit = new $$Ref('test45_Test6_targetInit__I');
    Test6.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test6.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
        $$bind($units['test45.Q'], 'pollen$used', true);
    }
    Test6.$$privateInit = function() {
    }
    return Test6;
}
var $$u = $$c();
$units['test45.Test6'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C8 ========
 */

var $$c = function() {
    const C8 = {};
    C8.C8 = C8
    C8.$name = 'test45.C8';
    C8.pollen$used = 0;
    return C8;
}
var $$u = $$c();
$units['test45.C8'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test7 ========
 */

var $$c = function() {
    const Test7 = {};
    Test7.Test7 = Test7
    Test7.$name = 'test45.Test7';
    Test7.pollen$used = 0;
    Test7.test = new $$Ref('test45_Test7_test__I');
    Test7.pollen__run = new $$Ref('test45_Test7_pollen__run__E');
    Test7.targetInit = new $$Ref('test45_Test7_targetInit__I');
    Test7.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test7.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
    }
    Test7.$$privateInit = function() {
    }
    return Test7;
}
var $$u = $$c();
$units['test45.Test7'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test7'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test7 ========
 */

var $$c = function() {
    const Test7 = {};
    Test7.Test7 = Test7
    Test7.$name = 'test45.Test7';
    Test7.pollen$used = 0;
    Test7.test = new $$Ref('test45_Test7_test__I');
    Test7.pollen__run = new $$Ref('test45_Test7_pollen__run__E');
    Test7.targetInit = new $$Ref('test45_Test7_targetInit__I');
    Test7.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test7.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
    }
    Test7.$$privateInit = function() {
    }
    return Test7;
}
var $$u = $$c();
$units['test45.Test7'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C12 ========
 */

var $$c = function() {
    const C12 = {};
    C12.C12 = C12
    C12.$name = 'test45.C12';
    C12.pollen$used = 0;
    C12.M = $units['test45.M'];
    C12.N = $units['test45.N'];
    return C12;
}
var $$u = $$c();
$units['test45.C12'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test8 ========
 */

var $$c = function() {
    const Test8 = {};
    Test8.Test8 = Test8
    Test8.$name = 'test45.Test8';
    Test8.pollen$used = 0;
    Test8.test1 = new $$Ref('test45_Test8_test1__I');
    Test8.pollen__run = new $$Ref('test45_Test8_pollen__run__E');
    Test8.targetInit = new $$Ref('test45_Test8_targetInit__I');
    Test8.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test8.pollen__uses__ = function() {
    }
    Test8.$$privateInit = function() {
    }
    return Test8;
}
var $$u = $$c();
$units['test45.Test8'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test8'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test8 ========
 */

var $$c = function() {
    const Test8 = {};
    Test8.Test8 = Test8
    Test8.$name = 'test45.Test8';
    Test8.pollen$used = 0;
    Test8.test1 = new $$Ref('test45_Test8_test1__I');
    Test8.pollen__run = new $$Ref('test45_Test8_pollen__run__E');
    Test8.targetInit = new $$Ref('test45_Test8_targetInit__I');
    Test8.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test8.pollen__uses__ = function() {
    }
    Test8.$$privateInit = function() {
    }
    return Test8;
}
var $$u = $$c();
$units['test45.Test8'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.M ========
 */

var $$c = function() {
    const M = {};
    M.M = M
    M.$name = 'test45.M';
    M.pollen$used = 0;
    M.foo = new $$Ref('test45_M_foo__E');
    M.bar = new $$Ref('test45_M_bar__E');
    M.targetInit = new $$Ref('test45_M_targetInit__I');
    M.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    M.pollen__uses__ = function() {
    }
    M.$$privateInit = function() {
    }
    return M;
}
var $$u = $$c();
$units['test45.M'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION test45.C10 ========
 */

var $$c = function() {
    const C10 = {};
    C10.C10 = C10
    C10.$name = 'test45.C10';
    C10.pollen$used = 0;
    return C10;
}
var $$u = $$c();
$units['test45.C10'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test45.Test9 ========
 */

var $$c = function() {
    const Test9 = {};
    Test9.Test9 = Test9
    Test9.$name = 'test45.Test9';
    Test9.pollen$used = 0;
    Test9.test = new $$Ref('test45_Test9_test__I');
    Test9.pollen__run = new $$Ref('test45_Test9_pollen__run__E');
    Test9.targetInit = new $$Ref('test45_Test9_targetInit__I');
    Test9.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test9.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
    }
    Test9.$$privateInit = function() {
    }
    return Test9;
}
var $$u = $$c();
$units['test45.Test9'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test45.Test9'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test45.Test9 ========
 */

var $$c = function() {
    const Test9 = {};
    Test9.Test9 = Test9
    Test9.$name = 'test45.Test9';
    Test9.pollen$used = 0;
    Test9.test = new $$Ref('test45_Test9_test__I');
    Test9.pollen__run = new $$Ref('test45_Test9_pollen__run__E');
    Test9.targetInit = new $$Ref('test45_Test9_targetInit__I');
    Test9.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Test9.pollen__uses__ = function() {
        $$bind($units['test45.M'], 'pollen$used', true);
    }
    Test9.$$privateInit = function() {
    }
    return Test9;
}
var $$u = $$c();
$units['test45.Test9'] = $$u;
$units.push($$u);

