pollen version 0.2.137
pollen version 0.2.137
test118.BlinkMilli.p, line 21:1, A host array of class elements should be initialized with the host class constructor.
In file included from ../test118_out/test118/BlinkMilli/BlinkMilli-prog.c:171:
../test118_out/test118/BlinkMilli/../../test118/BlinkMilli/BlinkMilli.c:19:1: warning: control reaches end of non-void function [-Wreturn-type]
}
^
../test118_out/test118/BlinkMilli/../../test118/BlinkMilli/BlinkMilli.c:49:1: warning: control reaches end of non-void function [-Wreturn-type]
}
^
2 warnings generated.
#include <std.h>

/*
 * ======== protocol member test118.BlinkMilli.pollenPrintProxy delegates test54_PrintImpl ========
 */

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== unit headers ========
 */

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

#ifndef test118_BlinkMilli__M
#define test118_BlinkMilli__M
#include "../../test118/BlinkMilli/BlinkMilli.h"
#endif

/*
 * ======== target data definitions (unit PrintImpl) ========
 */

struct test54_PrintImpl_ test54_PrintImpl = { /* module data */
};

/*
 * ======== host data definitions (unit BlinkMilli) ========
 */

test118_BlinkMilli_hll__TYPE test118_BlinkMilli_hll__V = /* test118.BlinkMilli.led object init */
{
    (uint8)0x1,              /* red */
    (uint8)0x9,              /* blue */
};
test118_BlinkMilli_ledArr__TYPE test118_BlinkMilli_ledArr__A[] = {
    /* test118.BlinkMilli.led object init */
    {
        (uint8)0x1,              /* red */
        (uint8)0x2,              /* blue */
    },  /* [0] */
    /* test118.BlinkMilli.led object init */
    {
        (uint8)0x1,              /* red */
        (uint8)0x2,              /* blue */
    },  /* [1] */
};
const test118_BlinkMilli_hostarr__TYPE test118_BlinkMilli_hostarr__A[] = {
    (uint8)0x0,  /* [0] */
    (uint8)0x3,  /* [1] */
    (uint8)0x3,  /* [2] */
    (uint8)0x4,  /* [3] */
};
const test118_BlinkMilli_chkarr5__TYPE test118_BlinkMilli_chkarr5__A[] = {
    (uint8)0x0,  /* [0] */
    (uint8)0x0,  /* [1] */
    (uint8)0x0,  /* [2] */
    (uint8)0x0,  /* [3] */
    (uint8)0x0,  /* [4] */
    (uint8)0x0,  /* [5] */
    (uint8)0x0,  /* [6] */
    (uint8)0x0,  /* [7] */
    (uint8)0x0,  /* [8] */
};
const test118_BlinkMilli_hostVarTest2__TYPE test118_BlinkMilli_hostVarTest2__V = (uint8)0x9;
const test118_BlinkMilli_chkarr7__TYPE test118_BlinkMilli_chkarr7__A[] = {
    (uint8)0x0,  /* [0] */
    (uint8)0x0,  /* [1] */
    (uint8)0x0,  /* [2] */
    (uint8)0x0,  /* [3] */
    (uint8)0x0,  /* [4] */
    (uint8)0x0,  /* [5] */
    (uint8)0x0,  /* [6] */
    (uint8)0x0,  /* [7] */
    (uint8)0x0,  /* [8] */
};
const test118_BlinkMilli_initialBlue__TYPE test118_BlinkMilli_initialBlue__V = (uint8)0x21;

/*
 * ======== target data definitions (unit BlinkMilli) ========
 */

struct test118_BlinkMilli_ test118_BlinkMilli = { /* module data */
    {
        (uint8)0x1,  /* [0] */
        (uint8)0x2,  /* [1] */
        (uint8)0x3,  /* [2] */
        (uint8)0x4,  /* [3] */
    },    /* nonhostarr */
    {
        null,  /* [0] */
        null,  /* [1] */
        null,  /* [2] */
    },    /* leds */
    {
        (uint8)0x1,  /* [0] */
        (uint8)0x2,  /* [1] */
        (uint8)0x3,  /* [2] */
        (uint8)0x4,  /* [3] */
    },    /* chkarr */
    null,                    /* chkarr2 */
    {
        (uint8)0x1,  /* [0] */
        (uint8)0x1,  /* [1] */
        (uint8)0x1,  /* [2] */
    },    /* chkarr3 */
    {
        (uint8)0x1,  /* [0] */
        (uint8)0x2,  /* [1] */
    },    /* chkarr4 */
    (uint8)0x9,              /* nonhostVarTest */
    {
        (uint8)0x0,  /* [0] */
        (uint8)0x0,  /* [1] */
        (uint8)0x0,  /* [2] */
        (uint8)0x0,  /* [3] */
        (uint8)0x0,  /* [4] */
        (uint8)0x0,  /* [5] */
        (uint8)0x0,  /* [6] */
        (uint8)0x0,  /* [7] */
        (uint8)0x0,  /* [8] */
    },    /* chkarr6 */
    {
        (uint8)0x0,  /* [0] */
        (uint8)0x0,  /* [1] */
        (uint8)0x0,  /* [2] */
        (uint8)0x0,  /* [3] */
        (uint8)0x0,  /* [4] */
        (uint8)0x0,  /* [5] */
        (uint8)0x0,  /* [6] */
        (uint8)0x0,  /* [7] */
        (uint8)0x0,  /* [8] */
    },    /* chkarr8 */
    &test54_PrintImpl,    /* pollenPrintProxy */
};

/*
 * ======== pollen print ========
 */

void test118_BlinkMilli_pollen__printBool(bool b) {
    test54_PrintImpl_printBool__E(b);
}
void test118_BlinkMilli_pollen__printInt(int32 i) {
    test54_PrintImpl_printInt__E(i);
}
void test118_BlinkMilli_pollen__printReal(float f) {
    test54_PrintImpl_printReal__E(f);
}
void test118_BlinkMilli_pollen__printUint(uint32 u) {
    test54_PrintImpl_printUint__E(u);
}
void test118_BlinkMilli_pollen__printStr(string s) {
    test54_PrintImpl_printStr__E(s);
}

/*
 * ======== module functions ========
 */

#include "../../test54/PrintImpl/PrintImpl.c"
#include "../../test118/BlinkMilli/BlinkMilli.c"

/*
 * ======== pollen.reset() ========
 */

void test118_BlinkMilli_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test118_BlinkMilli_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== pollen.shutdown(uint8) ========
 */

void test118_BlinkMilli_pollen__shutdown__E(uint8 i) {
    volatile int dummy = 0xCAFE;
    while (dummy) ;
}

/*
 * ======== main() ========
 */

int main() {
    test118_BlinkMilli_pollen__reset__E();
    test54_PrintImpl_targetInit__I();
    test118_BlinkMilli_targetInit__E();
    test118_BlinkMilli_pollen__ready__E();
    test118_BlinkMilli_pollen__run__E();
    test118_BlinkMilli_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test118_BlinkMilli__s__fileName[] = "BlinkMilli.p";
static const char test118_BlinkMilli__s__0[] = "led";
static const char test118_BlinkMilli__s__1[] = "BlinkMilli";

/*
 * ======== function definitions ========
 */

void test118_BlinkMilli_foobar__I( uint8  p[] ) {
}

uint8 test118_BlinkMilli_led_test_led__I( test118_BlinkMilli_led_ this ) {
    (this->blue) = 2;
}

uint8 test118_BlinkMilli_test__I( bool f ) {
    uint8 t;
    t = test118_BlinkMilli_led_test_led__I(&(test118_BlinkMilli_hll__V));
    (t) = (test118_BlinkMilli_led_foo__E(&((test118_BlinkMilli_ledArr__A[0])), (t)));
    (t) = (test118_BlinkMilli_ledArr__A[0].red);
    return(  3  );
}

void test118_BlinkMilli_pollen__run__E() {
}

uint8 test118_BlinkMilli_led_foo__E( test118_BlinkMilli_led_ this, uint8 p ) {
    return(  2  );
}

test118_BlinkMilli_led_ test118_BlinkMilli_led_new___I( test118_BlinkMilli_led_ this ) {
    (this->red) = 3;
    return this;
}

void test118_BlinkMilli_targetInit__E() {
}

bool test118_BlinkMilli_chkArray__I( uint8 y ) {
    uint8 arr[2] = { 1, 2 };
    {
        (arr[1]) = test118_BlinkMilli_test__I(true);
    }
}


/*
 * ======== imports ========
 */

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test118_BlinkMilli_pollen__reset__E();
void test118_BlinkMilli_pollen__ready__E();
void test118_BlinkMilli_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test118_BlinkMilli_ test118_BlinkMilli;

/*
 * ======== class definition (unit BlinkMilli.led) ========
 */

struct test118_BlinkMilli_led {
    uint8 red;
    uint8 blue;
};
typedef struct test118_BlinkMilli_led test118_BlinkMilli_led;
typedef struct test118_BlinkMilli_led* test118_BlinkMilli_led_;

/*
 * ======== struct module definition (unit BlinkMilli) ========
 */

struct test54_PrintImpl_;
struct test118_BlinkMilli_ {
    uint8 nonhostarr[4];
    test118_BlinkMilli_led_ leds[3];
    uint8 chkarr[4];
    uint8 * chkarr2;
    uint8 chkarr3[3];
    uint8 chkarr4[2];
    uint8 nonhostVarTest;
    uint8 chkarr6[9] /* nonhostVarTest */;
    uint8 chkarr8[9] /* hostVarTest2 */;
    struct test54_PrintImpl_ *pollenPrintProxy;
};
typedef struct test118_BlinkMilli_ test118_BlinkMilli_;

/*
 * ======== host variables (unit BlinkMilli) ========
 */

typedef struct test118_BlinkMilli_led test118_BlinkMilli_hll__TYPE;
extern test118_BlinkMilli_hll__TYPE test118_BlinkMilli_hll__V;
typedef test118_BlinkMilli_led test118_BlinkMilli_ledArr__TYPE;
extern test118_BlinkMilli_ledArr__TYPE test118_BlinkMilli_ledArr__A[];
typedef uint8 test118_BlinkMilli_hostarr__TYPE;
extern const test118_BlinkMilli_hostarr__TYPE test118_BlinkMilli_hostarr__A[];
typedef uint8 test118_BlinkMilli_chkarr5__TYPE;
extern const test118_BlinkMilli_chkarr5__TYPE test118_BlinkMilli_chkarr5__A[];
typedef uint8 test118_BlinkMilli_hostVarTest2__TYPE;
extern const test118_BlinkMilli_hostVarTest2__TYPE test118_BlinkMilli_hostVarTest2__V;
typedef uint8 test118_BlinkMilli_chkarr7__TYPE;
extern const test118_BlinkMilli_chkarr7__TYPE test118_BlinkMilli_chkarr7__A[];
typedef uint8 test118_BlinkMilli_initialBlue__TYPE;
extern const test118_BlinkMilli_initialBlue__TYPE test118_BlinkMilli_initialBlue__V;

/*
 * ======== function members (unit BlinkMilli) ========
 */

extern void test118_BlinkMilli_foobar__I( uint8  p[] );
extern uint8 test118_BlinkMilli_led_test_led__I( test118_BlinkMilli_led_ this );
extern uint8 test118_BlinkMilli_test__I( bool f );
extern void test118_BlinkMilli_pollen__run__E();
extern uint8 test118_BlinkMilli_led_foo__E( test118_BlinkMilli_led_ this, uint8 p );
extern test118_BlinkMilli_led_ test118_BlinkMilli_led_new___I( test118_BlinkMilli_led_ this );
extern void test118_BlinkMilli_targetInit__E();
extern bool test118_BlinkMilli_chkArray__I( uint8 y );

/*
 * ======== data members (unit BlinkMilli) ========
 */

#define test118_BlinkMilli_hll__V test118_BlinkMilli_hll
#define test118_BlinkMilli_hll_red__V test118_BlinkMilli_hll.red
#define test118_BlinkMilli_hll_blue__V test118_BlinkMilli_hll.blue
#define test118_BlinkMilli_hll_test_led__V test118_BlinkMilli_hll.test_led
#define test118_BlinkMilli_hll_new_host__V test118_BlinkMilli_hll.new_host
#define test118_BlinkMilli_hll_new___V test118_BlinkMilli_hll.new_
#define test118_BlinkMilli_hll_foo__V test118_BlinkMilli_hll.foo
#define test118_BlinkMilli_nonhostarr__A test118_BlinkMilli.nonhostarr
#define test118_BlinkMilli_leds__A test118_BlinkMilli.leds
#define test118_BlinkMilli_leds_red__A test118_BlinkMilli.leds->red
#define test118_BlinkMilli_leds_blue__A test118_BlinkMilli.leds->blue
#define test118_BlinkMilli_leds_test_led__A test118_BlinkMilli.leds->test_led
#define test118_BlinkMilli_leds_new_host__A test118_BlinkMilli.leds->new_host
#define test118_BlinkMilli_leds_new___A test118_BlinkMilli.leds->new_
#define test118_BlinkMilli_leds_foo__A test118_BlinkMilli.leds->foo
#define test118_BlinkMilli_chkarr__A test118_BlinkMilli.chkarr
#define test118_BlinkMilli_chkarr2__V test118_BlinkMilli.chkarr2
#define test118_BlinkMilli_chkarr3__A test118_BlinkMilli.chkarr3
#define test118_BlinkMilli_chkarr4__A test118_BlinkMilli.chkarr4
#define test118_BlinkMilli_nonhostVarTest__V test118_BlinkMilli.nonhostVarTest
#define test118_BlinkMilli_chkarr6__A test118_BlinkMilli.chkarr6
#define test118_BlinkMilli_chkarr8__A test118_BlinkMilli.chkarr8
#define test118_BlinkMilli_pollenPrintProxy__V test118_BlinkMilli.pollenPrintProxy

/*
 * ======== string literals ========
 */

static const char test54_PrintImpl__s__fileName[] = "PrintImpl.p";
static const char test54_PrintImpl__s__0[] = "PrintImpl";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test54_PrintImpl_printUint__E( uint32 u ) {
     printf("%u", (unsigned int)u) ;

}

void test54_PrintImpl_printInt__E( int32 i ) {
     printf("%i", (int)i) ;

}

void test54_PrintImpl_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void test54_PrintImpl_printBool__E( bool b ) {
    if ((b)) {
         printf("%s", "true") ;

    }
    else {
         printf("%s", "false") ;

    }
}

void test54_PrintImpl_targetInit__I() {
}

void test54_PrintImpl_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test118_BlinkMilli_pollen__reset__E();
void test118_BlinkMilli_pollen__ready__E();
void test118_BlinkMilli_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test54_PrintImpl_ test54_PrintImpl;

/*
 * ======== struct module definition (unit PrintImpl) ========
 */

struct test54_PrintImpl_ {
};
typedef struct test54_PrintImpl_ test54_PrintImpl_;

/*
 * ======== function members (unit PrintImpl) ========
 */

extern void test54_PrintImpl_printUint__E( uint32 u );
extern void test54_PrintImpl_printInt__E( int32 i );
extern void test54_PrintImpl_printReal__E( float f );
extern void test54_PrintImpl_printBool__E( bool b );
extern void test54_PrintImpl_targetInit__I();
extern void test54_PrintImpl_printStr__E( string s );

/*
 * ======== data members (unit PrintImpl) ========
 */


/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test118.BlinkMilli ========
 */

var $$c = function() {
    const BlinkMilli = {};
    BlinkMilli.BlinkMilli = BlinkMilli
    BlinkMilli.$name = 'test118.BlinkMilli';
    BlinkMilli.pollen$used = 0;
    BlinkMilli.PrintImpl = $units['test54.PrintImpl'];
    BlinkMilli.led$$id = 1;
    BlinkMilli.led = function(cn) {
        this.$$id = BlinkMilli.led$$id++;
        this.$$cname = cn ? cn : 'test118_BlinkMilli_led__'+this.$$id+'__S';
        this.$$tname = 'test118_BlinkMilli_led';
        this.$$uname = 'test118.BlinkMilli';
        this.red = 1;
        this.blue = 0;
    }
    BlinkMilli.led.prototype = new $$Struct('test118.BlinkMilli.led');
    BlinkMilli.led.prototype.$$isAggFld = {};
    BlinkMilli.led.prototype.$$isAggFld.red = false;
    BlinkMilli.led.prototype.$$isAggFld.blue = false;
    BlinkMilli.led.prototype.new_host = function( j ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                (this.blue) = (j);
        }
        this.$$hostInitLastPass();
        return this;
    }
    BlinkMilli.led.prototype.$$privateInit = function() {
        this.red = 1;
        this.blue = 0;
    }
    BlinkMilli.led.prototype.$$hostInitLastPass = function() {
    }
    BlinkMilli.foobar = new $$Ref('test118_BlinkMilli_foobar__I');
    BlinkMilli.targetInit = new $$Ref('test118_BlinkMilli_targetInit__E');
    BlinkMilli.test = new $$Ref('test118_BlinkMilli_test__I');
    BlinkMilli.chkArray = new $$Ref('test118_BlinkMilli_chkArray__I');
    BlinkMilli.pollen__run = new $$Ref('test118_BlinkMilli_pollen__run__E');
    BlinkMilli.$$hostInit = function() {
        var $$text = '';
        BlinkMilli.hll = new BlinkMilli.led('test118_BlinkMilli_hll__V'); BlinkMilli.hll.new_host(9);
        BlinkMilli.nonhostarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_nonhostarr__A', false); BlinkMilli.nonhostarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.ledArr = new $$Array(2, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_ledArr__A', false); BlinkMilli.ledArr.$$assign((new $$Array(2, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ new $units['test118.BlinkMilli'].led().new_host(2), new $units['test118.BlinkMilli'].led().new_host(2) ]));
        BlinkMilli.leds = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_leds__A', false); BlinkMilli.leds.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null ]));
        BlinkMilli.hostarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_hostarr__A', false); BlinkMilli.hostarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.chkarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr__A', false); BlinkMilli.chkarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.chkarr2 = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr2__A', false);
        BlinkMilli.chkarr3 = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr3__A', false); BlinkMilli.chkarr3.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 1, 1 ]));
        BlinkMilli.chkarr4 = new $$Array(2, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr4__A', false); BlinkMilli.chkarr4.$$assign((new $$Array(2, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2 ]));
        BlinkMilli.chkarr5 = new $$Array((BlinkMilli.nonhostVarTest), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr5__A', false);
        BlinkMilli.chkarr6 = new $$Array((BlinkMilli.nonhostVarTest), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr6__A', false);
        BlinkMilli.bind();
        return $$text;
    }
    BlinkMilli.bind = function() {
        var $$text = '';
        var nestarr;
        nestarr = (new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]);
        (BlinkMilli.hostarr).set(0, 0);
        (BlinkMilli.hostarr).set(1, 3);
        return $$text;
    }
    BlinkMilli.pollen__uses__ = function() {
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    BlinkMilli.$$privateInit = function() {
        BlinkMilli.nonhostVarTest = 9;
        BlinkMilli.hostVarTest2 = 9;
        BlinkMilli.initialBlue = 33;
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test118.BlinkMilli'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

        BlinkMilli.nonhostarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_nonhostarr__A', false); BlinkMilli.nonhostarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.leds = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_leds__A', false); BlinkMilli.leds.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null ]));
        BlinkMilli.chkarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr__A', false); BlinkMilli.chkarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.chkarr2 = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr2__A', false);
        BlinkMilli.chkarr3 = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr3__A', false); BlinkMilli.chkarr3.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 1, 1 ]));
        BlinkMilli.chkarr4 = new $$Array(2, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr4__A', false); BlinkMilli.chkarr4.$$assign((new $$Array(2, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2 ]));
        BlinkMilli.chkarr6 = new $$Array((BlinkMilli.nonhostVarTest), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr6__A', false);
    }
    BlinkMilli.$$hostInitLastPass = function() {
        BlinkMilli.chkarr7 = new $$Array((BlinkMilli.hostVarTest2), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr7__A', false);
        BlinkMilli.chkarr8 = new $$Array((BlinkMilli.hostVarTest2), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr8__A', false);
    }
    return BlinkMilli;
}
var $$u = $$c();
$units['test118.BlinkMilli'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test118.BlinkMilli'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test118.BlinkMilli ========
 */

var $$c = function() {
    const BlinkMilli = {};
    BlinkMilli.BlinkMilli = BlinkMilli
    BlinkMilli.$name = 'test118.BlinkMilli';
    BlinkMilli.pollen$used = 0;
    BlinkMilli.PrintImpl = $units['test54.PrintImpl'];
    BlinkMilli.led$$id = 1;
    BlinkMilli.led = function(cn) {
        this.$$id = BlinkMilli.led$$id++;
        this.$$cname = cn ? cn : 'test118_BlinkMilli_led__'+this.$$id+'__S';
        this.$$tname = 'test118_BlinkMilli_led';
        this.$$uname = 'test118.BlinkMilli';
        this.red = 1;
        this.blue = 0;
    }
    BlinkMilli.led.prototype = new $$Struct('test118.BlinkMilli.led');
    BlinkMilli.led.prototype.$$isAggFld = {};
    BlinkMilli.led.prototype.$$isAggFld.red = false;
    BlinkMilli.led.prototype.$$isAggFld.blue = false;
    BlinkMilli.led.prototype.new_host = function( j ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                (this.blue) = (j);
        }
        this.$$hostInitLastPass();
        return this;
    }
    BlinkMilli.led.prototype.$$privateInit = function() {
        this.red = 1;
        this.blue = 0;
    }
    BlinkMilli.led.prototype.$$hostInitLastPass = function() {
    }
    BlinkMilli.foobar = new $$Ref('test118_BlinkMilli_foobar__I');
    BlinkMilli.targetInit = new $$Ref('test118_BlinkMilli_targetInit__E');
    BlinkMilli.test = new $$Ref('test118_BlinkMilli_test__I');
    BlinkMilli.chkArray = new $$Ref('test118_BlinkMilli_chkArray__I');
    BlinkMilli.pollen__run = new $$Ref('test118_BlinkMilli_pollen__run__E');
    BlinkMilli.$$hostInit = function() {
        var $$text = '';
        BlinkMilli.hll = new BlinkMilli.led('test118_BlinkMilli_hll__V'); BlinkMilli.hll.new_host(9);
        BlinkMilli.nonhostarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_nonhostarr__A', false); BlinkMilli.nonhostarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.ledArr = new $$Array(2, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_ledArr__A', false); BlinkMilli.ledArr.$$assign((new $$Array(2, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ new $units['test118.BlinkMilli'].led().new_host(2), new $units['test118.BlinkMilli'].led().new_host(2) ]));
        BlinkMilli.leds = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_leds__A', false); BlinkMilli.leds.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null ]));
        BlinkMilli.hostarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_hostarr__A', false); BlinkMilli.hostarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.chkarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr__A', false); BlinkMilli.chkarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.chkarr2 = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr2__A', false);
        BlinkMilli.chkarr3 = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr3__A', false); BlinkMilli.chkarr3.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 1, 1 ]));
        BlinkMilli.chkarr4 = new $$Array(2, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr4__A', false); BlinkMilli.chkarr4.$$assign((new $$Array(2, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2 ]));
        BlinkMilli.chkarr5 = new $$Array((BlinkMilli.nonhostVarTest), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr5__A', false);
        BlinkMilli.chkarr6 = new $$Array((BlinkMilli.nonhostVarTest), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr6__A', false);
        BlinkMilli.bind();
        return $$text;
    }
    BlinkMilli.bind = function() {
        var $$text = '';
        var nestarr;
        nestarr = (new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]);
        (BlinkMilli.hostarr).set(0, 0);
        (BlinkMilli.hostarr).set(1, 3);
        return $$text;
    }
    BlinkMilli.pollen__uses__ = function() {
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    BlinkMilli.$$privateInit = function() {
        BlinkMilli.nonhostVarTest = 9;
        BlinkMilli.hostVarTest2 = 9;
        BlinkMilli.initialBlue = 33;
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test118.BlinkMilli'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

        BlinkMilli.nonhostarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_nonhostarr__A', false); BlinkMilli.nonhostarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.leds = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_leds__A', false); BlinkMilli.leds.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null, null, null ]));
        BlinkMilli.chkarr = new $$Array(4, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr__A', false); BlinkMilli.chkarr.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4 ]));
        BlinkMilli.chkarr2 = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr2__A', false);
        BlinkMilli.chkarr3 = new $$Array(3, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr3__A', false); BlinkMilli.chkarr3.$$assign((new $$Array(3, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 1, 1 ]));
        BlinkMilli.chkarr4 = new $$Array(2, function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr4__A', false); BlinkMilli.chkarr4.$$assign((new $$Array(2, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2 ]));
        BlinkMilli.chkarr6 = new $$Array((BlinkMilli.nonhostVarTest), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr6__A', false);
    }
    BlinkMilli.$$hostInitLastPass = function() {
        BlinkMilli.chkarr7 = new $$Array((BlinkMilli.hostVarTest2), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr7__A', false);
        BlinkMilli.chkarr8 = new $$Array((BlinkMilli.hostVarTest2), function($$cn,$$idx){ return 0;}, 'test118_BlinkMilli_chkarr8__A', false);
    }
    return BlinkMilli;
}
var $$u = $$c();
$units['test118.BlinkMilli'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);

