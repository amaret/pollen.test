pollen version 0.2.137
pollen version 0.2.137
in Events(), numEvents=0
in Event new_host
in registerEvent(), numEvents=0
in registerEvent(), Event Registered: 1 
In file included from ../test69_out/test69/Test_12/Test_12-prog.c:108:
../test69_out/test69/Test_12/../../virtual.mcu/ConsolePrint/ConsolePrint.c:26:20: warning: format specifies type 'unsigned long' but the argument has type 'uint32' (aka 'unsigned int') [-Wformat]
     printf("%lu", u) ;
             ~~~   ^
             %u
../test69_out/test69/Test_12/../../virtual.mcu/ConsolePrint/ConsolePrint.c:36:20: warning: format specifies type 'long' but the argument has type 'int32' (aka 'int') [-Wformat]
     printf("%li", i) ;
             ~~~   ^
             %i
2 warnings generated.
Now run executeable
numEvents=1TICK TICK TOCK!
SHUTDOWN

/*
 * ======== string literals ========
 */

static const char pollen_event_Events__s__fileName[] = "Events.p";
static const char pollen_event_Events__s__2[] = "in Events(), numEvents=";
static const char pollen_event_Events__s__5[] = "in registerEvent(), Event Registered: ";
static const char pollen_event_Events__s__8[] = "Events";
static const char pollen_event_Events__s__4[] = "in registerEvent(), numEvents=";
static const char pollen_event_Events__s__1[] = "Event";
static const char pollen_event_Events__s__6[] = " \n";
static const char pollen_event_Events__s__7[] = "numEvents=";
static const char pollen_event_Events__s__0[] = "in Event new_host\n";
static const char pollen_event_Events__s__3[] = "\n";

/*
 * ======== function definitions ========
 */

void pollen_event_Events_Event_setHandler__E( pollen_event_Events_Event_ this, pollen_event_Events_HP_handler h ) {
    (this->handler) = (h);
}

void pollen_event_Events_test__E( pollen_event_Events_Event_ e ) {
    virtual_mcu_ConsolePrint_printStr__E(pollen_event_Events__s__7);
    virtual_mcu_ConsolePrint_printUint__E((pollen_event_Events_numEvents__V));
    e->handler();
}

pollen_event_Events_Event_ pollen_event_Events_Event_new___E( pollen_event_Events_Event_ this, pollen_event_Events_HP_handler h ) {
    (this->handler) = (h);
    return this;
}

void pollen_event_Events_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef virtual_mcu_ConsolePrint__M
#define virtual_mcu_ConsolePrint__M
#include "../../virtual.mcu/ConsolePrint/ConsolePrint.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test69_Test_12_pollen__reset__E();
void test69_Test_12_pollen__ready__E();
void test69_Test_12_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_event_Events_ pollen_event_Events;

/*
 * ======== class definition (unit Events.Event) ========
 */

typedef void (*pollen_event_Events_HP_handler)();
struct pollen_event_Events_Event {
    pollen_event_Events_HP_handler handler;
};
typedef struct pollen_event_Events_Event pollen_event_Events_Event;
typedef struct pollen_event_Events_Event* pollen_event_Events_Event_;

/*
 * ======== struct module definition (unit Events) ========
 */

struct pollen_event_Events_ {
    uint8 numEvents;
};
typedef struct pollen_event_Events_ pollen_event_Events_;

/*
 * ======== function members (unit Events) ========
 */

extern void pollen_event_Events_Event_setHandler__E( pollen_event_Events_Event_ this, pollen_event_Events_HP_handler h );
extern void pollen_event_Events_test__E( pollen_event_Events_Event_ e );
extern pollen_event_Events_Event_ pollen_event_Events_Event_new___E( pollen_event_Events_Event_ this, pollen_event_Events_HP_handler h );
extern void pollen_event_Events_targetInit__I();

/*
 * ======== data members (unit Events) ========
 */

#define pollen_event_Events_numEvents__V pollen_event_Events.numEvents

/*
 * ======== string literals ========
 */

static const char test54_PrintImpl__s__fileName[] = "PrintImpl.p";
static const char test54_PrintImpl__s__0[] = "PrintImpl";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test54_PrintImpl_printUint__E( uint32 u ) {
     printf("%u", (unsigned int)u) ;

}

void test54_PrintImpl_printInt__E( int32 i ) {
     printf("%i", (int)i) ;

}

void test54_PrintImpl_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void test54_PrintImpl_printBool__E( bool b ) {
    if ((b)) {
         printf("%s", "true") ;

    }
    else {
         printf("%s", "false") ;

    }
}

void test54_PrintImpl_targetInit__I() {
}

void test54_PrintImpl_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test69_Test_12_pollen__reset__E();
void test69_Test_12_pollen__ready__E();
void test69_Test_12_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test54_PrintImpl_ test54_PrintImpl;

/*
 * ======== struct module definition (unit PrintImpl) ========
 */

struct test54_PrintImpl_ {
};
typedef struct test54_PrintImpl_ test54_PrintImpl_;

/*
 * ======== function members (unit PrintImpl) ========
 */

extern void test54_PrintImpl_printUint__E( uint32 u );
extern void test54_PrintImpl_printInt__E( int32 i );
extern void test54_PrintImpl_printReal__E( float f );
extern void test54_PrintImpl_printBool__E( bool b );
extern void test54_PrintImpl_targetInit__I();
extern void test54_PrintImpl_printStr__E( string s );

/*
 * ======== data members (unit PrintImpl) ========
 */

#include <std.h>

/*
 * ======== protocol member test69.Test_12.pollenPrintProxy delegates test54_PrintImpl ========
 */

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== unit headers ========
 */

#ifndef virtual_mcu_ConsolePrint__M
#define virtual_mcu_ConsolePrint__M
#include "../../virtual.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef pollen_event_Events__M
#define pollen_event_Events__M
#include "../../pollen.event/Events/Events.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

#ifndef test69_Test_12__M
#define test69_Test_12__M
#include "../../test69/Test_12/Test_12.h"
#endif

/*
 * ======== target data definitions (unit ConsolePrint) ========
 */

struct virtual_mcu_ConsolePrint_ virtual_mcu_ConsolePrint = { /* module data */
    "[95m",                 /* HEADER */
    "[94m",                 /* OKBLUE */
    "[92m",                 /* OKGREEN */
    "[93m",                 /* WARNING */
    "[91m",                 /* FAIL */
    "[0m",                  /* ENDC */
};

/*
 * ======== target data definitions (unit Events) ========
 */

struct pollen_event_Events_ pollen_event_Events = { /* module data */
    (uint8)0x1,              /* numEvents */
};

/*
 * ======== target data definitions (unit PrintImpl) ========
 */

struct test54_PrintImpl_ test54_PrintImpl = { /* module data */
};

/*
 * ======== host data definitions (unit Test_12) ========
 */

test69_Test_12_e__TYPE test69_Test_12_e__V = /* pollen.event.Events.Event object init */
{
    test69_Test_12_tick__I,    /* handler */
};

/*
 * ======== target data definitions (unit Test_12) ========
 */

struct test69_Test_12_ test69_Test_12 = { /* module data */
    &test54_PrintImpl,    /* pollenPrintProxy */
};

/*
 * ======== pollen print ========
 */

void test69_Test_12_pollen__printBool(bool b) {
    test54_PrintImpl_printBool__E(b);
}
void test69_Test_12_pollen__printInt(int32 i) {
    test54_PrintImpl_printInt__E(i);
}
void test69_Test_12_pollen__printReal(float f) {
    test54_PrintImpl_printReal__E(f);
}
void test69_Test_12_pollen__printUint(uint32 u) {
    test54_PrintImpl_printUint__E(u);
}
void test69_Test_12_pollen__printStr(string s) {
    test54_PrintImpl_printStr__E(s);
}

/*
 * ======== module functions ========
 */

#include "../../virtual.mcu/ConsolePrint/ConsolePrint.c"
#include "../../pollen.event/Events/Events.c"
#include "../../test54/PrintImpl/PrintImpl.c"
#include "../../test69/Test_12/Test_12.c"

/*
 * ======== pollen.reset() ========
 */

void test69_Test_12_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test69_Test_12_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== main() ========
 */

int main() {
    test69_Test_12_pollen__reset__E();
    virtual_mcu_ConsolePrint_targetInit__I();
    pollen_event_Events_targetInit__I();
    test54_PrintImpl_targetInit__I();
    test69_Test_12_targetInit__I();
    test69_Test_12_pollen__ready__E();
    test69_Test_12_pollen__run__E();
    test69_Test_12_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test69_Test_12__s__fileName[] = "Test_12.p";
static const char test69_Test_12__s__0[] = "TICK TICK TOCK!\n";
static const char test69_Test_12__s__2[] = "Test_12";
static const char test69_Test_12__s__1[] = "SHUTDOWN\n";

/*
 * ======== function definitions ========
 */

void test69_Test_12_pollen__run__E() {
    pollen_event_Events_test__E(&(test69_Test_12_e__V));
}

void test69_Test_12_tick__I() {
    virtual_mcu_ConsolePrint_printStr__E(test69_Test_12__s__0);
}

void test69_Test_12_pollen__shutdown__E( uint8 id ) {
    virtual_mcu_ConsolePrint_printStr__E(test69_Test_12__s__1);
}

void test69_Test_12_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_Events__M
#define pollen_event_Events__M
#include "../../pollen.event/Events/Events.h"
#endif

#ifndef virtual_mcu_ConsolePrint__M
#define virtual_mcu_ConsolePrint__M
#include "../../virtual.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test69_Test_12_pollen__reset__E();
void test69_Test_12_pollen__ready__E();

/*
 * ======== extern definition ========
 */

extern struct test69_Test_12_ test69_Test_12;

/*
 * ======== struct module definition (unit Test_12) ========
 */

struct test54_PrintImpl_;
struct test69_Test_12_ {
    struct test54_PrintImpl_ *pollenPrintProxy;
};
typedef struct test69_Test_12_ test69_Test_12_;

/*
 * ======== host variables (unit Test_12) ========
 */

typedef struct pollen_event_Events_Event test69_Test_12_e__TYPE;
extern test69_Test_12_e__TYPE test69_Test_12_e__V;

/*
 * ======== function members (unit Test_12) ========
 */

extern void test69_Test_12_pollen__run__E();
extern void test69_Test_12_tick__I();
extern void test69_Test_12_pollen__shutdown__E( uint8 id );
extern void test69_Test_12_targetInit__I();

/*
 * ======== data members (unit Test_12) ========
 */

#define test69_Test_12_e__V test69_Test_12_e
#define test69_Test_12_pollenPrintProxy__V test69_Test_12.pollenPrintProxy

/*
 * ======== string literals ========
 */

static const char virtual_mcu_ConsolePrint__s__fileName[] = "ConsolePrint.p";
static const char virtual_mcu_ConsolePrint__s__2[] = "\033[92m";
static const char virtual_mcu_ConsolePrint__s__4[] = "\033[91m";
static const char virtual_mcu_ConsolePrint__s__0[] = "\033[95m";
static const char virtual_mcu_ConsolePrint__s__1[] = "\033[94m";
static const char virtual_mcu_ConsolePrint__s__3[] = "\033[93m";
static const char virtual_mcu_ConsolePrint__s__5[] = "\033[0m";
static const char virtual_mcu_ConsolePrint__s__6[] = "ConsolePrint";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void virtual_mcu_ConsolePrint_printUint__E( uint32 u ) {
     printf("%lu", u) ;

}

void virtual_mcu_ConsolePrint_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void virtual_mcu_ConsolePrint_printInt__E( int32 i ) {
     printf("%li", i) ;

}

void virtual_mcu_ConsolePrint_printBool__E( bool b ) {
    if ((b)) {
         printf("true") ;

    }
    else {
         printf("false") ;

    }
}

void virtual_mcu_ConsolePrint_targetInit__I() {
}

void virtual_mcu_ConsolePrint_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test69_Test_12_pollen__reset__E();
void test69_Test_12_pollen__ready__E();
void test69_Test_12_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct virtual_mcu_ConsolePrint_ virtual_mcu_ConsolePrint;

/*
 * ======== struct module definition (unit ConsolePrint) ========
 */

struct virtual_mcu_ConsolePrint_ {
    const string HEADER;
    const string OKBLUE;
    const string OKGREEN;
    const string WARNING;
    const string FAIL;
    const string ENDC;
};
typedef struct virtual_mcu_ConsolePrint_ virtual_mcu_ConsolePrint_;

/*
 * ======== function members (unit ConsolePrint) ========
 */

extern void virtual_mcu_ConsolePrint_printUint__E( uint32 u );
extern void virtual_mcu_ConsolePrint_printReal__E( float f );
extern void virtual_mcu_ConsolePrint_printInt__E( int32 i );
extern void virtual_mcu_ConsolePrint_printBool__E( bool b );
extern void virtual_mcu_ConsolePrint_targetInit__I();
extern void virtual_mcu_ConsolePrint_printStr__E( string s );

/*
 * ======== const definitions ========
 */

#define virtual_mcu_ConsolePrint_HEADER (virtual_mcu_ConsolePrint__s__0)
#define virtual_mcu_ConsolePrint_OKBLUE (virtual_mcu_ConsolePrint__s__1)
#define virtual_mcu_ConsolePrint_OKGREEN (virtual_mcu_ConsolePrint__s__2)
#define virtual_mcu_ConsolePrint_WARNING (virtual_mcu_ConsolePrint__s__3)
#define virtual_mcu_ConsolePrint_FAIL (virtual_mcu_ConsolePrint__s__4)
#define virtual_mcu_ConsolePrint_ENDC (virtual_mcu_ConsolePrint__s__5)

/*
 * ======== data members (unit ConsolePrint) ========
 */

#define virtual_mcu_ConsolePrint_HEADER__V virtual_mcu_ConsolePrint.HEADER
#define virtual_mcu_ConsolePrint_OKBLUE__V virtual_mcu_ConsolePrint.OKBLUE
#define virtual_mcu_ConsolePrint_OKGREEN__V virtual_mcu_ConsolePrint.OKGREEN
#define virtual_mcu_ConsolePrint_WARNING__V virtual_mcu_ConsolePrint.WARNING
#define virtual_mcu_ConsolePrint_FAIL__V virtual_mcu_ConsolePrint.FAIL
#define virtual_mcu_ConsolePrint_ENDC__V virtual_mcu_ConsolePrint.ENDC

/*
 * ======== MODULE pollen.event.Events ========
 */

var $$c = function() {
    const Events = {};
    Events.Events = Events
    Events.$name = 'pollen.event.Events';
    Events.pollen$used = 0;
    Events.CP = $units['virtual.mcu.ConsolePrint'];
    Events.Event$$id = 1;
    Events.Event = function(cn) {
        this.$$id = Events.Event$$id++;
        this.$$cname = cn ? cn : 'pollen_event_Events_Event__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_Events_Event';
        this.$$uname = 'pollen.event.Events';
        this.handler = 0;
    }
    Events.Event.prototype = new $$Struct('pollen.event.Events.Event');
    Events.Event.prototype.$$isAggFld = {};
    Events.Event.prototype.$$isAggFld.handler = false;
    Events.Event.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                $$printf("in Event new_host\n");
                Events.registerEvent();
                (this.handler) = (h);
        }
        this.$$hostInitLastPass();
        return this;
    }
    Events.Event.prototype.setHandlerOnHost = function( h ) {
        var $$text = '';
        (this.handler) = (h);
        this.$$hostInitLastPass();
        return $$text;
    }
    Events.Event.prototype.$$privateInit = function() {
    }
    Events.Event.prototype.$$hostInitLastPass = function() {
    }
    Events.targetInit = new $$Ref('pollen_event_Events_targetInit__I');
    Events.test = new $$Ref('pollen_event_Events_test__E');
    Events.$$hostInit = function() {
        var $$text = '';
        $$printf("in Events(), numEvents=", (Events.numEvents), "\n");
        return $$text;
    }
    Events.registerEvent = function() {
        var $$text = '';
        $$printf("in registerEvent(), numEvents=", (Events.numEvents), "\n");
        ++(Events.numEvents);
        $$printf("in registerEvent(), Event Registered: ", (Events.numEvents), " \n");
        return $$text;
    }
    Events.pollen__uses__ = function() {
        $$bind($units['virtual.mcu.ConsolePrint'], 'pollen$used', true);
    }
    Events.$$privateInit = function() {
        Events.numEvents = 0;
    }
    return Events;
}
var $$u = $$c();
$units['pollen.event.Events'] = $$u;
$units.push($$u);


/*
 * ======== pollen.event.HandlerProtocol ========
 */

var $$c = function() {
    const HandlerProtocol = {};
    HandlerProtocol.HandlerProtocol = HandlerProtocol
    HandlerProtocol.$name = 'pollen.event.HandlerProtocol';
    HandlerProtocol.pollen$used = 0;
    HandlerProtocol.pollen__uses__ = function() {
    }
    HandlerProtocol.$$privateInit = function() {
    }
    return HandlerProtocol;
}
var $$u = $$c();
$units['pollen.event.HandlerProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.event.HandlerProtocol ========
 */

var $$c = function() {
    const HandlerProtocol = {};
    HandlerProtocol.HandlerProtocol = HandlerProtocol
    HandlerProtocol.$name = 'pollen.event.HandlerProtocol';
    HandlerProtocol.pollen$used = 0;
    HandlerProtocol.pollen__uses__ = function() {
    }
    HandlerProtocol.$$privateInit = function() {
    }
    return HandlerProtocol;
}
var $$u = $$c();
$units['pollen.event.HandlerProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE virtual.mcu.ConsolePrint ========
 */

var $$c = function() {
    const ConsolePrint = {};
    ConsolePrint.ConsolePrint = ConsolePrint
    ConsolePrint.$name = 'virtual.mcu.ConsolePrint';
    ConsolePrint.pollen$used = 0;
    ConsolePrint.printBool = new $$Ref('virtual_mcu_ConsolePrint_printBool__E');
    ConsolePrint.printReal = new $$Ref('virtual_mcu_ConsolePrint_printReal__E');
    ConsolePrint.printInt = new $$Ref('virtual_mcu_ConsolePrint_printInt__E');
    ConsolePrint.printUint = new $$Ref('virtual_mcu_ConsolePrint_printUint__E');
    ConsolePrint.printStr = new $$Ref('virtual_mcu_ConsolePrint_printStr__E');
    ConsolePrint.targetInit = new $$Ref('virtual_mcu_ConsolePrint_targetInit__I');
    ConsolePrint.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    ConsolePrint.pollen__uses__ = function() {
    }
    ConsolePrint.$$privateInit = function() {
        ConsolePrint.HEADER = "\033[95m";
        ConsolePrint.OKBLUE = "\033[94m";
        ConsolePrint.OKGREEN = "\033[92m";
        ConsolePrint.WARNING = "\033[93m";
        ConsolePrint.FAIL = "\033[91m";
        ConsolePrint.ENDC = "\033[0m";
    }
    return ConsolePrint;
}
var $$u = $$c();
$units['virtual.mcu.ConsolePrint'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.event.Events ========
 */

var $$c = function() {
    const Events = {};
    Events.Events = Events
    Events.$name = 'pollen.event.Events';
    Events.pollen$used = 0;
    Events.CP = $units['virtual.mcu.ConsolePrint'];
    Events.Event$$id = 1;
    Events.Event = function(cn) {
        this.$$id = Events.Event$$id++;
        this.$$cname = cn ? cn : 'pollen_event_Events_Event__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_Events_Event';
        this.$$uname = 'pollen.event.Events';
        this.handler = 0;
    }
    Events.Event.prototype = new $$Struct('pollen.event.Events.Event');
    Events.Event.prototype.$$isAggFld = {};
    Events.Event.prototype.$$isAggFld.handler = false;
    Events.Event.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                $$printf("in Event new_host\n");
                Events.registerEvent();
                (this.handler) = (h);
        }
        this.$$hostInitLastPass();
        return this;
    }
    Events.Event.prototype.setHandlerOnHost = function( h ) {
        var $$text = '';
        (this.handler) = (h);
        this.$$hostInitLastPass();
        return $$text;
    }
    Events.Event.prototype.$$privateInit = function() {
    }
    Events.Event.prototype.$$hostInitLastPass = function() {
    }
    Events.targetInit = new $$Ref('pollen_event_Events_targetInit__I');
    Events.test = new $$Ref('pollen_event_Events_test__E');
    Events.$$hostInit = function() {
        var $$text = '';
        $$printf("in Events(), numEvents=", (Events.numEvents), "\n");
        return $$text;
    }
    Events.registerEvent = function() {
        var $$text = '';
        $$printf("in registerEvent(), numEvents=", (Events.numEvents), "\n");
        ++(Events.numEvents);
        $$printf("in registerEvent(), Event Registered: ", (Events.numEvents), " \n");
        return $$text;
    }
    Events.pollen__uses__ = function() {
        $$bind($units['virtual.mcu.ConsolePrint'], 'pollen$used', true);
    }
    Events.$$privateInit = function() {
        Events.numEvents = 0;
    }
    return Events;
}
var $$u = $$c();
$units['pollen.event.Events'] = $$u;
$units.push($$u);

/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test69.Test_12 ========
 */

var $$c = function() {
    const Test_12 = {};
    Test_12.Test_12 = Test_12
    Test_12.$name = 'test69.Test_12';
    Test_12.pollen$used = 0;
    Test_12.Events = $units['pollen.event.Events'];
    Test_12.CP = $units['virtual.mcu.ConsolePrint'];
    Test_12.PrintImpl = $units['test54.PrintImpl'];
    Test_12.pollen__run = new $$Ref('test69_Test_12_pollen__run__E');
    Test_12.tick = new $$Ref('test69_Test_12_tick__I');
    Test_12.pollen__shutdown = new $$Ref('test69_Test_12_pollen__shutdown__E');
    Test_12.targetInit = new $$Ref('test69_Test_12_targetInit__I');
    Test_12.$$hostInit = function() {
        var $$text = '';
        Test_12.e = new $units['pollen.event.Events'].Event('test69_Test_12_e__V');
        (Test_12.e) = new $units['pollen.event.Events'].Event().new_host((Test_12.tick));
        return $$text;
    }
    Test_12.pollen__uses__ = function() {
        $$bind($units['pollen.event.Events'], 'pollen$used', true);
        $$bind($units['virtual.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Test_12.$$privateInit = function() {
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test69.Test_12'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Test_12;
}
var $$u = $$c();
$units['test69.Test_12'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test69.Test_12'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test69.Test_12 ========
 */

var $$c = function() {
    const Test_12 = {};
    Test_12.Test_12 = Test_12
    Test_12.$name = 'test69.Test_12';
    Test_12.pollen$used = 0;
    Test_12.Events = $units['pollen.event.Events'];
    Test_12.CP = $units['virtual.mcu.ConsolePrint'];
    Test_12.PrintImpl = $units['test54.PrintImpl'];
    Test_12.pollen__run = new $$Ref('test69_Test_12_pollen__run__E');
    Test_12.tick = new $$Ref('test69_Test_12_tick__I');
    Test_12.pollen__shutdown = new $$Ref('test69_Test_12_pollen__shutdown__E');
    Test_12.targetInit = new $$Ref('test69_Test_12_targetInit__I');
    Test_12.$$hostInit = function() {
        var $$text = '';
        Test_12.e = new $units['pollen.event.Events'].Event('test69_Test_12_e__V');
        (Test_12.e) = new $units['pollen.event.Events'].Event().new_host((Test_12.tick));
        return $$text;
    }
    Test_12.pollen__uses__ = function() {
        $$bind($units['pollen.event.Events'], 'pollen$used', true);
        $$bind($units['virtual.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Test_12.$$privateInit = function() {
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test69.Test_12'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Test_12;
}
var $$u = $$c();
$units['test69.Test_12'] = $$u;
$units.push($$u);


/*
 * ======== MODULE virtual.mcu.ConsolePrint ========
 */

var $$c = function() {
    const ConsolePrint = {};
    ConsolePrint.ConsolePrint = ConsolePrint
    ConsolePrint.$name = 'virtual.mcu.ConsolePrint';
    ConsolePrint.pollen$used = 0;
    ConsolePrint.printBool = new $$Ref('virtual_mcu_ConsolePrint_printBool__E');
    ConsolePrint.printReal = new $$Ref('virtual_mcu_ConsolePrint_printReal__E');
    ConsolePrint.printInt = new $$Ref('virtual_mcu_ConsolePrint_printInt__E');
    ConsolePrint.printUint = new $$Ref('virtual_mcu_ConsolePrint_printUint__E');
    ConsolePrint.printStr = new $$Ref('virtual_mcu_ConsolePrint_printStr__E');
    ConsolePrint.targetInit = new $$Ref('virtual_mcu_ConsolePrint_targetInit__I');
    ConsolePrint.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    ConsolePrint.pollen__uses__ = function() {
    }
    ConsolePrint.$$privateInit = function() {
        ConsolePrint.HEADER = "\033[95m";
        ConsolePrint.OKBLUE = "\033[94m";
        ConsolePrint.OKGREEN = "\033[92m";
        ConsolePrint.WARNING = "\033[93m";
        ConsolePrint.FAIL = "\033[91m";
        ConsolePrint.ENDC = "\033[0m";
    }
    return ConsolePrint;
}
var $$u = $$c();
$units['virtual.mcu.ConsolePrint'] = $$u;
$units.push($$u);

