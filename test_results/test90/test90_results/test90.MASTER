pollen version 0.2.137
pollen version 0.2.137
pollen.printProtocol, line 0:0, 'pollen.printProtocol': Either the '-p' option to bind a print protocol can be used or a print protocol can be bound in code - but both cannot be used at once
localhost.LocalHost.p, line 49:0, 'PrintProtocol': not a type
pollen.text.Text.p, line 127:5, the pegging operator cannot be used in declarations.
local.output.SendOsc.p, line 37:5, the pegging operator cannot be used in declarations.
EventQueue: setting new capacity =1
Newsroom: event registered. Event capacity = 1
TimerManager: registering milli timer (total=1)
Now run executeable
[RESET]
Cpu.reset
Pin Init: Pin0
Pin Init: Pin1
Pin Init: Pin2
Pin0.makeOutput
Pin0.clear
Pin1.makeOutput
Pin1.clear
Pin2.makeOutput
Pin2.clear
[READY]
Pin0.get
Pin0.set
Pin0.get
Pin0.clear
Pin0.get
Pin0.set
Pin0.get
Pin0.clear
Pin0.get
Pin0.set
Pin0.get
Pin0.clear
Pin0.get
Pin0.set
Pin0.get
Pin0.clear
Pin0.get
Pin0.set
Pin0.get
Pin0.clear
Pin0.get
Pin0.set
Done!

/*
 * ======== string literals ========
 */

static const char bijou_parts_LedState__s__fileName[] = "LedState.p";
static const char bijou_parts_LedState__s__0[] = "LedState";

/*
 * ======== function definitions ========
 */

void bijou_parts_LedState_LedState_apply__E( bijou_parts_LedState_ this ) {
    local_parts_ColorLed_setState__E(this);
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_setRGB__E( bijou_parts_LedState_ this, uint8 red, uint8 green, uint8 blue ) {
    this->rgba[(bijou_parts_LedState_Colors_Red)] = (red);
    this->rgba[(bijou_parts_LedState_Colors_Green)] = (green);
    this->rgba[(bijou_parts_LedState_Colors_Blue)] = (blue);
    return(  this  );
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_setAlpha__E( bijou_parts_LedState_ this, uint8 alpha ) {
    this->rgba[(bijou_parts_LedState_Colors_Alpha)] = (alpha);
    return(  this  );
}

uint8 bijou_parts_LedState_LedState_getId__E( bijou_parts_LedState_ this ) {
    return(  this->id  );
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_new___E( bijou_parts_LedState_ this ) {
    return this;
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_setRed__E( bijou_parts_LedState_ this, uint8 red ) {
    this->rgba[(bijou_parts_LedState_Colors_Red)] = (red);
    return(  this  );
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_setGreen__E( bijou_parts_LedState_ this, uint8 green ) {
    this->rgba[(bijou_parts_LedState_Colors_Green)] = (green);
    return(  this  );
}

uint8 bijou_parts_LedState_LedState_getBlue__E( bijou_parts_LedState_ this ) {
    return(  this->rgba[(bijou_parts_LedState_Colors_Blue)]  );
}

void bijou_parts_LedState_LedState_getRGBA__E( bijou_parts_LedState_ this, uint8  rgba[] ) {
    (rgba[(bijou_parts_LedState_Colors_Red)]) = this->rgba[(bijou_parts_LedState_Colors_Red)];
    (rgba[(bijou_parts_LedState_Colors_Green)]) = this->rgba[(bijou_parts_LedState_Colors_Green)];
    (rgba[(bijou_parts_LedState_Colors_Blue)]) = this->rgba[(bijou_parts_LedState_Colors_Blue)];
    (rgba[(bijou_parts_LedState_Colors_Alpha)]) = this->rgba[(bijou_parts_LedState_Colors_Alpha)];
}

uint8 bijou_parts_LedState_LedState_getAlpha__E( bijou_parts_LedState_ this ) {
    return(  this->rgba[(bijou_parts_LedState_Colors_Alpha)]  );
}

uint8 bijou_parts_LedState_LedState_getRed__E( bijou_parts_LedState_ this ) {
    return(  this->rgba[(bijou_parts_LedState_Colors_Red)]  );
}

uint8 bijou_parts_LedState_LedState_getGreen__E( bijou_parts_LedState_ this ) {
    return(  this->rgba[(bijou_parts_LedState_Colors_Green)]  );
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_setBlue__E( bijou_parts_LedState_ this, uint8 blue ) {
    this->rgba[(bijou_parts_LedState_Colors_Blue)] = (blue);
    return(  this  );
}

void bijou_parts_LedState_LedState_setId__E( bijou_parts_LedState_ this, uint8 id ) {
    this->id = (id);
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_setState__E( bijou_parts_LedState_ this, bijou_parts_LedState_ state ) {
    bijou_parts_LedState_LedState_getRGBA__E(state, this->rgba);
    return(  this  );
}

bijou_parts_LedState_ bijou_parts_LedState_LedState_setRGBA__E( bijou_parts_LedState_ this, uint8 red, uint8 green, uint8 blue, uint8 alpha ) {
    this->rgba[(bijou_parts_LedState_Colors_Red)] = (red);
    this->rgba[(bijou_parts_LedState_Colors_Green)] = (green);
    this->rgba[(bijou_parts_LedState_Colors_Blue)] = (blue);
    this->rgba[(bijou_parts_LedState_Colors_Alpha)] = (alpha);
    return(  this  );
}

void bijou_parts_LedState_LedState_getRGB__E( bijou_parts_LedState_ this, uint8  rgb[] ) {
    (rgb[(bijou_parts_LedState_Colors_Red)]) = this->rgba[(bijou_parts_LedState_Colors_Red)];
    (rgb[(bijou_parts_LedState_Colors_Green)]) = this->rgba[(bijou_parts_LedState_Colors_Green)];
    (rgb[(bijou_parts_LedState_Colors_Blue)]) = this->rgba[(bijou_parts_LedState_Colors_Blue)];
}


/*
 * ======== imports ========
 */

#ifndef local_mcu_TimerMilli__M
#define local_mcu_TimerMilli__M
#include "../../local.mcu/TimerMilli/TimerMilli.h"
#endif

#ifndef local_mcu_GlobalInterrupts__M
#define local_mcu_GlobalInterrupts__M
#include "../../local.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

#ifndef local_mcu_ConsolePrint__M
#define local_mcu_ConsolePrint__M
#include "../../local.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef local_parts_ColorLed__M
#define local_parts_ColorLed__M
#include "../../local.parts/ColorLed/ColorLed.h"
#endif

#ifndef pollen_parts_Led0__M
#define pollen_parts_Led0__M
#include "../../pollen.parts/Led0/Led0.h"
#endif

#ifndef pollen_parts_Led1__M
#define pollen_parts_Led1__M
#include "../../pollen.parts/Led1/Led1.h"
#endif

#ifndef pollen_parts_Led2__M
#define pollen_parts_Led2__M
#include "../../pollen.parts/Led2/Led2.h"
#endif

#ifndef pollen_event_Newsroom__M
#define pollen_event_Newsroom__M
#include "../../pollen.event/Newsroom/Newsroom.h"
#endif

#ifndef pollen_time_TimerManager__M
#define pollen_time_TimerManager__M
#include "../../pollen.time/TimerManager/TimerManager.h"
#endif

#ifndef localhost_Lifecycle__M
#define localhost_Lifecycle__M
#include "../../localhost/Lifecycle/Lifecycle.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== enum definitions (unit LedState) ========
 */

typedef uint8 bijou_parts_LedState_Colors;
#define bijou_parts_LedState_Colors_Red 0
#define bijou_parts_LedState_Colors_Green 1
#define bijou_parts_LedState_Colors_Blue 2
#define bijou_parts_LedState_Colors_Alpha 3

/*
 * ======== class definition (unit LedState) ========
 */

struct bijou_parts_LedState {
;
    uint8 id;
    uint8 rgba[4];
};
typedef struct bijou_parts_LedState bijou_parts_LedState;
typedef struct bijou_parts_LedState* bijou_parts_LedState_;

/*
 * ======== host variables (unit LedState) ========
 */

typedef uint8 bijou_parts_LedState_id__TYPE;
extern bijou_parts_LedState_id__TYPE bijou_parts_LedState_id__V;

/*
 * ======== function members (unit LedState) ========
 */

extern void bijou_parts_LedState_LedState_apply__E( bijou_parts_LedState_ this );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_setRGB__E( bijou_parts_LedState_ this, uint8 red, uint8 green, uint8 blue );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_setAlpha__E( bijou_parts_LedState_ this, uint8 alpha );
extern uint8 bijou_parts_LedState_LedState_getId__E( bijou_parts_LedState_ this );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_new___E( bijou_parts_LedState_ this );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_setRed__E( bijou_parts_LedState_ this, uint8 red );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_setGreen__E( bijou_parts_LedState_ this, uint8 green );
extern uint8 bijou_parts_LedState_LedState_getBlue__E( bijou_parts_LedState_ this );
extern void bijou_parts_LedState_LedState_getRGBA__E( bijou_parts_LedState_ this, uint8  rgba[] );
extern uint8 bijou_parts_LedState_LedState_getAlpha__E( bijou_parts_LedState_ this );
extern uint8 bijou_parts_LedState_LedState_getRed__E( bijou_parts_LedState_ this );
extern uint8 bijou_parts_LedState_LedState_getGreen__E( bijou_parts_LedState_ this );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_setBlue__E( bijou_parts_LedState_ this, uint8 blue );
extern void bijou_parts_LedState_LedState_setId__E( bijou_parts_LedState_ this, uint8 id );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_setState__E( bijou_parts_LedState_ this, bijou_parts_LedState_ state );
extern bijou_parts_LedState_ bijou_parts_LedState_LedState_setRGBA__E( bijou_parts_LedState_ this, uint8 red, uint8 green, uint8 blue, uint8 alpha );
extern void bijou_parts_LedState_LedState_getRGB__E( bijou_parts_LedState_ this, uint8  rgb[] );


/*
 * ======== string literals ========
 */

static const char local_mcu_ConsolePrint__s__fileName[] = "ConsolePrint.p";
static const char local_mcu_ConsolePrint__s__2[] = "\033[92m";
static const char local_mcu_ConsolePrint__s__4[] = "\033[91m";
static const char local_mcu_ConsolePrint__s__0[] = "\033[95m";
static const char local_mcu_ConsolePrint__s__1[] = "\033[94m";
static const char local_mcu_ConsolePrint__s__3[] = "\033[93m";
static const char local_mcu_ConsolePrint__s__5[] = "\033[0m";
static const char local_mcu_ConsolePrint__s__6[] = "ConsolePrint";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void local_mcu_ConsolePrint_printUint__E( uint32 u ) {
     printf("%iu", u) ;

}

void local_mcu_ConsolePrint_printInt__E( int32 i ) {
     printf("%i", i) ;

}

void local_mcu_ConsolePrint_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void local_mcu_ConsolePrint_printBool__E( bool b ) {
    if ((b)) {
         printf("true") ;

    }
    else {
         printf("false") ;

    }
}

void local_mcu_ConsolePrint_targetInit__I() {
}

void local_mcu_ConsolePrint_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_mcu_ConsolePrint_ local_mcu_ConsolePrint;

/*
 * ======== struct module definition (unit ConsolePrint) ========
 */

struct local_mcu_ConsolePrint_ {
    const string HEADER;
    const string OKBLUE;
    const string OKGREEN;
    const string WARNING;
    const string FAIL;
    const string ENDC;
};
typedef struct local_mcu_ConsolePrint_ local_mcu_ConsolePrint_;

/*
 * ======== function members (unit ConsolePrint) ========
 */

extern void local_mcu_ConsolePrint_printUint__E( uint32 u );
extern void local_mcu_ConsolePrint_printInt__E( int32 i );
extern void local_mcu_ConsolePrint_printReal__E( float f );
extern void local_mcu_ConsolePrint_printBool__E( bool b );
extern void local_mcu_ConsolePrint_targetInit__I();
extern void local_mcu_ConsolePrint_printStr__E( string s );

/*
 * ======== const definitions ========
 */

#define local_mcu_ConsolePrint_HEADER (local_mcu_ConsolePrint__s__0)
#define local_mcu_ConsolePrint_OKBLUE (local_mcu_ConsolePrint__s__1)
#define local_mcu_ConsolePrint_OKGREEN (local_mcu_ConsolePrint__s__2)
#define local_mcu_ConsolePrint_WARNING (local_mcu_ConsolePrint__s__3)
#define local_mcu_ConsolePrint_FAIL (local_mcu_ConsolePrint__s__4)
#define local_mcu_ConsolePrint_ENDC (local_mcu_ConsolePrint__s__5)

/*
 * ======== data members (unit ConsolePrint) ========
 */

#define local_mcu_ConsolePrint_HEADER__V local_mcu_ConsolePrint.HEADER
#define local_mcu_ConsolePrint_OKBLUE__V local_mcu_ConsolePrint.OKBLUE
#define local_mcu_ConsolePrint_OKGREEN__V local_mcu_ConsolePrint.OKGREEN
#define local_mcu_ConsolePrint_WARNING__V local_mcu_ConsolePrint.WARNING
#define local_mcu_ConsolePrint_FAIL__V local_mcu_ConsolePrint.FAIL
#define local_mcu_ConsolePrint_ENDC__V local_mcu_ConsolePrint.ENDC

/*
 * ======== string literals ========
 */

static const char local_mcu_Cpu__s__fileName[] = "Cpu.p";
static const char local_mcu_Cpu__s__0[] = "Cpu";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 
 #include <unistd.h> 

/*
 * ======== function definitions ========
 */

void local_mcu_Cpu_wait__E( uint16 us ) {
     printf("Cpu.wait %u\n", us); usleep(us) ;

}

uint32 local_mcu_Cpu_getFrequency__E() {
    return(  (local_mcu_Cpu_sysFreq__V)  );
}

void local_mcu_Cpu_reset__E() {
     printf("Cpu.reset\n") ;

}

void local_mcu_Cpu_cycle__E() {
     printf("Cpu.cycle\n"); usleep(1) ;

}

void local_mcu_Cpu_targetInit__I() {
}

void local_mcu_Cpu_shutdown__E() {
     printf("Cpu.shutdown\n") ;

}

void local_mcu_Cpu_setFrequency__E( uint32 hz ) {
    (local_mcu_Cpu_sysFreq__V) = (hz);
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_mcu_Cpu_ local_mcu_Cpu;

/*
 * ======== struct module definition (unit Cpu) ========
 */

struct local_mcu_Cpu_ {
    uint32 sysFreq;
};
typedef struct local_mcu_Cpu_ local_mcu_Cpu_;

/*
 * ======== function members (unit Cpu) ========
 */

extern void local_mcu_Cpu_wait__E( uint16 us );
extern uint32 local_mcu_Cpu_getFrequency__E();
extern void local_mcu_Cpu_reset__E();
extern void local_mcu_Cpu_cycle__E();
extern void local_mcu_Cpu_targetInit__I();
extern void local_mcu_Cpu_shutdown__E();
extern void local_mcu_Cpu_setFrequency__E( uint32 hz );

/*
 * ======== data members (unit Cpu) ========
 */

#define local_mcu_Cpu_sysFreq__V local_mcu_Cpu.sysFreq

/*
 * ======== string literals ========
 */

static const char local_mcu_GlobalInterrupts__s__fileName[] = "GlobalInterrupts.p";
static const char local_mcu_GlobalInterrupts__s__1[] = "GlobalInterrupts not restored\n";
static const char local_mcu_GlobalInterrupts__s__2[] = "GlobalInterrupts";
static const char local_mcu_GlobalInterrupts__s__0[] = "GlobalInterrupts restored\n";

/*
 * ======== function definitions ========
 */

void local_mcu_GlobalInterrupts_restore__E( bool state ) {
    if ((state)) {
        test90_Test_03_pollen__printStr((string)local_mcu_GlobalInterrupts__s__0);
    }
    else {
        test90_Test_03_pollen__printStr((string)local_mcu_GlobalInterrupts__s__1);
    }
}

void local_mcu_GlobalInterrupts_enable__E() {
    (local_mcu_GlobalInterrupts_enabled__V) = true;
}

void local_mcu_GlobalInterrupts_disable__E() {
    (local_mcu_GlobalInterrupts_enabled__V) = false;
}

bool local_mcu_GlobalInterrupts_isEnabled__E() {
    return(  (local_mcu_GlobalInterrupts_enabled__V)  );
}

void local_mcu_GlobalInterrupts_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_mcu_GlobalInterrupts_ local_mcu_GlobalInterrupts;

/*
 * ======== struct module definition (unit GlobalInterrupts) ========
 */

struct local_mcu_GlobalInterrupts_ {
    bool enabled;
};
typedef struct local_mcu_GlobalInterrupts_ local_mcu_GlobalInterrupts_;

/*
 * ======== function members (unit GlobalInterrupts) ========
 */

extern void local_mcu_GlobalInterrupts_restore__E( bool state );
extern void local_mcu_GlobalInterrupts_enable__E();
extern void local_mcu_GlobalInterrupts_disable__E();
extern bool local_mcu_GlobalInterrupts_isEnabled__E();
extern void local_mcu_GlobalInterrupts_targetInit__I();

/*
 * ======== data members (unit GlobalInterrupts) ========
 */

#define local_mcu_GlobalInterrupts_enabled__V local_mcu_GlobalInterrupts.enabled

/*
 * ======== string literals ========
 */

static const char local_mcu_Pin0__s__fileName[] = "Pin0.p";
static const char local_mcu_Pin0__s__2[] = ".set\n";
static const char local_mcu_Pin0__s__9[] = ".isOutput\n";
static const char local_mcu_Pin0__s__6[] = ".makeInput\n";
static const char local_mcu_Pin0__s__3[] = ".clear\n";
static const char local_mcu_Pin0__s__10[] = "Pin0";
static const char local_mcu_Pin0__s__5[] = ".get\n";
static const char local_mcu_Pin0__s__0[] = "Pin Init: ";
static const char local_mcu_Pin0__s__7[] = ".isInput\n";
static const char local_mcu_Pin0__s__11[] = "Pin";
static const char local_mcu_Pin0__s__4[] = ".toggle\n";
static const char local_mcu_Pin0__s__8[] = ".makeOutput\n";
static const char local_mcu_Pin0__s__1[] = "\n";

/*
 * ======== function definitions ========
 */

void local_mcu_Pin0_set__E() {
    (local_mcu_Pin0_state__V) = true;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__2);
}

void local_mcu_Pin0_makeOutput__E() {
    (local_mcu_Pin0_input__V) = false;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__8);
}

bool local_mcu_Pin0_isInput__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__7);
    return(  (local_mcu_Pin0_input__V) == true  );
}

bool local_mcu_Pin0_isOutput__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__9);
    return(  (local_mcu_Pin0_input__V) == false  );
}

bool local_mcu_Pin0_get__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__5);
    return(  (local_mcu_Pin0_state__V)  );
}

void local_mcu_Pin0_clear__E() {
    (local_mcu_Pin0_state__V) = false;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__3);
}

void local_mcu_Pin0_toggle__E() {
    (local_mcu_Pin0_state__V) = !(local_mcu_Pin0_state__V);
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__4);
}

void local_mcu_Pin0_targetInit__I() {
    (local_mcu_Pin0_name__V) = (local_mcu_Pin0_pname);
    (local_mcu_Pin0_num__V) = (local_mcu_Pin0_pnum);
    (local_mcu_Pin0_input__V) = false;
    (local_mcu_Pin0_state__V) = false;
    test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__0);
	test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__1);
}

void local_mcu_Pin0_makeInput__E() {
    (local_mcu_Pin0_input__V) = true;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin0_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin0__s__6);
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_mcu_Pin0_ local_mcu_Pin0;

/*
 * ======== struct module definition (unit Pin0) ========
 */

struct local_mcu_Pin0_ {
    string name;
    uint8 num;
    bool state;
    bool input;
    string pollen__unitname;
};
typedef struct local_mcu_Pin0_ local_mcu_Pin0_;

/*
 * ======== function members (unit Pin0) ========
 */

extern void local_mcu_Pin0_set__E();
extern void local_mcu_Pin0_makeOutput__E();
extern bool local_mcu_Pin0_isInput__E();
extern bool local_mcu_Pin0_isOutput__E();
extern bool local_mcu_Pin0_get__E();
extern void local_mcu_Pin0_clear__E();
extern void local_mcu_Pin0_toggle__E();
extern void local_mcu_Pin0_targetInit__I();
extern void local_mcu_Pin0_makeInput__E();

/*
 * ======== const definitions ========
 */

#define local_mcu_Pin0_pname (local_mcu_Pin0__s__11)
#define local_mcu_Pin0_pnum (0)

/*
 * ======== data members (unit Pin0) ========
 */

#define local_mcu_Pin0_name__V local_mcu_Pin0.name
#define local_mcu_Pin0_num__V local_mcu_Pin0.num
#define local_mcu_Pin0_state__V local_mcu_Pin0.state
#define local_mcu_Pin0_input__V local_mcu_Pin0.input
#define local_mcu_Pin0_pollen__unitname__V local_mcu_Pin0.pollen__unitname

/*
 * ======== string literals ========
 */

static const char local_mcu_Pin1__s__fileName[] = "Pin1.p";
static const char local_mcu_Pin1__s__2[] = ".set\n";
static const char local_mcu_Pin1__s__9[] = ".isOutput\n";
static const char local_mcu_Pin1__s__6[] = ".makeInput\n";
static const char local_mcu_Pin1__s__3[] = ".clear\n";
static const char local_mcu_Pin1__s__5[] = ".get\n";
static const char local_mcu_Pin1__s__10[] = "Pin1";
static const char local_mcu_Pin1__s__0[] = "Pin Init: ";
static const char local_mcu_Pin1__s__7[] = ".isInput\n";
static const char local_mcu_Pin1__s__11[] = "Pin";
static const char local_mcu_Pin1__s__4[] = ".toggle\n";
static const char local_mcu_Pin1__s__8[] = ".makeOutput\n";
static const char local_mcu_Pin1__s__1[] = "\n";

/*
 * ======== function definitions ========
 */

void local_mcu_Pin1_set__E() {
    (local_mcu_Pin1_state__V) = true;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__2);
}

void local_mcu_Pin1_makeOutput__E() {
    (local_mcu_Pin1_input__V) = false;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__8);
}

bool local_mcu_Pin1_isInput__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__7);
    return(  (local_mcu_Pin1_input__V) == true  );
}

bool local_mcu_Pin1_isOutput__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__9);
    return(  (local_mcu_Pin1_input__V) == false  );
}

bool local_mcu_Pin1_get__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__5);
    return(  (local_mcu_Pin1_state__V)  );
}

void local_mcu_Pin1_clear__E() {
    (local_mcu_Pin1_state__V) = false;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__3);
}

void local_mcu_Pin1_toggle__E() {
    (local_mcu_Pin1_state__V) = !(local_mcu_Pin1_state__V);
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__4);
}

void local_mcu_Pin1_targetInit__I() {
    (local_mcu_Pin1_name__V) = (local_mcu_Pin1_pname);
    (local_mcu_Pin1_num__V) = (local_mcu_Pin1_pnum);
    (local_mcu_Pin1_input__V) = false;
    (local_mcu_Pin1_state__V) = false;
    test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__0);
	test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__1);
}

void local_mcu_Pin1_makeInput__E() {
    (local_mcu_Pin1_input__V) = true;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin1_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin1__s__6);
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_mcu_Pin1_ local_mcu_Pin1;

/*
 * ======== struct module definition (unit Pin1) ========
 */

struct local_mcu_Pin1_ {
    string name;
    uint8 num;
    bool state;
    bool input;
    string pollen__unitname;
};
typedef struct local_mcu_Pin1_ local_mcu_Pin1_;

/*
 * ======== function members (unit Pin1) ========
 */

extern void local_mcu_Pin1_set__E();
extern void local_mcu_Pin1_makeOutput__E();
extern bool local_mcu_Pin1_isInput__E();
extern bool local_mcu_Pin1_isOutput__E();
extern bool local_mcu_Pin1_get__E();
extern void local_mcu_Pin1_clear__E();
extern void local_mcu_Pin1_toggle__E();
extern void local_mcu_Pin1_targetInit__I();
extern void local_mcu_Pin1_makeInput__E();

/*
 * ======== const definitions ========
 */

#define local_mcu_Pin1_pname (local_mcu_Pin1__s__11)
#define local_mcu_Pin1_pnum (1)

/*
 * ======== data members (unit Pin1) ========
 */

#define local_mcu_Pin1_name__V local_mcu_Pin1.name
#define local_mcu_Pin1_num__V local_mcu_Pin1.num
#define local_mcu_Pin1_state__V local_mcu_Pin1.state
#define local_mcu_Pin1_input__V local_mcu_Pin1.input
#define local_mcu_Pin1_pollen__unitname__V local_mcu_Pin1.pollen__unitname

/*
 * ======== string literals ========
 */

static const char local_mcu_Pin2__s__fileName[] = "Pin2.p";
static const char local_mcu_Pin2__s__2[] = ".set\n";
static const char local_mcu_Pin2__s__9[] = ".isOutput\n";
static const char local_mcu_Pin2__s__6[] = ".makeInput\n";
static const char local_mcu_Pin2__s__3[] = ".clear\n";
static const char local_mcu_Pin2__s__5[] = ".get\n";
static const char local_mcu_Pin2__s__0[] = "Pin Init: ";
static const char local_mcu_Pin2__s__7[] = ".isInput\n";
static const char local_mcu_Pin2__s__11[] = "Pin";
static const char local_mcu_Pin2__s__4[] = ".toggle\n";
static const char local_mcu_Pin2__s__8[] = ".makeOutput\n";
static const char local_mcu_Pin2__s__1[] = "\n";
static const char local_mcu_Pin2__s__10[] = "Pin2";

/*
 * ======== function definitions ========
 */

void local_mcu_Pin2_set__E() {
    (local_mcu_Pin2_state__V) = true;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__2);
}

void local_mcu_Pin2_makeOutput__E() {
    (local_mcu_Pin2_input__V) = false;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__8);
}

bool local_mcu_Pin2_isInput__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__7);
    return(  (local_mcu_Pin2_input__V) == true  );
}

bool local_mcu_Pin2_isOutput__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__9);
    return(  (local_mcu_Pin2_input__V) == false  );
}

bool local_mcu_Pin2_get__E() {
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__5);
    return(  (local_mcu_Pin2_state__V)  );
}

void local_mcu_Pin2_clear__E() {
    (local_mcu_Pin2_state__V) = false;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__3);
}

void local_mcu_Pin2_toggle__E() {
    (local_mcu_Pin2_state__V) = !(local_mcu_Pin2_state__V);
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__4);
}

void local_mcu_Pin2_targetInit__I() {
    (local_mcu_Pin2_name__V) = (local_mcu_Pin2_pname);
    (local_mcu_Pin2_num__V) = (local_mcu_Pin2_pnum);
    (local_mcu_Pin2_input__V) = false;
    (local_mcu_Pin2_state__V) = false;
    test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__0);
	test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__1);
}

void local_mcu_Pin2_makeInput__E() {
    (local_mcu_Pin2_input__V) = true;
    test90_Test_03_pollen__printStr((string)(local_mcu_Pin2_pollen__unitname__V));
	test90_Test_03_pollen__printStr((string)local_mcu_Pin2__s__6);
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_mcu_Pin2_ local_mcu_Pin2;

/*
 * ======== struct module definition (unit Pin2) ========
 */

struct local_mcu_Pin2_ {
    string name;
    uint8 num;
    bool state;
    bool input;
    string pollen__unitname;
};
typedef struct local_mcu_Pin2_ local_mcu_Pin2_;

/*
 * ======== function members (unit Pin2) ========
 */

extern void local_mcu_Pin2_set__E();
extern void local_mcu_Pin2_makeOutput__E();
extern bool local_mcu_Pin2_isInput__E();
extern bool local_mcu_Pin2_isOutput__E();
extern bool local_mcu_Pin2_get__E();
extern void local_mcu_Pin2_clear__E();
extern void local_mcu_Pin2_toggle__E();
extern void local_mcu_Pin2_targetInit__I();
extern void local_mcu_Pin2_makeInput__E();

/*
 * ======== const definitions ========
 */

#define local_mcu_Pin2_pname (local_mcu_Pin2__s__11)
#define local_mcu_Pin2_pnum (2)

/*
 * ======== data members (unit Pin2) ========
 */

#define local_mcu_Pin2_name__V local_mcu_Pin2.name
#define local_mcu_Pin2_num__V local_mcu_Pin2.num
#define local_mcu_Pin2_state__V local_mcu_Pin2.state
#define local_mcu_Pin2_input__V local_mcu_Pin2.input
#define local_mcu_Pin2_pollen__unitname__V local_mcu_Pin2.pollen__unitname

/*
 * ======== string literals ========
 */

static const char local_mcu_TimerMilli__s__fileName[] = "TimerMilli.p";
static const char local_mcu_TimerMilli__s__0[] = "TimerMilli";

/*
 * ======== code injections ========
 */

  
    #include <signal.h>
    #include <sys/time.h>
  

/*
 * ======== function definitions ========
 */

void local_mcu_TimerMilli_setHandler__E( local_mcu_TimerMilli_HP_handler h ) {
    (local_mcu_TimerMilli_tickHandler__V) = (h);
}

void local_mcu_TimerMilli_stop__E() {
    (local_mcu_TimerMilli_repeat__V) = false;
}

bool local_mcu_TimerMilli_isRunning__E() {
    return(  (local_mcu_TimerMilli_repeat__V) == true  );
}

void local_mcu_TimerMilli_resetTimer__I() {
    if ((local_mcu_TimerMilli_repeat__V)) {
         signal(SIGALRM, local_mcu_TimerMilli_sigAlarm__I) ;

    }
    
       struct itimerval tout_val;
       tout_val.it_interval.tv_sec = 0;
       tout_val.it_interval.tv_usec = 0;
       tout_val.it_value.tv_sec = 0; 
       tout_val.it_value.tv_usec = 1000;  /* 1 ms second timer */       
       setitimer(ITIMER_REAL, &tout_val,0);
    ;

}

void local_mcu_TimerMilli_start__E() {
    local_mcu_TimerMilli_resetTimer__I();
     signal(SIGALRM, local_mcu_TimerMilli_sigAlarm__I) ;

    (local_mcu_TimerMilli_repeat__V) = true;
}

void local_mcu_TimerMilli_targetInit__I() {
}

void local_mcu_TimerMilli_sigAlarm__I() {
    if ((local_mcu_TimerMilli_repeat__V)) {
        local_mcu_TimerMilli_resetTimer__I();
    }
    if ((local_mcu_TimerMilli_tickHandler__V) != null) {
        local_mcu_TimerMilli_tickHandler__V();
    }
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_mcu_TimerMilli_ local_mcu_TimerMilli;

/*
 * ======== struct module definition (unit TimerMilli) ========
 */

typedef void (*local_mcu_TimerMilli_HP_handler)();
struct local_mcu_TimerMilli_ {
    local_mcu_TimerMilli_HP_handler tickHandler;
    bool repeat;
};
typedef struct local_mcu_TimerMilli_ local_mcu_TimerMilli_;

/*
 * ======== function members (unit TimerMilli) ========
 */

extern void local_mcu_TimerMilli_setHandler__E( local_mcu_TimerMilli_HP_handler h );
extern void local_mcu_TimerMilli_stop__E();
extern bool local_mcu_TimerMilli_isRunning__E();
extern void local_mcu_TimerMilli_resetTimer__I();
extern void local_mcu_TimerMilli_start__E();
extern void local_mcu_TimerMilli_targetInit__I();
extern void local_mcu_TimerMilli_sigAlarm__I();

/*
 * ======== data members (unit TimerMilli) ========
 */

#define local_mcu_TimerMilli_tickHandler__V local_mcu_TimerMilli.tickHandler
#define local_mcu_TimerMilli_repeat__V local_mcu_TimerMilli.repeat

/*
 * ======== string literals ========
 */

static const char local_output_SendOsc__s__fileName[] = "SendOsc.p";
static const char local_output_SendOsc__s__1[] = "SendOsc";
static const char local_output_SendOsc__s__0[] = "oscsend 127.0.0.1 7000 /led/1 iii ";

/*
 * ======== code injections ========
 */

 #include <stdlib.h> 

/*
 * ======== function definitions ========
 */

void local_output_SendOsc_sendRGB__E( uint8 r, uint8 g, uint8 b ) {
    byte tmp[5];
    string t;
    uint8 len;
    
    t = (tmp);
    len = 0;
    local_output_SendOsc_sprint__I((local_output_SendOsc_header__V), (local_output_SendOsc_data__A), 0);
    pollen_text_Text_itoa__E((r), (tmp), 10);
    local_output_SendOsc_sprint__I((t), (local_output_SendOsc_data__A), pollen_text_Text_strlen__E((local_output_SendOsc_header__V)));
    (len) = pollen_text_Text_strlen__E((local_output_SendOsc_data__A));
    (local_output_SendOsc_data__A[(len)]) = ' ';
    (local_output_SendOsc_data__A[(len) + 1]) = '\0';
    pollen_text_Text_itoa__E((g), (tmp), 10);
    local_output_SendOsc_sprint__I((t), (local_output_SendOsc_data__A), pollen_text_Text_strlen__E((local_output_SendOsc_data__A)));
    (len) = pollen_text_Text_strlen__E((local_output_SendOsc_data__A));
    (local_output_SendOsc_data__A[(len)]) = ' ';
    (local_output_SendOsc_data__A[(len) + 1]) = '\0';
    pollen_text_Text_itoa__E((b), (tmp), 10);
    local_output_SendOsc_sprint__I((t), (local_output_SendOsc_data__A), pollen_text_Text_strlen__E((local_output_SendOsc_data__A)));
     system(local_output_SendOsc_data__A) ;

}

void local_output_SendOsc_sprint__I( string s, byte  data[], uint16 start ) {
    uint16 i;
    byte * b = (char*) (s);
    i = 0;
    while ((b[(i)]) != '\0') {
        (data[(start) + (i)]) = (b[(i)]);
        (i)++;
    }
    (data[(start) + (i)]) = '\0';
}

void local_output_SendOsc_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef pollen_text_Text__M
#define pollen_text_Text__M
#include "../../pollen.text/Text/Text.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_output_SendOsc_ local_output_SendOsc;

/*
 * ======== struct module definition (unit SendOsc) ========
 */

struct local_output_SendOsc_ {
    string header;
    byte data[50];
};
typedef struct local_output_SendOsc_ local_output_SendOsc_;

/*
 * ======== function members (unit SendOsc) ========
 */

extern void local_output_SendOsc_sendRGB__E( uint8 r, uint8 g, uint8 b );
extern void local_output_SendOsc_sprint__I( string s, byte  data[], uint16 start );
extern void local_output_SendOsc_targetInit__I();

/*
 * ======== data members (unit SendOsc) ========
 */

#define local_output_SendOsc_header__V local_output_SendOsc.header
#define local_output_SendOsc_data__A local_output_SendOsc.data

/*
 * ======== string literals ========
 */

static const char local_parts_ColorLed__s__fileName[] = "ColorLed.p";
static const char local_parts_ColorLed__s__3[] = "ColorLed";
static const char local_parts_ColorLed__s__0[] = "ColorLed set [";
static const char local_parts_ColorLed__s__1[] = ", ";
static const char local_parts_ColorLed__s__2[] = "]\n";

/*
 * ======== function definitions ========
 */

void local_parts_ColorLed_doSetColor__I() {
    uint8 r;
    uint8 g;
    uint8 b;
    uint8 a;
    r = bijou_parts_LedState_LedState_getRed__E(&(local_parts_ColorLed_state__V));
    g = bijou_parts_LedState_LedState_getGreen__E(&(local_parts_ColorLed_state__V));
    b = bijou_parts_LedState_LedState_getBlue__E(&(local_parts_ColorLed_state__V));
    a = bijou_parts_LedState_LedState_getAlpha__E(&(local_parts_ColorLed_state__V));
    test90_Test_03_pollen__printStr((string)local_parts_ColorLed__s__0);
	test90_Test_03_pollen__printUint((uint32)(r));
	test90_Test_03_pollen__printStr((string)local_parts_ColorLed__s__1);
	test90_Test_03_pollen__printUint((uint32)(g));
	test90_Test_03_pollen__printStr((string)local_parts_ColorLed__s__1);
	test90_Test_03_pollen__printUint((uint32)(b));
	test90_Test_03_pollen__printStr((string)local_parts_ColorLed__s__1);
	test90_Test_03_pollen__printUint((uint32)(a));
	test90_Test_03_pollen__printStr((string)local_parts_ColorLed__s__2);
    local_output_SendOsc_sendRGB__E((r), (g), (b));
}

void local_parts_ColorLed_setState__E( struct bijou_parts_LedState*  led ) {
    bijou_parts_LedState_LedState_setState__E(&(local_parts_ColorLed_state__V), (led));
    local_parts_ColorLed_doSetColor__I();
}

void local_parts_ColorLed_setRGBA__E( uint8 r, uint8 g, uint8 b, uint8 a ) {
    bijou_parts_LedState_LedState_setRGBA__E(&(local_parts_ColorLed_state__V), (r), (g), (b), (a));
    local_parts_ColorLed_doSetColor__I();
}

void local_parts_ColorLed_setRGB__E( uint8 r, uint8 g, uint8 b ) {
    bijou_parts_LedState_LedState_setRGB__E(&(local_parts_ColorLed_state__V), (r), (g), (b));
    local_parts_ColorLed_doSetColor__I();
}

void local_parts_ColorLed_targetInit__I() {
}

void local_parts_ColorLed_getRGBA__E( uint8  data[] ) {
    bijou_parts_LedState_LedState_getRGBA__E(&(local_parts_ColorLed_state__V), (data));
}

void local_parts_ColorLed_getRGB__E( uint8  data[] ) {
    bijou_parts_LedState_LedState_getRGB__E(&(local_parts_ColorLed_state__V), (data));
}


/*
 * ======== imports ========
 */

#ifndef bijou_parts_LedState__M
#define bijou_parts_LedState__M
#include "../../bijou.parts/LedState/LedState.h"
#endif

#ifndef local_output_SendOsc__M
#define local_output_SendOsc__M
#include "../../local.output/SendOsc/SendOsc.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct local_parts_ColorLed_ local_parts_ColorLed;

/*
 * ======== struct module definition (unit ColorLed) ========
 */

struct bijou_parts_LedState;
struct local_parts_ColorLed_ {
};
typedef struct local_parts_ColorLed_ local_parts_ColorLed_;

/*
 * ======== host variables (unit ColorLed) ========
 */

typedef struct bijou_parts_LedState local_parts_ColorLed_state__TYPE;
extern local_parts_ColorLed_state__TYPE local_parts_ColorLed_state__V;

/*
 * ======== function members (unit ColorLed) ========
 */

extern void local_parts_ColorLed_doSetColor__I();
extern void local_parts_ColorLed_setState__E( struct bijou_parts_LedState*  led );
extern void local_parts_ColorLed_setRGBA__E( uint8 r, uint8 g, uint8 b, uint8 a );
extern void local_parts_ColorLed_setRGB__E( uint8 r, uint8 g, uint8 b );
extern void local_parts_ColorLed_targetInit__I();
extern void local_parts_ColorLed_getRGBA__E( uint8  data[] );
extern void local_parts_ColorLed_getRGB__E( uint8  data[] );

/*
 * ======== data members (unit ColorLed) ========
 */

#define local_parts_ColorLed_state__V local_parts_ColorLed_state

/*
 * ======== string literals ========
 */

static const char localhost_Lifecycle__s__fileName[] = "Lifecycle.p";
static const char localhost_Lifecycle__s__2[] = "[SHUTDOWN]\n";
static const char localhost_Lifecycle__s__1[] = "[READY]\n";
static const char localhost_Lifecycle__s__3[] = "Lifecycle";
static const char localhost_Lifecycle__s__0[] = "[RESET]\n";

/*
 * ======== function definitions ========
 */

void localhost_Lifecycle_pollen__reset__E() {
    test90_Test_03_pollen__printStr((string)localhost_Lifecycle__s__0);
    local_mcu_Cpu_reset__E();
}

void localhost_Lifecycle_pollen__ready__E() {
    test90_Test_03_pollen__printStr((string)localhost_Lifecycle__s__1);
}

void localhost_Lifecycle_pollen__shutdown__E( uint8 id ) {
    local_mcu_Cpu_shutdown__E();
    test90_Test_03_pollen__printStr((string)localhost_Lifecycle__s__2);
}

void localhost_Lifecycle_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef local_mcu_TimerMilli__M
#define local_mcu_TimerMilli__M
#include "../../local.mcu/TimerMilli/TimerMilli.h"
#endif

#ifndef local_mcu_GlobalInterrupts__M
#define local_mcu_GlobalInterrupts__M
#include "../../local.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

#ifndef local_mcu_ConsolePrint__M
#define local_mcu_ConsolePrint__M
#include "../../local.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef local_parts_ColorLed__M
#define local_parts_ColorLed__M
#include "../../local.parts/ColorLed/ColorLed.h"
#endif

#ifndef pollen_parts_Led0__M
#define pollen_parts_Led0__M
#include "../../pollen.parts/Led0/Led0.h"
#endif

#ifndef pollen_parts_Led1__M
#define pollen_parts_Led1__M
#include "../../pollen.parts/Led1/Led1.h"
#endif

#ifndef pollen_parts_Led2__M
#define pollen_parts_Led2__M
#include "../../pollen.parts/Led2/Led2.h"
#endif

#ifndef pollen_event_Newsroom__M
#define pollen_event_Newsroom__M
#include "../../pollen.event/Newsroom/Newsroom.h"
#endif

#ifndef pollen_time_TimerManager__M
#define pollen_time_TimerManager__M
#include "../../pollen.time/TimerManager/TimerManager.h"
#endif

#ifndef localhost_Lifecycle__M
#define localhost_Lifecycle__M
#include "../../localhost/Lifecycle/Lifecycle.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

/*
 * ======== extern definition ========
 */

extern struct localhost_Lifecycle_ localhost_Lifecycle;

/*
 * ======== struct module definition (unit Lifecycle) ========
 */

struct localhost_Lifecycle_ {
};
typedef struct localhost_Lifecycle_ localhost_Lifecycle_;

/*
 * ======== function members (unit Lifecycle) ========
 */

extern void localhost_Lifecycle_pollen__reset__E();
extern void localhost_Lifecycle_pollen__ready__E();
extern void localhost_Lifecycle_pollen__shutdown__E( uint8 id );
extern void localhost_Lifecycle_targetInit__I();

/*
 * ======== data members (unit Lifecycle) ========
 */


/*
 * ======== string literals ========
 */

static const char pollen_event_Event__s__fileName[] = "Event.p";
static const char pollen_event_Event__s__0[] = "Event";

/*
 * ======== function definitions ========
 */

void pollen_event_Event_Event_setHandler__E( pollen_event_Event_ this, pollen_event_Event_HP_handler h ) {
    this->eventHandler = (h);
}

void pollen_event_Event_Event_postFromInterrupt__E( pollen_event_Event_ this ) {
    pollen_event_Newsroom_postFromInterrupt__E(this);
}

void pollen_event_Event_Event_post__E( pollen_event_Event_ this ) {
    if (this->eventHandler != null) {
        pollen_event_Newsroom_post__E(this);
    }
}

void pollen_event_Event_Event_fire__E( pollen_event_Event_ this ) {
    if (this->eventHandler != null) {
        this->eventHandler();
    }
}

pollen_event_Event_ pollen_event_Event_Event_new___E( pollen_event_Event_ this, pollen_event_Event_HP_handler h ) {
    this->eventHandler = (h);
    return this;
}

pollen_event_Event_HP_handler pollen_event_Event_Event_getHandler__E( pollen_event_Event_ this ) {
    return(  this->eventHandler  );
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_Newsroom__M
#define pollen_event_Newsroom__M
#include "../../pollen.event/Newsroom/Newsroom.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== class definition (unit Event) ========
 */

typedef void (*pollen_event_Event_HP_handler)();
struct pollen_event_Event {
    pollen_event_Event_HP_handler eventHandler;
};
typedef struct pollen_event_Event pollen_event_Event;
typedef struct pollen_event_Event* pollen_event_Event_;

/*
 * ======== function members (unit Event) ========
 */

extern void pollen_event_Event_Event_setHandler__E( pollen_event_Event_ this, pollen_event_Event_HP_handler h );
extern void pollen_event_Event_Event_postFromInterrupt__E( pollen_event_Event_ this );
extern void pollen_event_Event_Event_post__E( pollen_event_Event_ this );
extern void pollen_event_Event_Event_fire__E( pollen_event_Event_ this );
extern pollen_event_Event_ pollen_event_Event_Event_new___E( pollen_event_Event_ this, pollen_event_Event_HP_handler h );
extern pollen_event_Event_HP_handler pollen_event_Event_Event_getHandler__E( pollen_event_Event_ this );


/*
 * ======== string literals ========
 */

static const char pollen_event_EventQueue__s__fileName[] = "EventQueue.p";
static const char pollen_event_EventQueue__s__0[] = "EventQueue: setting new capacity =";
static const char pollen_event_EventQueue__s__2[] = "EventQueue";
static const char pollen_event_EventQueue__s__1[] = "\n";

/*
 * ======== function definitions ========
 */

bool pollen_event_EventQueue_EventQueue_add__E( pollen_event_EventQueue_ this, struct pollen_event_Event*  e ) {
    if (this->length < this->capacity) {
        this->elements[(this->tail)] = (e);
        ++(this->tail);
        ++(this->length);
        if ((this->tail) == (this->capacity)) {
            (this->tail) = 0;
        }
        return(  true  );
    }
    else {
        return(  false  );
    }
}

bool pollen_event_EventQueue_EventQueue_isEmpty__E( pollen_event_EventQueue_ this ) {
    return(  (this->length) == 0  );
}

uint8 pollen_event_EventQueue_EventQueue_getLength__E( pollen_event_EventQueue_ this ) {
    return(  this->length  );
}

pollen_event_EventQueue_ pollen_event_EventQueue_EventQueue_new___E( pollen_event_EventQueue_ this ) {
    return this;
}

pollen_event_Event_ pollen_event_EventQueue_EventQueue_remove__E( pollen_event_EventQueue_ this ) {
    pollen_event_Event_ e;
    e = null;
    if (this->length != 0) {
        (e) = this->elements[(this->head)];
        ++(this->head);
        --(this->length);
        if ((this->head) == (this->capacity)) {
            (this->head) = 0;
        }
    }
    return(  (e)  );
}

pollen_event_Event_ pollen_event_EventQueue_EventQueue_peek__E( pollen_event_EventQueue_ this ) {
    if (!pollen_event_EventQueue_EventQueue_isEmpty__E(this)) {
        return(  (this->elements[(this->head)])  );
    }
    else {
        return(  null  );
    }
}

uint8 pollen_event_EventQueue_EventQueue_getCapacity__E( pollen_event_EventQueue_ this ) {
    return(  this->capacity  );
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== class definition (unit EventQueue) ========
 */

struct pollen_event_Event;
struct pollen_event_EventQueue {
    uint8 capacity;
    struct pollen_event_Event*  elements[1] /* capacity */;
    uint8 length;
    uint8 head;
    uint8 tail;
};
typedef struct pollen_event_EventQueue pollen_event_EventQueue;
typedef struct pollen_event_EventQueue* pollen_event_EventQueue_;

/*
 * ======== host variables (unit EventQueue) ========
 */

typedef uint8 pollen_event_EventQueue_capacity__TYPE;
extern pollen_event_EventQueue_capacity__TYPE pollen_event_EventQueue_capacity__V;

/*
 * ======== function members (unit EventQueue) ========
 */

extern bool pollen_event_EventQueue_EventQueue_add__E( pollen_event_EventQueue_ this, struct pollen_event_Event*  e );
extern bool pollen_event_EventQueue_EventQueue_isEmpty__E( pollen_event_EventQueue_ this );
extern uint8 pollen_event_EventQueue_EventQueue_getLength__E( pollen_event_EventQueue_ this );
extern pollen_event_EventQueue_ pollen_event_EventQueue_EventQueue_new___E( pollen_event_EventQueue_ this );
extern struct pollen_event_Event*  pollen_event_EventQueue_EventQueue_remove__E( pollen_event_EventQueue_ this );
extern struct pollen_event_Event*  pollen_event_EventQueue_EventQueue_peek__E( pollen_event_EventQueue_ this );
extern uint8 pollen_event_EventQueue_EventQueue_getCapacity__E( pollen_event_EventQueue_ this );


/*
 * ======== string literals ========
 */

static const char pollen_event_Newsroom__s__fileName[] = "Newsroom.p";
static const char pollen_event_Newsroom__s__0[] = "Newsroom: event registered. Event capacity = ";
static const char pollen_event_Newsroom__s__2[] = "Newsroom";
static const char pollen_event_Newsroom__s__1[] = "\n";

/*
 * ======== function definitions ========
 */

void pollen_event_Newsroom_postFromInterrupt__E( struct pollen_event_Event*  event ) {
    pollen_event_EventQueue_EventQueue_add__E(&(pollen_event_Newsroom_events__V), (event));
}

void pollen_event_Newsroom_dispatch__I() {
    pollen_event_Event_ e;
    e = null;
    (e) = pollen_event_EventQueue_EventQueue_remove__E(&(pollen_event_Newsroom_events__V));
    while ((e) != null) {
        local_mcu_GlobalInterrupts_enable__E();
        pollen_event_Event_Event_fire__E(e);
        (e) = pollen_event_EventQueue_EventQueue_remove__E(&(pollen_event_Newsroom_events__V));
    }
}

void pollen_event_Newsroom_post__E( struct pollen_event_Event*  event ) {
    local_mcu_GlobalInterrupts_disable__E();
    pollen_event_EventQueue_EventQueue_add__E(&(pollen_event_Newsroom_events__V), (event));
    local_mcu_GlobalInterrupts_enable__E();
}

void pollen_event_Newsroom_run__E() {
    volatile bool loop;
    loop = true;
    local_mcu_GlobalInterrupts_enable__E();
    while ((loop)) {
        local_mcu_GlobalInterrupts_disable__E();
        pollen_event_Newsroom_dispatch__I();
        local_mcu_GlobalInterrupts_enable__E();
    }
}

void pollen_event_Newsroom_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

#ifndef pollen_event_EventQueue__M
#define pollen_event_EventQueue__M
#include "../../pollen.event/EventQueue/EventQueue.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_event_Newsroom_ pollen_event_Newsroom;

/*
 * ======== struct module definition (unit Newsroom) ========
 */

struct pollen_event_EventQueue;
struct local_mcu_GlobalInterrupts_;
struct pollen_event_Newsroom_ {
    struct local_mcu_GlobalInterrupts_ *GI;
};
typedef struct pollen_event_Newsroom_ pollen_event_Newsroom_;

/*
 * ======== host variables (unit Newsroom) ========
 */

typedef struct pollen_event_EventQueue pollen_event_Newsroom_events__TYPE;
extern pollen_event_Newsroom_events__TYPE pollen_event_Newsroom_events__V;

/*
 * ======== function members (unit Newsroom) ========
 */

struct pollen_event_Event;
extern void pollen_event_Newsroom_postFromInterrupt__E( struct pollen_event_Event*  event );
extern void pollen_event_Newsroom_dispatch__I();
extern void pollen_event_Newsroom_post__E( struct pollen_event_Event*  event );
extern void pollen_event_Newsroom_run__E();
extern void pollen_event_Newsroom_targetInit__I();

/*
 * ======== data members (unit Newsroom) ========
 */

#define pollen_event_Newsroom_events__V pollen_event_Newsroom_events
#define pollen_event_Newsroom_GI__V pollen_event_Newsroom.GI

/*
 * ======== string literals ========
 */

static const char pollen_math_Random16__s__fileName[] = "Random16.p";
static const char pollen_math_Random16__s__0[] = "Random16";

/*
 * ======== function definitions ========
 */

uint16 pollen_math_Random16_srand16__E( uint16 s ) {
    (pollen_math_Random16_seed__V) = (s);
    return(  pollen_math_Random16_rand16__E()  );
}

uint16 pollen_math_Random16_rand16f__E() {
    uint16 bit;
    
    (bit) = (((pollen_math_Random16_lfsr__V) >> 0) ^ ((pollen_math_Random16_lfsr__V) >> 2) ^ ((pollen_math_Random16_lfsr__V) >> 3) ^ ((pollen_math_Random16_lfsr__V) >> 5)) & 1;
    (pollen_math_Random16_lfsr__V) = ((pollen_math_Random16_lfsr__V) >> 1) | ((bit) << 15);
    ++(pollen_math_Random16_period__V);
    return(  (pollen_math_Random16_lfsr__V)  );
}

uint16 pollen_math_Random16_rand16__E() {
    uint16 lsb;
    lsb = 0;
    (lsb) = (pollen_math_Random16_lfsr__V) & 1;
    (pollen_math_Random16_lfsr__V) >>= 1;
    if ((lsb) == 1) {
        (pollen_math_Random16_lfsr__V) ^= 0xB400;
    }
    ++(pollen_math_Random16_period__V);
    return(  (pollen_math_Random16_lfsr__V)  );
}

void pollen_math_Random16_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_math_Random16_ pollen_math_Random16;

/*
 * ======== struct module definition (unit Random16) ========
 */

struct pollen_math_Random16_ {
    uint16 seed;
    uint16 lfsr;
    uint16 period;
};
typedef struct pollen_math_Random16_ pollen_math_Random16_;

/*
 * ======== function members (unit Random16) ========
 */

extern uint16 pollen_math_Random16_srand16__E( uint16 s );
extern uint16 pollen_math_Random16_rand16f__E();
extern uint16 pollen_math_Random16_rand16__E();
extern void pollen_math_Random16_targetInit__I();

/*
 * ======== data members (unit Random16) ========
 */

#define pollen_math_Random16_seed__V pollen_math_Random16.seed
#define pollen_math_Random16_lfsr__V pollen_math_Random16.lfsr
#define pollen_math_Random16_period__V pollen_math_Random16.period

/*
 * ======== string literals ========
 */

static const char pollen_math_Random8__s__fileName[] = "Random8.p";
static const char pollen_math_Random8__s__0[] = "Random8";

/*
 * ======== function definitions ========
 */

uint8 pollen_math_Random8_srand8__E( uint8 s ) {
    (pollen_math_Random8_seed__V) = (s);
    return(  pollen_math_Random8_rand8__E()  );
}

uint8 pollen_math_Random8_rand8f__E() {
    uint8 bit;
    
    do {
        (bit) = (((pollen_math_Random8_lfsr__V) >> 0) ^ ((pollen_math_Random8_lfsr__V) >> 2) ^ ((pollen_math_Random8_lfsr__V) >> 3) ^ ((pollen_math_Random8_lfsr__V) >> 5)) & 1;
        (pollen_math_Random8_lfsr__V) = ((pollen_math_Random8_lfsr__V) >> 1) | ((bit) << 7);
        ++(pollen_math_Random8_period__V);
    } while ((pollen_math_Random8_lfsr__V) != (pollen_math_Random8_seed__V));

    return(  (pollen_math_Random8_lfsr__V)  );
}

uint8 pollen_math_Random8_rand8__E() {
    uint8 lsb;
    lsb = 0;
    (lsb) = (pollen_math_Random8_lfsr__V) & 1;
    (pollen_math_Random8_lfsr__V) >>= 1;
    if ((lsb) == 1) {
        (pollen_math_Random8_lfsr__V) ^= 0xB0;
    }
    ++(pollen_math_Random8_period__V);
    return(  (pollen_math_Random8_lfsr__V)  );
}

void pollen_math_Random8_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_math_Random8_ pollen_math_Random8;

/*
 * ======== struct module definition (unit Random8) ========
 */

struct pollen_math_Random8_ {
    uint8 seed;
    uint8 lfsr;
    uint8 period;
};
typedef struct pollen_math_Random8_ pollen_math_Random8_;

/*
 * ======== function members (unit Random8) ========
 */

extern uint8 pollen_math_Random8_srand8__E( uint8 s );
extern uint8 pollen_math_Random8_rand8f__E();
extern uint8 pollen_math_Random8_rand8__E();
extern void pollen_math_Random8_targetInit__I();

/*
 * ======== data members (unit Random8) ========
 */

#define pollen_math_Random8_seed__V pollen_math_Random8.seed
#define pollen_math_Random8_lfsr__V pollen_math_Random8.lfsr
#define pollen_math_Random8_period__V pollen_math_Random8.period

/*
 * ======== string literals ========
 */

static const char pollen_parts_Led0__s__fileName[] = "Led0.p";
static const char pollen_parts_Led0__s__0[] = "Led0";

/*
 * ======== function definitions ========
 */

bool pollen_parts_Led0_isOn__E() {
    {
        return(  local_mcu_Pin0_get__E() == true  );
    }
}

void pollen_parts_Led0_toggle__E() {
    if (pollen_parts_Led0_isOn__E()) {
        pollen_parts_Led0_off__E();
    }
    else {
        pollen_parts_Led0_on__E();
    }
}

void pollen_parts_Led0_targetInit__E() {
    local_mcu_Pin0_makeOutput__E();
    pollen_parts_Led0_off__E();
}

void pollen_parts_Led0_off__E() {
    {
        local_mcu_Pin0_clear__E();
    }
}

void pollen_parts_Led0_on__E() {
    {
        local_mcu_Pin0_set__E();
    }
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_parts_Led0_ pollen_parts_Led0;

/*
 * ======== struct module definition (unit Led0) ========
 */

struct local_mcu_Pin0_;
struct pollen_parts_Led0_ {
    struct local_mcu_Pin0_ *pin;
};
typedef struct pollen_parts_Led0_ pollen_parts_Led0_;

/*
 * ======== function members (unit Led0) ========
 */

extern bool pollen_parts_Led0_isOn__E();
extern void pollen_parts_Led0_toggle__E();
extern void pollen_parts_Led0_targetInit__E();
extern void pollen_parts_Led0_off__E();
extern void pollen_parts_Led0_on__E();

/*
 * ======== const definitions ========
 */

#define pollen_parts_Led0_activeLow (false)

/*
 * ======== data members (unit Led0) ========
 */

#define pollen_parts_Led0_pin__V pollen_parts_Led0.pin

/*
 * ======== string literals ========
 */

static const char pollen_parts_Led1__s__fileName[] = "Led1.p";
static const char pollen_parts_Led1__s__0[] = "Led1";

/*
 * ======== function definitions ========
 */

bool pollen_parts_Led1_isOn__E() {
    {
        return(  local_mcu_Pin1_get__E() == true  );
    }
}

void pollen_parts_Led1_toggle__E() {
    if (pollen_parts_Led1_isOn__E()) {
        pollen_parts_Led1_off__E();
    }
    else {
        pollen_parts_Led1_on__E();
    }
}

void pollen_parts_Led1_targetInit__E() {
    local_mcu_Pin1_makeOutput__E();
    pollen_parts_Led1_off__E();
}

void pollen_parts_Led1_off__E() {
    {
        local_mcu_Pin1_clear__E();
    }
}

void pollen_parts_Led1_on__E() {
    {
        local_mcu_Pin1_set__E();
    }
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_parts_Led1_ pollen_parts_Led1;

/*
 * ======== struct module definition (unit Led1) ========
 */

struct local_mcu_Pin1_;
struct pollen_parts_Led1_ {
    struct local_mcu_Pin1_ *pin;
};
typedef struct pollen_parts_Led1_ pollen_parts_Led1_;

/*
 * ======== function members (unit Led1) ========
 */

extern bool pollen_parts_Led1_isOn__E();
extern void pollen_parts_Led1_toggle__E();
extern void pollen_parts_Led1_targetInit__E();
extern void pollen_parts_Led1_off__E();
extern void pollen_parts_Led1_on__E();

/*
 * ======== const definitions ========
 */

#define pollen_parts_Led1_activeLow (false)

/*
 * ======== data members (unit Led1) ========
 */

#define pollen_parts_Led1_pin__V pollen_parts_Led1.pin

/*
 * ======== string literals ========
 */

static const char pollen_parts_Led2__s__fileName[] = "Led2.p";
static const char pollen_parts_Led2__s__0[] = "Led2";

/*
 * ======== function definitions ========
 */

bool pollen_parts_Led2_isOn__E() {
    {
        return(  local_mcu_Pin2_get__E() == true  );
    }
}

void pollen_parts_Led2_toggle__E() {
    if (pollen_parts_Led2_isOn__E()) {
        pollen_parts_Led2_off__E();
    }
    else {
        pollen_parts_Led2_on__E();
    }
}

void pollen_parts_Led2_targetInit__E() {
    local_mcu_Pin2_makeOutput__E();
    pollen_parts_Led2_off__E();
}

void pollen_parts_Led2_off__E() {
    {
        local_mcu_Pin2_clear__E();
    }
}

void pollen_parts_Led2_on__E() {
    {
        local_mcu_Pin2_set__E();
    }
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_parts_Led2_ pollen_parts_Led2;

/*
 * ======== struct module definition (unit Led2) ========
 */

struct local_mcu_Pin2_;
struct pollen_parts_Led2_ {
    struct local_mcu_Pin2_ *pin;
};
typedef struct pollen_parts_Led2_ pollen_parts_Led2_;

/*
 * ======== function members (unit Led2) ========
 */

extern bool pollen_parts_Led2_isOn__E();
extern void pollen_parts_Led2_toggle__E();
extern void pollen_parts_Led2_targetInit__E();
extern void pollen_parts_Led2_off__E();
extern void pollen_parts_Led2_on__E();

/*
 * ======== const definitions ========
 */

#define pollen_parts_Led2_activeLow (false)

/*
 * ======== data members (unit Led2) ========
 */

#define pollen_parts_Led2_pin__V pollen_parts_Led2.pin

/*
 * ======== string literals ========
 */

static const char pollen_text_Text__s__fileName[] = "Text.p";
static const char pollen_text_Text__s__0[] = "Text";

/*
 * ======== function definitions ========
 */

int32 pollen_text_Text_strcmp__E( string s1, string s2 ) {
    
         while (*s1 == *s2++)
                 if (*s1++ == '\0')
                         return (0);
         return (*(const unsigned char *)s1 - *(const unsigned char *)(s2 - 1));
   ;

}

int32 pollen_text_Text_strncmp__E( string s1, string s2, uint16 n ) {
     
         if (n == 0)
                 return (0);
         do {
                 if (*s1 != *s2++)
                         return (*(const unsigned char *)s1 -
                                 *(const unsigned char *)(s2 - 1));
                 if (*s1++ == '\0')
                         break;
         } while (--n != 0);
         return (0);
    ;

}

uint16 pollen_text_Text_strlen__E( string s ) {
    uint16 i;
    byte * b = (char*) (s);
    i = 0;
    while ((b[(i)]) != '\0') {
        (i)++;
    }
    return(  (i)  );
}

void pollen_text_Text_itoa__E( int32 num, byte  str[], uint8 base ) {
    uint16 i;
    bool isNegative;
    uint32 rem;
    i = 0;
    isNegative = false;
    if ((num) == 0) {
        (str[(i)++]) = '0';
        (str[(i)]) = '\0';
        return;
    }
    if ((num) < 0 && (base) == 10) {
        (isNegative) = true;
        (num) = -(num);
    }
    while ((num) != 0) {
        rem = (num) % (base);
        (str[(i)++]) = ((rem) > 9) ? ((rem) - 10) + 0x61 : (rem) + 0x30;
        (num) = (num) / (base);
    }
    if ((isNegative)) {
        (str[(i)++]) = '-';
    }
    (str[(i)]) = '\0';
    pollen_text_Text_reverse__E((str), (i));
}

void pollen_text_Text_reverse__E( byte  data[], uint16 length ) {
    uint16 start;
    uint16 end;
    byte b;
    start = 0;
    end = (length) - 1;
    while ((start) < (end)) {
        b = (data[(start)]);
        (data[(start)]) = (data[(end)]);
        (data[(end)]) = (b);
        (start)++;
        (end)--;
    }
}

void pollen_text_Text_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_text_Text_ pollen_text_Text;

/*
 * ======== struct module definition (unit Text) ========
 */

struct pollen_text_Text_ {
};
typedef struct pollen_text_Text_ pollen_text_Text_;

/*
 * ======== function members (unit Text) ========
 */

extern int32 pollen_text_Text_strcmp__E( string s1, string s2 );
extern int32 pollen_text_Text_strncmp__E( string s1, string s2, uint16 n );
extern uint16 pollen_text_Text_strlen__E( string s );
extern void pollen_text_Text_itoa__E( int32 num, byte  str[], uint8 base );
extern void pollen_text_Text_reverse__E( byte  data[], uint16 length );
extern void pollen_text_Text_targetInit__I();

/*
 * ======== data members (unit Text) ========
 */


/*
 * ======== string literals ========
 */

static const char pollen_time_Timer__s__fileName[] = "Timer.p";
static const char pollen_time_Timer__s__0[] = "Timer";

/*
 * ======== function definitions ========
 */

void pollen_time_Timer_Timer_setHandler__E( pollen_time_Timer_ this, pollen_time_Timer_HP_handler h ) {
    pollen_event_Event_Event_setHandler__E(&(this->tickEvent), (h));
}

void pollen_time_Timer_Timer_stop__E( pollen_time_Timer_ this ) {
    this->active = false;
}

uint16 pollen_time_Timer_Timer_getDuration__E( pollen_time_Timer_ this ) {
    return(  this->duration  );
}

void pollen_time_Timer_Timer_start__E( pollen_time_Timer_ this, uint16 ms ) {
    this->duration = (ms);
    this->periodic = true;
    this->tickCount = 0;
    if (this->added == false) {
        pollen_time_TimerManager_addTimer__E(this);
        this->added = true;
    }
    else {
        pollen_time_TimerManager_start__E();
    }
    this->active = true;
}

void pollen_time_Timer_Timer_fire__E( pollen_time_Timer_ this ) {
    pollen_event_Event_Event_fire__E(&(this->tickEvent));
}

void pollen_time_Timer_Timer_tick__E( pollen_time_Timer_ this ) {
    if (this->active) {
        this->tickCount++;
        if (this->tickCount == this->duration) {
            pollen_event_Event_Event_post__E(&(this->tickEvent));
            if (this->periodic) {
                this->tickCount = 0;
            }
            else {
                pollen_time_Timer_Timer_stop__E(this);
            }
        }
    }
}

bool pollen_time_Timer_Timer_isActive__E( pollen_time_Timer_ this ) {
    return(  this->active  );
}

pollen_time_Timer_ pollen_time_Timer_Timer_new___E( pollen_time_Timer_ this ) {
    return this;
}

void pollen_time_Timer_Timer_oneshot__E( pollen_time_Timer_ this, uint16 ms ) {
    this->duration = (ms);
    this->periodic = false;
    this->tickCount = 0;
    if (this->added == false) {
        pollen_time_TimerManager_addTimer__E(this);
        this->added = true;
    }
    else {
        pollen_time_TimerManager_start__E();
    }
    this->active = true;
}


/*
 * ======== imports ========
 */

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

#ifndef pollen_time_TimerManager__M
#define pollen_time_TimerManager__M
#include "../../pollen.time/TimerManager/TimerManager.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== class definition (unit Timer) ========
 */

typedef void (*pollen_time_Timer_HP_handler)();
struct pollen_event_Event;
struct pollen_time_Timer {
    pollen_time_Timer_HP_handler eventHandler;
    struct pollen_event_Event  tickEvent;
    bool active;
    bool periodic;
    uint16 duration;
    uint16 tickCount;
    bool added;
};
typedef struct pollen_time_Timer pollen_time_Timer;
typedef struct pollen_time_Timer* pollen_time_Timer_;

/*
 * ======== host variables (unit Timer) ========
 */

typedef struct pollen_event_Event pollen_time_Timer_tickEvent__TYPE;
extern pollen_time_Timer_tickEvent__TYPE pollen_time_Timer_tickEvent__V;

/*
 * ======== function members (unit Timer) ========
 */

extern void pollen_time_Timer_Timer_setHandler__E( pollen_time_Timer_ this, pollen_time_Timer_HP_handler h );
extern void pollen_time_Timer_Timer_stop__E( pollen_time_Timer_ this );
extern uint16 pollen_time_Timer_Timer_getDuration__E( pollen_time_Timer_ this );
extern void pollen_time_Timer_Timer_start__E( pollen_time_Timer_ this, uint16 ms );
extern void pollen_time_Timer_Timer_fire__E( pollen_time_Timer_ this );
extern void pollen_time_Timer_Timer_tick__E( pollen_time_Timer_ this );
extern bool pollen_time_Timer_Timer_isActive__E( pollen_time_Timer_ this );
extern pollen_time_Timer_ pollen_time_Timer_Timer_new___E( pollen_time_Timer_ this );
extern void pollen_time_Timer_Timer_oneshot__E( pollen_time_Timer_ this, uint16 ms );


/*
 * ======== string literals ========
 */

static const char pollen_time_TimerManager__s__fileName[] = "TimerManager.p";
static const char pollen_time_TimerManager__s__1[] = "(total=";
static const char pollen_time_TimerManager__s__0[] = "TimerManager: registering milli timer ";
static const char pollen_time_TimerManager__s__2[] = ")\n";
static const char pollen_time_TimerManager__s__3[] = "TimerManager";

/*
 * ======== function definitions ========
 */

bool pollen_time_TimerManager_addTimer__E( struct pollen_time_Timer*  t ) {
    bool added;
    uint8 i;
    added = true;
    
    for ((i) = 0; (i) < (pollen_time_TimerManager_numMsTimers__V); ++(i)) {
        if ((pollen_time_TimerManager_msTimers__A[(i)]) == null) {
            (pollen_time_TimerManager_msTimers__A[(i)]) = (t);
            break;
        }
    }
    if ((i) == (pollen_time_TimerManager_numMsTimers__V)) {
        (added) = false;
    }
    else if (pollen_time_TimerManager_isActive__E() == false) {
        pollen_time_TimerManager_start__E();
    }
    return(  (added)  );
}

void pollen_time_TimerManager_stop__E() {
    if (local_mcu_TimerMilli_isRunning__E()) {
        local_mcu_TimerMilli_stop__E();
    }
}

void pollen_time_TimerManager_start__E() {
    if (!local_mcu_TimerMilli_isRunning__E()) {
        local_mcu_TimerMilli_start__E();
    }
}

bool pollen_time_TimerManager_isActive__E() {
    return(  local_mcu_TimerMilli_isRunning__E()  );
}

void pollen_time_TimerManager_targetInit__I() {
}

void pollen_time_TimerManager_tickISR__I() {
    bool oneActive;
    uint8 i;
    pollen_time_Timer_ t;
    oneActive = false;
    for (i = 0; (i) < (pollen_time_TimerManager_numMsTimers__V); ++(i)) {
        if ((pollen_time_TimerManager_msTimers__A[(i)]) != null) {
            t = null;
            (t) = (pollen_time_TimerManager_msTimers__A[(i)]);
            if (pollen_time_Timer_Timer_isActive__E(t)) {
                pollen_time_Timer_Timer_tick__E(t);
                (oneActive) = true;
            }
        }
    }
    if (!(oneActive)) {
        pollen_time_TimerManager_stop__E();
    }
}


/*
 * ======== imports ========
 */

#ifndef pollen_time_Timer__M
#define pollen_time_Timer__M
#include "../../pollen.time/Timer/Timer.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct pollen_time_TimerManager_ pollen_time_TimerManager;

/*
 * ======== struct module definition (unit TimerManager) ========
 */

struct local_mcu_TimerMilli_;
struct pollen_time_Timer;
struct pollen_time_TimerManager_ {
    struct local_mcu_TimerMilli_ *hwTimer;
    struct pollen_time_Timer*  msTimers[1] /* numMsTimers */;
};
typedef struct pollen_time_TimerManager_ pollen_time_TimerManager_;

/*
 * ======== host variables (unit TimerManager) ========
 */

typedef uint8 pollen_time_TimerManager_numMsTimers__TYPE;
extern const pollen_time_TimerManager_numMsTimers__TYPE pollen_time_TimerManager_numMsTimers__V;

/*
 * ======== function members (unit TimerManager) ========
 */

extern bool pollen_time_TimerManager_addTimer__E( struct pollen_time_Timer*  t );
extern void pollen_time_TimerManager_stop__E();
extern void pollen_time_TimerManager_start__E();
extern bool pollen_time_TimerManager_isActive__E();
extern void pollen_time_TimerManager_targetInit__I();
extern void pollen_time_TimerManager_tickISR__I();

/*
 * ======== data members (unit TimerManager) ========
 */

#define pollen_time_TimerManager_hwTimer__V pollen_time_TimerManager.hwTimer
#define pollen_time_TimerManager_msTimers__A pollen_time_TimerManager.msTimers

/*
 * ======== string literals ========
 */

static const char test54_PrintImpl__s__fileName[] = "PrintImpl.p";
static const char test54_PrintImpl__s__0[] = "PrintImpl";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test54_PrintImpl_printUint__E( uint32 u ) {
     printf("%u", (unsigned int)u) ;

}

void test54_PrintImpl_printInt__E( int32 i ) {
     printf("%i", (int)i) ;

}

void test54_PrintImpl_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void test54_PrintImpl_printBool__E( bool b ) {
    if ((b)) {
         printf("%s", "true") ;

    }
    else {
         printf("%s", "false") ;

    }
}

void test54_PrintImpl_targetInit__I() {
}

void test54_PrintImpl_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test54_PrintImpl_ test54_PrintImpl;

/*
 * ======== struct module definition (unit PrintImpl) ========
 */

struct test54_PrintImpl_ {
};
typedef struct test54_PrintImpl_ test54_PrintImpl_;

/*
 * ======== function members (unit PrintImpl) ========
 */

extern void test54_PrintImpl_printUint__E( uint32 u );
extern void test54_PrintImpl_printInt__E( int32 i );
extern void test54_PrintImpl_printReal__E( float f );
extern void test54_PrintImpl_printBool__E( bool b );
extern void test54_PrintImpl_targetInit__I();
extern void test54_PrintImpl_printStr__E( string s );

/*
 * ======== data members (unit PrintImpl) ========
 */

#include <std.h>

/*
 * ======== protocol member pollen.parts.Led0.pin delegates local_mcu_Pin0 ========
 */

#ifndef local_mcu_Pin0__M
#define local_mcu_Pin0__M
#include "../../local.mcu/Pin0/Pin0.h"
#endif

/*
 * ======== protocol member pollen.parts.Led1.pin delegates local_mcu_Pin1 ========
 */

#ifndef local_mcu_Pin1__M
#define local_mcu_Pin1__M
#include "../../local.mcu/Pin1/Pin1.h"
#endif

/*
 * ======== protocol member pollen.parts.Led2.pin delegates local_mcu_Pin2 ========
 */

#ifndef local_mcu_Pin2__M
#define local_mcu_Pin2__M
#include "../../local.mcu/Pin2/Pin2.h"
#endif

/*
 * ======== protocol member pollen.event.Newsroom.GI delegates local_mcu_GlobalInterrupts ========
 */

#ifndef local_mcu_GlobalInterrupts__M
#define local_mcu_GlobalInterrupts__M
#include "../../local.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

/*
 * ======== protocol member pollen.time.TimerManager.hwTimer delegates local_mcu_TimerMilli ========
 */

#ifndef local_mcu_TimerMilli__M
#define local_mcu_TimerMilli__M
#include "../../local.mcu/TimerMilli/TimerMilli.h"
#endif

/*
 * ======== protocol member test90.Test_03.pollenPrintProxy delegates test54_PrintImpl ========
 */

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== unit headers ========
 */

#ifndef local_mcu_Cpu__M
#define local_mcu_Cpu__M
#include "../../local.mcu/Cpu/Cpu.h"
#endif

#ifndef local_mcu_GlobalInterrupts__M
#define local_mcu_GlobalInterrupts__M
#include "../../local.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

#ifndef local_mcu_TimerMilli__M
#define local_mcu_TimerMilli__M
#include "../../local.mcu/TimerMilli/TimerMilli.h"
#endif

#ifndef local_mcu_Pin0__M
#define local_mcu_Pin0__M
#include "../../local.mcu/Pin0/Pin0.h"
#endif

#ifndef local_mcu_Pin1__M
#define local_mcu_Pin1__M
#include "../../local.mcu/Pin1/Pin1.h"
#endif

#ifndef local_mcu_Pin2__M
#define local_mcu_Pin2__M
#include "../../local.mcu/Pin2/Pin2.h"
#endif

#ifndef local_mcu_ConsolePrint__M
#define local_mcu_ConsolePrint__M
#include "../../local.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef pollen_math_Random8__M
#define pollen_math_Random8__M
#include "../../pollen.math/Random8/Random8.h"
#endif

#ifndef pollen_math_Random16__M
#define pollen_math_Random16__M
#include "../../pollen.math/Random16/Random16.h"
#endif

#ifndef bijou_parts_LedState__M
#define bijou_parts_LedState__M
#include "../../bijou.parts/LedState/LedState.h"
#endif

#ifndef pollen_text_Text__M
#define pollen_text_Text__M
#include "../../pollen.text/Text/Text.h"
#endif

#ifndef local_output_SendOsc__M
#define local_output_SendOsc__M
#include "../../local.output/SendOsc/SendOsc.h"
#endif

#ifndef local_parts_ColorLed__M
#define local_parts_ColorLed__M
#include "../../local.parts/ColorLed/ColorLed.h"
#endif

#ifndef pollen_parts_Led0__M
#define pollen_parts_Led0__M
#include "../../pollen.parts/Led0/Led0.h"
#endif

#ifndef pollen_parts_Led1__M
#define pollen_parts_Led1__M
#include "../../pollen.parts/Led1/Led1.h"
#endif

#ifndef pollen_parts_Led2__M
#define pollen_parts_Led2__M
#include "../../pollen.parts/Led2/Led2.h"
#endif

#ifndef pollen_event_Event__M
#define pollen_event_Event__M
#include "../../pollen.event/Event/Event.h"
#endif

#ifndef pollen_event_EventQueue__M
#define pollen_event_EventQueue__M
#include "../../pollen.event/EventQueue/EventQueue.h"
#endif

#ifndef pollen_event_Newsroom__M
#define pollen_event_Newsroom__M
#include "../../pollen.event/Newsroom/Newsroom.h"
#endif

#ifndef pollen_time_Timer__M
#define pollen_time_Timer__M
#include "../../pollen.time/Timer/Timer.h"
#endif

#ifndef pollen_time_TimerManager__M
#define pollen_time_TimerManager__M
#include "../../pollen.time/TimerManager/TimerManager.h"
#endif

#ifndef localhost_Lifecycle__M
#define localhost_Lifecycle__M
#include "../../localhost/Lifecycle/Lifecycle.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

#ifndef test90_Test_03__M
#define test90_Test_03__M
#include "../../test90/Test_03/Test_03.h"
#endif

/*
 * ======== target data definitions (unit Cpu) ========
 */

struct local_mcu_Cpu_ local_mcu_Cpu = { /* module data */
    (uint32)0x0,             /* sysFreq */
};

/*
 * ======== target data definitions (unit GlobalInterrupts) ========
 */

struct local_mcu_GlobalInterrupts_ local_mcu_GlobalInterrupts = { /* module data */
    false,                   /* enabled */
};

/*
 * ======== target data definitions (unit TimerMilli) ========
 */

struct local_mcu_TimerMilli_ local_mcu_TimerMilli = { /* module data */
    pollen_time_TimerManager_tickISR__I,    /* tickHandler */
    false,                   /* repeat */
};

/*
 * ======== target data definitions (unit Pin0) ========
 */

struct local_mcu_Pin0_ local_mcu_Pin0 = { /* module data */
    null,                    /* name */
    (uint8)0x0,              /* num */
    (bool)0x0,               /* state */
    (bool)0x0,               /* input */
    "Pin0",                  /* pollen__unitname */
};

/*
 * ======== target data definitions (unit Pin1) ========
 */

struct local_mcu_Pin1_ local_mcu_Pin1 = { /* module data */
    null,                    /* name */
    (uint8)0x0,              /* num */
    (bool)0x0,               /* state */
    (bool)0x0,               /* input */
    "Pin1",                  /* pollen__unitname */
};

/*
 * ======== target data definitions (unit Pin2) ========
 */

struct local_mcu_Pin2_ local_mcu_Pin2 = { /* module data */
    null,                    /* name */
    (uint8)0x0,              /* num */
    (bool)0x0,               /* state */
    (bool)0x0,               /* input */
    "Pin2",                  /* pollen__unitname */
};

/*
 * ======== target data definitions (unit ConsolePrint) ========
 */

struct local_mcu_ConsolePrint_ local_mcu_ConsolePrint = { /* module data */
    "[95m",                 /* HEADER */
    "[94m",                 /* OKBLUE */
    "[92m",                 /* OKGREEN */
    "[93m",                 /* WARNING */
    "[91m",                 /* FAIL */
    "[0m",                  /* ENDC */
};

/*
 * ======== target data definitions (unit Random8) ========
 */

struct pollen_math_Random8_ pollen_math_Random8 = { /* module data */
    (uint8)0xac,             /* seed */
    (uint8)0xac,             /* lfsr */
    (uint8)0x0,              /* period */
};

/*
 * ======== target data definitions (unit Random16) ========
 */

struct pollen_math_Random16_ pollen_math_Random16 = { /* module data */
    (uint16)0xace1,          /* seed */
    (uint16)0xace1,          /* lfsr */
    (uint16)0x0,             /* period */
};

/*
 * ======== target data definitions (unit Text) ========
 */

struct pollen_text_Text_ pollen_text_Text = { /* module data */
};

/*
 * ======== target data definitions (unit SendOsc) ========
 */

struct local_output_SendOsc_ local_output_SendOsc = { /* module data */
    "oscsend 127.0.0.1 7000 /led/1 iii ",    /* header */
    {
        (byte)0x0,  /* [0] */
        (byte)0x0,  /* [1] */
        (byte)0x0,  /* [2] */
        (byte)0x0,  /* [3] */
        (byte)0x0,  /* [4] */
        (byte)0x0,  /* [5] */
        (byte)0x0,  /* [6] */
        (byte)0x0,  /* [7] */
        (byte)0x0,  /* [8] */
        (byte)0x0,  /* [9] */
        (byte)0x0,  /* [10] */
        (byte)0x0,  /* [11] */
        (byte)0x0,  /* [12] */
        (byte)0x0,  /* [13] */
        (byte)0x0,  /* [14] */
        (byte)0x0,  /* [15] */
        (byte)0x0,  /* [16] */
        (byte)0x0,  /* [17] */
        (byte)0x0,  /* [18] */
        (byte)0x0,  /* [19] */
        (byte)0x0,  /* [20] */
        (byte)0x0,  /* [21] */
        (byte)0x0,  /* [22] */
        (byte)0x0,  /* [23] */
        (byte)0x0,  /* [24] */
        (byte)0x0,  /* [25] */
        (byte)0x0,  /* [26] */
        (byte)0x0,  /* [27] */
        (byte)0x0,  /* [28] */
        (byte)0x0,  /* [29] */
        (byte)0x0,  /* [30] */
        (byte)0x0,  /* [31] */
        (byte)0x0,  /* [32] */
        (byte)0x0,  /* [33] */
        (byte)0x0,  /* [34] */
        (byte)0x0,  /* [35] */
        (byte)0x0,  /* [36] */
        (byte)0x0,  /* [37] */
        (byte)0x0,  /* [38] */
        (byte)0x0,  /* [39] */
        (byte)0x0,  /* [40] */
        (byte)0x0,  /* [41] */
        (byte)0x0,  /* [42] */
        (byte)0x0,  /* [43] */
        (byte)0x0,  /* [44] */
        (byte)0x0,  /* [45] */
        (byte)0x0,  /* [46] */
        (byte)0x0,  /* [47] */
        (byte)0x0,  /* [48] */
        (byte)0x0,  /* [49] */
    },    /* data */
};

/*
 * ======== host data definitions (unit ColorLed) ========
 */

local_parts_ColorLed_state__TYPE local_parts_ColorLed_state__V = /* bijou.parts.LedState object init */
{
    (uint8)0x0,              /* id */
    {
        (uint8)0x0,  /* [0] */
        (uint8)0x0,  /* [1] */
        (uint8)0x0,  /* [2] */
        (uint8)0x0,  /* [3] */
    },    /* rgba */
};

/*
 * ======== target data definitions (unit ColorLed) ========
 */

struct local_parts_ColorLed_ local_parts_ColorLed = { /* module data */
};

/*
 * ======== target data definitions (unit Led0) ========
 */

struct pollen_parts_Led0_ pollen_parts_Led0 = { /* module data */
    &local_mcu_Pin0,         /* pin */
};

/*
 * ======== target data definitions (unit Led1) ========
 */

struct pollen_parts_Led1_ pollen_parts_Led1 = { /* module data */
    &local_mcu_Pin1,         /* pin */
};

/*
 * ======== target data definitions (unit Led2) ========
 */

struct pollen_parts_Led2_ pollen_parts_Led2 = { /* module data */
    &local_mcu_Pin2,         /* pin */
};

/*
 * ======== host data definitions (unit Newsroom) ========
 */

pollen_event_Newsroom_events__TYPE pollen_event_Newsroom_events__V = /* pollen.event.EventQueue object init */
{
    (uint8)0x1,              /* capacity */
    {
        null,  /* [0] */
    },    /* elements */
    (uint8)0x0,              /* length */
    (uint8)0x0,              /* head */
    (uint8)0x0,              /* tail */
};

/*
 * ======== target data definitions (unit Newsroom) ========
 */

struct pollen_event_Newsroom_ pollen_event_Newsroom = { /* module data */
    &local_mcu_GlobalInterrupts,    /* GI */
};

/*
 * ======== host data definitions (unit TimerManager) ========
 */

const pollen_time_TimerManager_numMsTimers__TYPE pollen_time_TimerManager_numMsTimers__V = (uint8)0x1;

/*
 * ======== target data definitions (unit TimerManager) ========
 */

struct pollen_time_TimerManager_ pollen_time_TimerManager = { /* module data */
    &local_mcu_TimerMilli,    /* hwTimer */
    {
        null,  /* [0] */
    },    /* msTimers */
};

/*
 * ======== target data definitions (unit Lifecycle) ========
 */

struct localhost_Lifecycle_ localhost_Lifecycle = { /* module data */
};

/*
 * ======== target data definitions (unit PrintImpl) ========
 */

struct test54_PrintImpl_ test54_PrintImpl = { /* module data */
};

/*
 * ======== host data definitions (unit Test_03) ========
 */

test90_Test_03_t1__TYPE test90_Test_03_t1__V = /* pollen.time.Timer object init */
{
    null,                    /* eventHandler */
    /* pollen.event.Event object init */
    {
        test90_Test_03_tick__I,    /* eventHandler */
    },                        /* tickEvent */
    false,                   /* active */
    false,                   /* periodic */
    (uint16)0x0,             /* duration */
    (uint16)0x0,             /* tickCount */
    false,                   /* added */
};

/*
 * ======== target data definitions (unit Test_03) ========
 */

struct test90_Test_03_ test90_Test_03 = { /* module data */
    (uint32)0x0,             /* count */
    &test54_PrintImpl,    /* pollenPrintProxy */
};

/*
 * ======== pollen print ========
 */

void test90_Test_03_pollen__printBool(bool b) {
    test54_PrintImpl_printBool__E(b);
}
void test90_Test_03_pollen__printInt(int32 i) {
    test54_PrintImpl_printInt__E(i);
}
void test90_Test_03_pollen__printReal(float f) {
    test54_PrintImpl_printReal__E(f);
}
void test90_Test_03_pollen__printUint(uint32 u) {
    test54_PrintImpl_printUint__E(u);
}
void test90_Test_03_pollen__printStr(string s) {
    test54_PrintImpl_printStr__E(s);
}

/*
 * ======== module functions ========
 */

#include "../../local.mcu/Cpu/Cpu.c"
#include "../../local.mcu/GlobalInterrupts/GlobalInterrupts.c"
#include "../../local.mcu/TimerMilli/TimerMilli.c"
#include "../../local.mcu/Pin0/Pin0.c"
#include "../../local.mcu/Pin1/Pin1.c"
#include "../../local.mcu/Pin2/Pin2.c"
#include "../../local.mcu/ConsolePrint/ConsolePrint.c"
#include "../../pollen.math/Random8/Random8.c"
#include "../../pollen.math/Random16/Random16.c"
#include "../../bijou.parts/LedState/LedState.c"
#include "../../pollen.text/Text/Text.c"
#include "../../local.output/SendOsc/SendOsc.c"
#include "../../local.parts/ColorLed/ColorLed.c"
#include "../../pollen.parts/Led0/Led0.c"
#include "../../pollen.parts/Led1/Led1.c"
#include "../../pollen.parts/Led2/Led2.c"
#include "../../pollen.event/Event/Event.c"
#include "../../pollen.event/EventQueue/EventQueue.c"
#include "../../pollen.event/Newsroom/Newsroom.c"
#include "../../pollen.time/Timer/Timer.c"
#include "../../pollen.time/TimerManager/TimerManager.c"
#include "../../localhost/Lifecycle/Lifecycle.c"
#include "../../test54/PrintImpl/PrintImpl.c"
#include "../../test90/Test_03/Test_03.c"

/*
 * ======== main() ========
 */

int main() {
    localhost_Lifecycle_pollen__reset__E();
    local_mcu_Cpu_targetInit__I();
    local_mcu_GlobalInterrupts_targetInit__I();
    local_mcu_TimerMilli_targetInit__I();
    local_mcu_Pin0_targetInit__I();
    local_mcu_Pin1_targetInit__I();
    local_mcu_Pin2_targetInit__I();
    local_mcu_ConsolePrint_targetInit__I();
    pollen_math_Random8_targetInit__I();
    pollen_math_Random16_targetInit__I();
    pollen_text_Text_targetInit__I();
    local_output_SendOsc_targetInit__I();
    local_parts_ColorLed_targetInit__I();
    pollen_parts_Led0_targetInit__E();
    pollen_parts_Led1_targetInit__E();
    pollen_parts_Led2_targetInit__E();
    pollen_event_Newsroom_targetInit__I();
    pollen_time_TimerManager_targetInit__I();
    localhost_Lifecycle_targetInit__I();
    test54_PrintImpl_targetInit__I();
    test90_Test_03_targetInit__I();
    localhost_Lifecycle_pollen__ready__E();
    test90_Test_03_pollen__run__E();
    localhost_Lifecycle_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test90_Test_03__s__fileName[] = "Test_03.p";
static const char test90_Test_03__s__0[] = "Done!\n";
static const char test90_Test_03__s__1[] = "Test_03";

/*
 * ======== code injections ========
 */

 #include <stdlib.h> 

/*
 * ======== function definitions ========
 */

void test90_Test_03_pollen__run__E() {
    pollen_time_Timer_Timer_start__E(&(test90_Test_03_t1__V), 500);
    pollen_event_Newsroom_run__E();
}

void test90_Test_03_tick__I() {
    pollen_parts_Led0_toggle__E();
    (test90_Test_03_count__V)++;
    if ((test90_Test_03_count__V) > 10) {
        test90_Test_03_pollen__printStr((string)test90_Test_03__s__0);
         exit(0) ;

    }
}

void test90_Test_03_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef local_mcu_TimerMilli__M
#define local_mcu_TimerMilli__M
#include "../../local.mcu/TimerMilli/TimerMilli.h"
#endif

#ifndef local_mcu_GlobalInterrupts__M
#define local_mcu_GlobalInterrupts__M
#include "../../local.mcu/GlobalInterrupts/GlobalInterrupts.h"
#endif

#ifndef local_mcu_ConsolePrint__M
#define local_mcu_ConsolePrint__M
#include "../../local.mcu/ConsolePrint/ConsolePrint.h"
#endif

#ifndef local_parts_ColorLed__M
#define local_parts_ColorLed__M
#include "../../local.parts/ColorLed/ColorLed.h"
#endif

#ifndef pollen_parts_Led0__M
#define pollen_parts_Led0__M
#include "../../pollen.parts/Led0/Led0.h"
#endif

#ifndef pollen_parts_Led1__M
#define pollen_parts_Led1__M
#include "../../pollen.parts/Led1/Led1.h"
#endif

#ifndef pollen_parts_Led2__M
#define pollen_parts_Led2__M
#include "../../pollen.parts/Led2/Led2.h"
#endif

#ifndef pollen_event_Newsroom__M
#define pollen_event_Newsroom__M
#include "../../pollen.event/Newsroom/Newsroom.h"
#endif

#ifndef pollen_time_TimerManager__M
#define pollen_time_TimerManager__M
#include "../../pollen.time/TimerManager/TimerManager.h"
#endif

#ifndef localhost_Lifecycle__M
#define localhost_Lifecycle__M
#include "../../localhost/Lifecycle/Lifecycle.h"
#endif

#ifndef pollen_time_Timer__M
#define pollen_time_Timer__M
#include "../../pollen.time/Timer/Timer.h"
#endif

#ifndef test54_PrintImpl__M
#define test54_PrintImpl__M
#include "../../test54/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void localhost_Lifecycle_pollen__reset__E();
void localhost_Lifecycle_pollen__ready__E();
void localhost_Lifecycle_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test90_Test_03_ test90_Test_03;

/*
 * ======== struct module definition (unit Test_03) ========
 */

struct pollen_time_Timer;
struct test54_PrintImpl_;
struct test90_Test_03_ {
    uint32 count;
    struct test54_PrintImpl_ *pollenPrintProxy;
};
typedef struct test90_Test_03_ test90_Test_03_;

/*
 * ======== host variables (unit Test_03) ========
 */

typedef struct pollen_time_Timer test90_Test_03_t1__TYPE;
extern test90_Test_03_t1__TYPE test90_Test_03_t1__V;

/*
 * ======== function members (unit Test_03) ========
 */

extern void test90_Test_03_pollen__run__E();
extern void test90_Test_03_tick__I();
extern void test90_Test_03_targetInit__I();

/*
 * ======== data members (unit Test_03) ========
 */

#define test90_Test_03_t1__V test90_Test_03_t1
#define test90_Test_03_count__V test90_Test_03.count
#define test90_Test_03_pollenPrintProxy__V test90_Test_03.pollenPrintProxy

/*
 * ======== CLASS bijou.parts.LedState ========
 */

var $$c = function() {
    const LedState = {};
    LedState.LedState = LedState
    LedState.$name = 'bijou.parts.LedState';
    LedState.pollen$used = 0;
    LedState.LedState$$id = 1;
    LedState.LedState = function(cn) {
        this.$$id = LedState.LedState$$id++;
        this.$$cname = cn ? cn : 'bijou_parts_LedState_LedState__'+this.$$id+'__S';
        this.$$tname = 'bijou_parts_LedState_LedState';
        this.$$uname = 'bijou.parts.LedState';
        this.id = 0;
    }
    LedState.LedState.prototype = new $$Struct('bijou.parts.LedState.LedState');
    LedState.LedState.prototype.$$isAggFld = {};
    LedState.LedState.prototype.$$isAggFld.id = false;
    LedState.LedState.prototype.$$isAggFld.rgba = true;
    LedState.LedState.prototype.new_host = function( id ) {
        var $$text = '';
        this.$$privateInit();
        this.rgba = new $$Array(4, function($$cn,$$idx){ return 0;}, 'bijou_parts_LedState_rgba__A', false); this.rgba.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0 ]));
        if (arguments.length == 1) {
                this.id = (id);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Red), 0);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Green), 0);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Blue), 0);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Alpha), 255);
        }
        this.$$hostInitLastPass();
        return this;
    }
    LedState.pollen__uses__ = function() {
        $$bind($units['local.mcu.Cpu'], 'pollen$used', true);
        $$bind($units['local.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['local.mcu.TimerMilli'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin0'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin1'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin2'], 'pollen$used', true);
        $$bind($units['local.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['local.parts.ColorLed'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led0'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led1'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led2'], 'pollen$used', true);
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
        $$bind($units['localhost.Lifecycle'], 'pollen$used', true);
        $$bind($units['pollen.math.Random8'], 'pollen$used', true);
        $$bind($units['pollen.math.Random16'], 'pollen$used', true);
    }
    LedState.LedState.prototype.$$privateInit = function() {
        this.id = 0;
        this.rgba = new $$Array(4, function($$cn,$$idx){ return 0;}, 'bijou_parts_LedState_rgba__A', false); this.rgba.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0 ]));
    }
    LedState.LedState.prototype.$$hostInitLastPass = function() {
    }
    return LedState;
}
var $$u = $$c();
$units['bijou.parts.LedState'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.mcu.ConsolePrint ========
 */

var $$c = function() {
    const ConsolePrint = {};
    ConsolePrint.ConsolePrint = ConsolePrint
    ConsolePrint.$name = 'local.mcu.ConsolePrint';
    ConsolePrint.pollen$used = 0;
    ConsolePrint.printBool = new $$Ref('local_mcu_ConsolePrint_printBool__E');
    ConsolePrint.printInt = new $$Ref('local_mcu_ConsolePrint_printInt__E');
    ConsolePrint.printReal = new $$Ref('local_mcu_ConsolePrint_printReal__E');
    ConsolePrint.printUint = new $$Ref('local_mcu_ConsolePrint_printUint__E');
    ConsolePrint.printStr = new $$Ref('local_mcu_ConsolePrint_printStr__E');
    ConsolePrint.targetInit = new $$Ref('local_mcu_ConsolePrint_targetInit__I');
    ConsolePrint.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    ConsolePrint.pollen__uses__ = function() {
    }
    ConsolePrint.$$privateInit = function() {
        ConsolePrint.HEADER = "\033[95m";
        ConsolePrint.OKBLUE = "\033[94m";
        ConsolePrint.OKGREEN = "\033[92m";
        ConsolePrint.WARNING = "\033[93m";
        ConsolePrint.FAIL = "\033[91m";
        ConsolePrint.ENDC = "\033[0m";
    }
    return ConsolePrint;
}
var $$u = $$c();
$units['local.mcu.ConsolePrint'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.mcu.Cpu ========
 */

var $$c = function() {
    const Cpu = {};
    Cpu.Cpu = Cpu
    Cpu.$name = 'local.mcu.Cpu';
    Cpu.pollen$used = 0;
    Cpu.reset = new $$Ref('local_mcu_Cpu_reset__E');
    Cpu.shutdown = new $$Ref('local_mcu_Cpu_shutdown__E');
    Cpu.wait = new $$Ref('local_mcu_Cpu_wait__E');
    Cpu.cycle = new $$Ref('local_mcu_Cpu_cycle__E');
    Cpu.getFrequency = new $$Ref('local_mcu_Cpu_getFrequency__E');
    Cpu.setFrequency = new $$Ref('local_mcu_Cpu_setFrequency__E');
    Cpu.targetInit = new $$Ref('local_mcu_Cpu_targetInit__I');
    Cpu.getFrequencyOnHost = function() {
        var $$text = '';
        return(  (Cpu.sysFreq)  );
        return $$text;
    }
    Cpu.setFrequencyOnHost = function( hz ) {
        var $$text = '';
        (Cpu.sysFreq) = (hz);
        return $$text;
    }
    Cpu.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Cpu.pollen__uses__ = function() {
    }
    Cpu.$$privateInit = function() {
        Cpu.sysFreq = 0;
    }
    return Cpu;
}
var $$u = $$c();
$units['local.mcu.Cpu'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.mcu.GlobalInterrupts ========
 */

var $$c = function() {
    const GlobalInterrupts = {};
    GlobalInterrupts.GlobalInterrupts = GlobalInterrupts
    GlobalInterrupts.$name = 'local.mcu.GlobalInterrupts';
    GlobalInterrupts.pollen$used = 0;
    GlobalInterrupts.enable = new $$Ref('local_mcu_GlobalInterrupts_enable__E');
    GlobalInterrupts.disable = new $$Ref('local_mcu_GlobalInterrupts_disable__E');
    GlobalInterrupts.restore = new $$Ref('local_mcu_GlobalInterrupts_restore__E');
    GlobalInterrupts.isEnabled = new $$Ref('local_mcu_GlobalInterrupts_isEnabled__E');
    GlobalInterrupts.targetInit = new $$Ref('local_mcu_GlobalInterrupts_targetInit__I');
    GlobalInterrupts.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    GlobalInterrupts.pollen__uses__ = function() {
    }
    GlobalInterrupts.$$privateInit = function() {
        GlobalInterrupts.enabled = false;
    }
    return GlobalInterrupts;
}
var $$u = $$c();
$units['local.mcu.GlobalInterrupts'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.mcu.Pin0 ========
 */

var $$c = function() {
    const Pin0 = {};
    Pin0.Pin0 = Pin0
    Pin0.$name = 'local.mcu.Pin0';
    Pin0.pollen$used = 0;
    Pin0.targetInit = new $$Ref('local_mcu_Pin0_targetInit__I');
    Pin0.set = new $$Ref('local_mcu_Pin0_set__E');
    Pin0.clear = new $$Ref('local_mcu_Pin0_clear__E');
    Pin0.toggle = new $$Ref('local_mcu_Pin0_toggle__E');
    Pin0.get = new $$Ref('local_mcu_Pin0_get__E');
    Pin0.makeInput = new $$Ref('local_mcu_Pin0_makeInput__E');
    Pin0.isInput = new $$Ref('local_mcu_Pin0_isInput__E');
    Pin0.makeOutput = new $$Ref('local_mcu_Pin0_makeOutput__E');
    Pin0.isOutput = new $$Ref('local_mcu_Pin0_isOutput__E');
    Pin0.pname = "Pin";
    Pin0.pnum = 0;
    Pin0.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Pin0.pollen__uses__ = function() {
    }
    Pin0.$$privateInit = function() {
        Pin0.name = null;
        Pin0.num = 0;
        Pin0.state = 0;
        Pin0.input = 0;
        Pin0.pollen__unitname = "Pin0";
    }
    return Pin0;
}
var $$u = $$c();
$units['local.mcu.Pin0'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.mcu.Pin1 ========
 */

var $$c = function() {
    const Pin1 = {};
    Pin1.Pin1 = Pin1
    Pin1.$name = 'local.mcu.Pin1';
    Pin1.pollen$used = 0;
    Pin1.targetInit = new $$Ref('local_mcu_Pin1_targetInit__I');
    Pin1.set = new $$Ref('local_mcu_Pin1_set__E');
    Pin1.clear = new $$Ref('local_mcu_Pin1_clear__E');
    Pin1.toggle = new $$Ref('local_mcu_Pin1_toggle__E');
    Pin1.get = new $$Ref('local_mcu_Pin1_get__E');
    Pin1.makeInput = new $$Ref('local_mcu_Pin1_makeInput__E');
    Pin1.isInput = new $$Ref('local_mcu_Pin1_isInput__E');
    Pin1.makeOutput = new $$Ref('local_mcu_Pin1_makeOutput__E');
    Pin1.isOutput = new $$Ref('local_mcu_Pin1_isOutput__E');
    Pin1.pname = "Pin";
    Pin1.pnum = 1;
    Pin1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Pin1.pollen__uses__ = function() {
    }
    Pin1.$$privateInit = function() {
        Pin1.name = null;
        Pin1.num = 0;
        Pin1.state = 0;
        Pin1.input = 0;
        Pin1.pollen__unitname = "Pin1";
    }
    return Pin1;
}
var $$u = $$c();
$units['local.mcu.Pin1'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.mcu.Pin2 ========
 */

var $$c = function() {
    const Pin2 = {};
    Pin2.Pin2 = Pin2
    Pin2.$name = 'local.mcu.Pin2';
    Pin2.pollen$used = 0;
    Pin2.targetInit = new $$Ref('local_mcu_Pin2_targetInit__I');
    Pin2.set = new $$Ref('local_mcu_Pin2_set__E');
    Pin2.clear = new $$Ref('local_mcu_Pin2_clear__E');
    Pin2.toggle = new $$Ref('local_mcu_Pin2_toggle__E');
    Pin2.get = new $$Ref('local_mcu_Pin2_get__E');
    Pin2.makeInput = new $$Ref('local_mcu_Pin2_makeInput__E');
    Pin2.isInput = new $$Ref('local_mcu_Pin2_isInput__E');
    Pin2.makeOutput = new $$Ref('local_mcu_Pin2_makeOutput__E');
    Pin2.isOutput = new $$Ref('local_mcu_Pin2_isOutput__E');
    Pin2.pname = "Pin";
    Pin2.pnum = 2;
    Pin2.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Pin2.pollen__uses__ = function() {
    }
    Pin2.$$privateInit = function() {
        Pin2.name = null;
        Pin2.num = 0;
        Pin2.state = 0;
        Pin2.input = 0;
        Pin2.pollen__unitname = "Pin2";
    }
    return Pin2;
}
var $$u = $$c();
$units['local.mcu.Pin2'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.mcu.TimerMilli ========
 */

var $$c = function() {
    const TimerMilli = {};
    TimerMilli.TimerMilli = TimerMilli
    TimerMilli.$name = 'local.mcu.TimerMilli';
    TimerMilli.pollen$used = 0;
    TimerMilli.targetInit = new $$Ref('local_mcu_TimerMilli_targetInit__I');
    TimerMilli.setHandler = new $$Ref('local_mcu_TimerMilli_setHandler__E');
    TimerMilli.start = new $$Ref('local_mcu_TimerMilli_start__E');
    TimerMilli.stop = new $$Ref('local_mcu_TimerMilli_stop__E');
    TimerMilli.isRunning = new $$Ref('local_mcu_TimerMilli_isRunning__E');
    TimerMilli.resetTimer = new $$Ref('local_mcu_TimerMilli_resetTimer__I');
    TimerMilli.sigAlarm = new $$Ref('local_mcu_TimerMilli_sigAlarm__I');
    TimerMilli.setHandlerOnHost = function( h ) {
        var $$text = '';
        (TimerMilli.tickHandler) = (h);
        return $$text;
    }
    TimerMilli.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    TimerMilli.pollen__uses__ = function() {
    }
    TimerMilli.$$privateInit = function() {
        TimerMilli.repeat = false;
    }
    return TimerMilli;
}
var $$u = $$c();
$units['local.mcu.TimerMilli'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.output.SendOsc ========
 */

var $$c = function() {
    const SendOsc = {};
    SendOsc.SendOsc = SendOsc
    SendOsc.$name = 'local.output.SendOsc';
    SendOsc.pollen$used = 0;
    SendOsc.Text = $units['pollen.text.Text'];
    SendOsc.sendRGB = new $$Ref('local_output_SendOsc_sendRGB__E');
    SendOsc.sprint = new $$Ref('local_output_SendOsc_sprint__I');
    SendOsc.targetInit = new $$Ref('local_output_SendOsc_targetInit__I');
    SendOsc.$$hostInit = function() {
        var $$text = '';
        SendOsc.data = new $$Array(50, function($$cn,$$idx){ return 0;}, 'local_output_SendOsc_data__A', false); SendOsc.data.$$assign((new $$Array(50, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]));
        return $$text;
    }
    SendOsc.pollen__uses__ = function() {
        $$bind($units['pollen.text.Text'], 'pollen$used', true);
    }
    SendOsc.$$privateInit = function() {
        SendOsc.header = "oscsend 127.0.0.1 7000 /led/1 iii ";
        SendOsc.data = new $$Array(50, function($$cn,$$idx){ return 0;}, 'local_output_SendOsc_data__A', false); SendOsc.data.$$assign((new $$Array(50, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]));
    }
    return SendOsc;
}
var $$u = $$c();
$units['local.output.SendOsc'] = $$u;
$units.push($$u);


/*
 * ======== MODULE local.parts.ColorLed ========
 */

var $$c = function() {
    const ColorLed = {};
    ColorLed.ColorLed = ColorLed
    ColorLed.$name = 'local.parts.ColorLed';
    ColorLed.pollen$used = 0;
    ColorLed.LedState = $units['bijou.parts.LedState'];
    ColorLed.SendOsc = $units['local.output.SendOsc'];
    ColorLed.targetInit = new $$Ref('local_parts_ColorLed_targetInit__I');
    ColorLed.setState = new $$Ref('local_parts_ColorLed_setState__E');
    ColorLed.setRGBA = new $$Ref('local_parts_ColorLed_setRGBA__E');
    ColorLed.setRGB = new $$Ref('local_parts_ColorLed_setRGB__E');
    ColorLed.getRGB = new $$Ref('local_parts_ColorLed_getRGB__E');
    ColorLed.getRGBA = new $$Ref('local_parts_ColorLed_getRGBA__E');
    ColorLed.doSetColor = new $$Ref('local_parts_ColorLed_doSetColor__I');
    ColorLed.$$hostInit = function() {
        var $$text = '';
        ColorLed.state = new $units['bijou.parts.LedState'].LedState('local_parts_ColorLed_state__V'); ColorLed.state.new_host(0);
        return $$text;
    }
    ColorLed.pollen__uses__ = function() {
        $$bind($units['bijou.parts.LedState'], 'pollen$used', true);
        $$bind($units['local.output.SendOsc'], 'pollen$used', true);
    }
    ColorLed.$$privateInit = function() {
    }
    return ColorLed;
}
var $$u = $$c();
$units['local.parts.ColorLed'] = $$u;
$units.push($$u);


/*
 * ======== MODULE localhost.Lifecycle ========
 */

var $$c = function() {
    const Lifecycle = {};
    Lifecycle.Lifecycle = Lifecycle
    Lifecycle.$name = 'localhost.Lifecycle';
    Lifecycle.pollen$used = 0;
    Lifecycle.pollen__reset = new $$Ref('localhost_Lifecycle_pollen__reset__E');
    Lifecycle.pollen__ready = new $$Ref('localhost_Lifecycle_pollen__ready__E');
    Lifecycle.pollen__shutdown = new $$Ref('localhost_Lifecycle_pollen__shutdown__E');
    Lifecycle.targetInit = new $$Ref('localhost_Lifecycle_targetInit__I');
    Lifecycle.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Lifecycle.pollen__uses__ = function() {
        $$bind($units['local.mcu.Cpu'], 'pollen$used', true);
        $$bind($units['local.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['local.mcu.TimerMilli'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin0'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin1'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin2'], 'pollen$used', true);
        $$bind($units['local.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['local.parts.ColorLed'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led0'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led1'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led2'], 'pollen$used', true);
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
        $$bind($units['localhost.Lifecycle'], 'pollen$used', true);
    }
    Lifecycle.$$privateInit = function() {
    }
    return Lifecycle;
}
var $$u = $$c();
$units['localhost.Lifecycle'] = $$u;
$units.push($$u);


/*
 * ======== COMPOSITION localhost.LocalHost ========
 */

var $$c = function() {
    const LocalHost = {};
    LocalHost.LocalHost = LocalHost
    LocalHost.$name = 'localhost.LocalHost';
    LocalHost.pollen$used = 0;
    LocalHost.TimerMilli = $units['local.mcu.TimerMilli'];
    LocalHost.GlobalInterrupts = $units['local.mcu.GlobalInterrupts'];
    LocalHost.ConsolePrint = $units['local.mcu.ConsolePrint'];
    LocalHost.ColorLed = $units['local.parts.ColorLed'];
    LocalHost.Led0 = $units['pollen.parts.Led0'];
    LocalHost.Led1 = $units['pollen.parts.Led1'];
    LocalHost.Led2 = $units['pollen.parts.Led2'];
    LocalHost.Newsroom = $units['pollen.event.Newsroom'];
    LocalHost.TimerManager = $units['pollen.time.TimerManager'];
    LocalHost.Lifecycle = $units['localhost.Lifecycle'];
    LocalHost.pollen__presets__ = function() {
        var $$text = '';
        var $$v = 'local_mcu_GlobalInterrupts';
        var $$s = $$bind($units['localhost.LocalHost'], 'Newsroom.GI', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.GlobalInterrupts'].pollen$used = true;}

        var $$v = 'local_mcu_TimerMilli';
        var $$s = $$bind($units['localhost.LocalHost'], 'TimerManager.hwTimer', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.TimerMilli'].pollen$used = true;}

        var $$v = 'local_mcu_Pin0';
        var $$s = $$bind($units['localhost.LocalHost'], 'Led0.pin', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.Pin0'].pollen$used = true;}

        var $$v = 'local_mcu_Pin1';
        var $$s = $$bind($units['localhost.LocalHost'], 'Led1.pin', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.Pin1'].pollen$used = true;}

        var $$v = 'local_mcu_Pin2';
        var $$s = $$bind($units['localhost.LocalHost'], 'Led2.pin', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.Pin2'].pollen$used = true;}

        var $$v = 'local_mcu_ConsolePrint';
        var $$s = $$bind($units['localhost.LocalHost'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.ConsolePrint'].pollen$used = true;}

        return $$text;
    }
    return LocalHost;
}
var $$u = $$c();
$units['localhost.LocalHost'] = $$u;
$units.push($$u);


/*
 * ======== CLASS pollen.event.Event ========
 */

var $$c = function() {
    const Event = {};
    Event.Event = Event
    Event.$name = 'pollen.event.Event';
    Event.pollen$used = 0;
    Event.Newsroom = $units['pollen.event.Newsroom'];
    Event.Event$$id = 1;
    Event.Event = function(cn) {
        this.$$id = Event.Event$$id++;
        this.$$cname = cn ? cn : 'pollen_event_Event_Event__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_Event_Event';
        this.$$uname = 'pollen.event.Event';
        this.eventHandler = null;
    }
    Event.Event.prototype = new $$Struct('pollen.event.Event.Event');
    Event.Event.prototype.$$isAggFld = {};
    Event.Event.prototype.$$isAggFld.eventHandler = false;
    Event.Event.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                this.eventHandler = (h);
                $units['pollen.event.Newsroom'].registerEventOnHost();
        }
        this.$$hostInitLastPass();
        return this;
    }
    Event.Event.prototype.setHandlerOnHost = function( h ) {
        var $$text = '';
        this.eventHandler = (h);
        $units['pollen.event.Newsroom'].registerEventOnHost();
        this.$$hostInitLastPass();
        return $$text;
    }
    Event.pollen__uses__ = function() {
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
    }
    Event.Event.prototype.$$privateInit = function() {
    }
    Event.Event.prototype.$$hostInitLastPass = function() {
    }
    return Event;
}
var $$u = $$c();
$units['pollen.event.Event'] = $$u;
$units.push($$u);


/*
 * ======== CLASS pollen.event.EventQueue ========
 */

var $$c = function() {
    const EventQueue = {};
    EventQueue.EventQueue = EventQueue
    EventQueue.$name = 'pollen.event.EventQueue';
    EventQueue.pollen$used = 0;
    EventQueue.Event = $units['pollen.event.Event'];
    EventQueue.EventQueue$$id = 1;
    EventQueue.EventQueue = function(cn) {
        this.$$id = EventQueue.EventQueue$$id++;
        this.$$cname = cn ? cn : 'pollen_event_EventQueue_EventQueue__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_EventQueue_EventQueue';
        this.$$uname = 'pollen.event.EventQueue';
        this.capacity = 1;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
    }
    EventQueue.EventQueue.prototype = new $$Struct('pollen.event.EventQueue.EventQueue');
    EventQueue.EventQueue.prototype.$$isAggFld = {};
    EventQueue.EventQueue.prototype.$$isAggFld.capacity = false;
    EventQueue.EventQueue.prototype.$$isAggFld.elements = true;
    EventQueue.EventQueue.prototype.$$isAggFld.length = false;
    EventQueue.EventQueue.prototype.$$isAggFld.head = false;
    EventQueue.EventQueue.prototype.$$isAggFld.tail = false;
    EventQueue.EventQueue.prototype.new_host = function( max ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                this.length = 0;
                this.head = 0;
                this.tail = 0;
                this.capacity = (max);
        }
        this.$$hostInitLastPass();
        return this;
    }
    EventQueue.EventQueue.prototype.setCapacityOnHost = function( capacity ) {
        var $$text = '';
        this.capacity = (capacity);
        $$printf("EventQueue: setting new capacity =", this.capacity, "\n");
        this.$$hostInitLastPass();
        return $$text;
    }
    EventQueue.EventQueue.prototype.getCapacityOnHost = function() {
        var $$text = '';
        return(  this.capacity  );
        this.$$hostInitLastPass();
        return $$text;
    }
    EventQueue.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
    }
    EventQueue.EventQueue.prototype.$$privateInit = function() {
        this.capacity = 1;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
    }
    EventQueue.EventQueue.prototype.$$hostInitLastPass = function() {
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_event_EventQueue_elements__A', false); this.elements.$$assign((new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null ]));
    }
    return EventQueue;
}
var $$u = $$c();
$units['pollen.event.EventQueue'] = $$u;
$units.push($$u);


/*
 * ======== pollen.event.HandlerProtocol ========
 */

var $$c = function() {
    const HandlerProtocol = {};
    HandlerProtocol.HandlerProtocol = HandlerProtocol
    HandlerProtocol.$name = 'pollen.event.HandlerProtocol';
    HandlerProtocol.pollen$used = 0;
    HandlerProtocol.pollen__uses__ = function() {
    }
    HandlerProtocol.$$privateInit = function() {
    }
    return HandlerProtocol;
}
var $$u = $$c();
$units['pollen.event.HandlerProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.event.Newsroom ========
 */

var $$c = function() {
    const Newsroom = {};
    Newsroom.Newsroom = Newsroom
    Newsroom.$name = 'pollen.event.Newsroom';
    Newsroom.pollen$used = 0;
    Newsroom.Event = $units['pollen.event.Event'];
    Newsroom.EventQueue = $units['pollen.event.EventQueue'];
    Newsroom.targetInit = new $$Ref('pollen_event_Newsroom_targetInit__I');
    Newsroom.post = new $$Ref('pollen_event_Newsroom_post__E');
    Newsroom.postFromInterrupt = new $$Ref('pollen_event_Newsroom_postFromInterrupt__E');
    Newsroom.run = new $$Ref('pollen_event_Newsroom_run__E');
    Newsroom.dispatch = new $$Ref('pollen_event_Newsroom_dispatch__I');
    Newsroom.$$hostInit = function() {
        var $$text = '';
        Newsroom.events = new $units['pollen.event.EventQueue'].EventQueue('pollen_event_Newsroom_events__V'); Newsroom.events.new_host(0);
        return $$text;
    }
    Newsroom.registerEventOnHost = function() {
        var $$text = '';
        Newsroom.events.setCapacityOnHost(Newsroom.events.getCapacityOnHost() + 1);
        $$printf("Newsroom: event registered. Event capacity = ", Newsroom.events.getCapacityOnHost(), "\n");
        return $$text;
    }
    Newsroom.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
        $$bind($units['pollen.event.EventQueue'], 'pollen$used', true);
    }
    Newsroom.$$privateInit = function() {
        Newsroom.GI = 0;
    }
    return Newsroom;
}
var $$u = $$c();
$units['pollen.event.Newsroom'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.GlobalInterruptsProtocol ========
 */

var $$c = function() {
    const GlobalInterruptsProtocol = {};
    GlobalInterruptsProtocol.GlobalInterruptsProtocol = GlobalInterruptsProtocol
    GlobalInterruptsProtocol.$name = 'pollen.hardware.GlobalInterruptsProtocol';
    GlobalInterruptsProtocol.pollen$used = 0;
    GlobalInterruptsProtocol.pollen__uses__ = function() {
    }
    GlobalInterruptsProtocol.$$privateInit = function() {
    }
    return GlobalInterruptsProtocol;
}
var $$u = $$c();
$units['pollen.hardware.GlobalInterruptsProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.HardwareTimerProtocol ========
 */

var $$c = function() {
    const HardwareTimerProtocol = {};
    HardwareTimerProtocol.HardwareTimerProtocol = HardwareTimerProtocol
    HardwareTimerProtocol.$name = 'pollen.hardware.HardwareTimerProtocol';
    HardwareTimerProtocol.pollen$used = 0;
    HardwareTimerProtocol.pollen__uses__ = function() {
    }
    HardwareTimerProtocol.$$privateInit = function() {
    }
    return HardwareTimerProtocol;
}
var $$u = $$c();
$units['pollen.hardware.HardwareTimerProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.PinProtocol ========
 */

var $$c = function() {
    const PinProtocol = {};
    PinProtocol.PinProtocol = PinProtocol
    PinProtocol.$name = 'pollen.hardware.PinProtocol';
    PinProtocol.pollen$used = 0;
    PinProtocol.pollen__uses__ = function() {
    }
    PinProtocol.$$privateInit = function() {
    }
    return PinProtocol;
}
var $$u = $$c();
$units['pollen.hardware.PinProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.math.Random16 ========
 */

var $$c = function() {
    const Random16 = {};
    Random16.Random16 = Random16
    Random16.$name = 'pollen.math.Random16';
    Random16.pollen$used = 0;
    Random16.srand16 = new $$Ref('pollen_math_Random16_srand16__E');
    Random16.rand16 = new $$Ref('pollen_math_Random16_rand16__E');
    Random16.rand16f = new $$Ref('pollen_math_Random16_rand16f__E');
    Random16.targetInit = new $$Ref('pollen_math_Random16_targetInit__I');
    Random16.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Random16.pollen__uses__ = function() {
    }
    Random16.$$privateInit = function() {
        Random16.seed = 0xACE1;
        Random16.lfsr = (Random16.seed);
        Random16.period = 0;
    }
    return Random16;
}
var $$u = $$c();
$units['pollen.math.Random16'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.math.Random8 ========
 */

var $$c = function() {
    const Random8 = {};
    Random8.Random8 = Random8
    Random8.$name = 'pollen.math.Random8';
    Random8.pollen$used = 0;
    Random8.srand8 = new $$Ref('pollen_math_Random8_srand8__E');
    Random8.rand8 = new $$Ref('pollen_math_Random8_rand8__E');
    Random8.rand8f = new $$Ref('pollen_math_Random8_rand8f__E');
    Random8.targetInit = new $$Ref('pollen_math_Random8_targetInit__I');
    Random8.$$hostInit = function() {
        var $$text = '';
        (Random8.seed) = 0xAC;
        (Random8.lfsr) = (Random8.seed);
        (Random8.period) = 0;
        return $$text;
    }
    Random8.pollen__uses__ = function() {
    }
    Random8.$$privateInit = function() {
        Random8.seed = 0xAC;
        Random8.lfsr = (Random8.seed);
        Random8.period = 0;
    }
    return Random8;
}
var $$u = $$c();
$units['pollen.math.Random8'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.parts.Led0 ========
 */

var $$c = function() {
    const Led0 = {};
    Led0.Led0 = Led0
    Led0.$name = 'pollen.parts.Led0';
    Led0.pollen$used = 0;
    Led0.targetInit = new $$Ref('pollen_parts_Led0_targetInit__E');
    Led0.on = new $$Ref('pollen_parts_Led0_on__E');
    Led0.off = new $$Ref('pollen_parts_Led0_off__E');
    Led0.toggle = new $$Ref('pollen_parts_Led0_toggle__E');
    Led0.isOn = new $$Ref('pollen_parts_Led0_isOn__E');
    Led0.activeLow = false;
    Led0.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Led0.pollen__uses__ = function() {
    }
    Led0.$$privateInit = function() {
        Led0.pin = 0;
    }
    return Led0;
}
var $$u = $$c();
$units['pollen.parts.Led0'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.parts.Led1 ========
 */

var $$c = function() {
    const Led1 = {};
    Led1.Led1 = Led1
    Led1.$name = 'pollen.parts.Led1';
    Led1.pollen$used = 0;
    Led1.targetInit = new $$Ref('pollen_parts_Led1_targetInit__E');
    Led1.on = new $$Ref('pollen_parts_Led1_on__E');
    Led1.off = new $$Ref('pollen_parts_Led1_off__E');
    Led1.toggle = new $$Ref('pollen_parts_Led1_toggle__E');
    Led1.isOn = new $$Ref('pollen_parts_Led1_isOn__E');
    Led1.activeLow = false;
    Led1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Led1.pollen__uses__ = function() {
    }
    Led1.$$privateInit = function() {
        Led1.pin = 0;
    }
    return Led1;
}
var $$u = $$c();
$units['pollen.parts.Led1'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.parts.Led2 ========
 */

var $$c = function() {
    const Led2 = {};
    Led2.Led2 = Led2
    Led2.$name = 'pollen.parts.Led2';
    Led2.pollen$used = 0;
    Led2.targetInit = new $$Ref('pollen_parts_Led2_targetInit__E');
    Led2.on = new $$Ref('pollen_parts_Led2_on__E');
    Led2.off = new $$Ref('pollen_parts_Led2_off__E');
    Led2.toggle = new $$Ref('pollen_parts_Led2_toggle__E');
    Led2.isOn = new $$Ref('pollen_parts_Led2_isOn__E');
    Led2.activeLow = false;
    Led2.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Led2.pollen__uses__ = function() {
    }
    Led2.$$privateInit = function() {
        Led2.pin = 0;
    }
    return Led2;
}
var $$u = $$c();
$units['pollen.parts.Led2'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.text.Text ========
 */

var $$c = function() {
    const Text = {};
    Text.Text = Text
    Text.$name = 'pollen.text.Text';
    Text.pollen$used = 0;
    Text.itoa = new $$Ref('pollen_text_Text_itoa__E');
    Text.reverse = new $$Ref('pollen_text_Text_reverse__E');
    Text.strcmp = new $$Ref('pollen_text_Text_strcmp__E');
    Text.strncmp = new $$Ref('pollen_text_Text_strncmp__E');
    Text.strlen = new $$Ref('pollen_text_Text_strlen__E');
    Text.targetInit = new $$Ref('pollen_text_Text_targetInit__I');
    Text.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Text.pollen__uses__ = function() {
    }
    Text.$$privateInit = function() {
    }
    return Text;
}
var $$u = $$c();
$units['pollen.text.Text'] = $$u;
$units.push($$u);


/*
 * ======== CLASS pollen.time.Timer ========
 */

var $$c = function() {
    const Timer = {};
    Timer.Timer = Timer
    Timer.$name = 'pollen.time.Timer';
    Timer.pollen$used = 0;
    Timer.Event = $units['pollen.event.Event'];
    Timer.TimerManager = $units['pollen.time.TimerManager'];
    Timer.Timer$$id = 1;
    Timer.Timer = function(cn) {
        this.$$id = Timer.Timer$$id++;
        this.$$cname = cn ? cn : 'pollen_time_Timer_Timer__'+this.$$id+'__S';
        this.$$tname = 'pollen_time_Timer_Timer';
        this.$$uname = 'pollen.time.Timer';
        this.eventHandler = null;
        this.active = false;
        this.periodic = false;
        this.duration = 0;
        this.tickCount = 0;
        this.added = false;
    }
    Timer.Timer.prototype = new $$Struct('pollen.time.Timer.Timer');
    Timer.Timer.prototype.$$isAggFld = {};
    Timer.Timer.prototype.$$isAggFld.eventHandler = false;
    Timer.Timer.prototype.$$isAggFld.tickEvent = false;
    Timer.Timer.prototype.$$isAggFld.active = false;
    Timer.Timer.prototype.$$isAggFld.periodic = false;
    Timer.Timer.prototype.$$isAggFld.duration = false;
    Timer.Timer.prototype.$$isAggFld.tickCount = false;
    Timer.Timer.prototype.$$isAggFld.added = false;
    Timer.Timer.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        this.tickEvent = new $units['pollen.event.Event'].Event('pollen_time_Timer_tickEvent__V');
        if (arguments.length == 1) {
                (this.tickEvent) = new $units['pollen.event.Event'].Event().new_host((h));
                $units['pollen.time.TimerManager'].registerTimerOnHost(this);
        }
        this.$$hostInitLastPass();
        return this;
    }
    Timer.Timer.prototype.getDurationOnHost = function() {
        var $$text = '';
        return(  this.duration  );
        this.$$hostInitLastPass();
        return $$text;
    }
    Timer.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
    }
    Timer.Timer.prototype.$$privateInit = function() {
        this.active = false;
        this.periodic = false;
        this.duration = 0;
        this.tickCount = 0;
        this.added = false;
    }
    Timer.Timer.prototype.$$hostInitLastPass = function() {
    }
    return Timer;
}
var $$u = $$c();
$units['pollen.time.Timer'] = $$u;
$units.push($$u);


/*
 * ======== MODULE pollen.time.TimerManager ========
 */

var $$c = function() {
    const TimerManager = {};
    TimerManager.TimerManager = TimerManager
    TimerManager.$name = 'pollen.time.TimerManager';
    TimerManager.pollen$used = 0;
    TimerManager.Timer = $units['pollen.time.Timer'];
    TimerManager.targetInit = new $$Ref('pollen_time_TimerManager_targetInit__I');
    TimerManager.addTimer = new $$Ref('pollen_time_TimerManager_addTimer__E');
    TimerManager.start = new $$Ref('pollen_time_TimerManager_start__E');
    TimerManager.stop = new $$Ref('pollen_time_TimerManager_stop__E');
    TimerManager.isActive = new $$Ref('pollen_time_TimerManager_isActive__E');
    TimerManager.tickISR = new $$Ref('pollen_time_TimerManager_tickISR__I');
    TimerManager.$$hostInit = function() {
        var $$text = '';
        $units['local.mcu.TimerMilli'].setHandlerOnHost((TimerManager.tickISR));
        (TimerManager.numMsTimers) = 0;
        return $$text;
    }
    TimerManager.registerTimerOnHost = function( t ) {
        var $$text = '';
        (TimerManager.numMsTimers) += 1;
        $$printf("TimerManager: registering milli timer ", "(total=", (TimerManager.numMsTimers), ")\n");
        return $$text;
    }
    TimerManager.pollen__uses__ = function() {
        $$bind($units['pollen.time.Timer'], 'pollen$used', true);
    }
    TimerManager.$$privateInit = function() {
        TimerManager.hwTimer = 0;
        TimerManager.numMsTimers = 1;
    }
    TimerManager.$$hostInitLastPass = function() {
        TimerManager.msTimers = new $$Array((TimerManager.numMsTimers), function($$cn,$$idx){ return 0;}, 'pollen_time_TimerManager_msTimers__A', false); TimerManager.msTimers.$$assign((new $$Array((TimerManager.numMsTimers), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null ]));
    }
    return TimerManager;
}
var $$u = $$c();
$units['pollen.time.TimerManager'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.mcu.Cpu ========
 */

var $$c = function() {
    const Cpu = {};
    Cpu.Cpu = Cpu
    Cpu.$name = 'local.mcu.Cpu';
    Cpu.pollen$used = 0;
    Cpu.reset = new $$Ref('local_mcu_Cpu_reset__E');
    Cpu.shutdown = new $$Ref('local_mcu_Cpu_shutdown__E');
    Cpu.wait = new $$Ref('local_mcu_Cpu_wait__E');
    Cpu.cycle = new $$Ref('local_mcu_Cpu_cycle__E');
    Cpu.getFrequency = new $$Ref('local_mcu_Cpu_getFrequency__E');
    Cpu.setFrequency = new $$Ref('local_mcu_Cpu_setFrequency__E');
    Cpu.targetInit = new $$Ref('local_mcu_Cpu_targetInit__I');
    Cpu.getFrequencyOnHost = function() {
        var $$text = '';
        return(  (Cpu.sysFreq)  );
        return $$text;
    }
    Cpu.setFrequencyOnHost = function( hz ) {
        var $$text = '';
        (Cpu.sysFreq) = (hz);
        return $$text;
    }
    Cpu.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Cpu.pollen__uses__ = function() {
    }
    Cpu.$$privateInit = function() {
        Cpu.sysFreq = 0;
    }
    return Cpu;
}
var $$u = $$c();
$units['local.mcu.Cpu'] = $$u;
$units.push($$u);

/*
 * ======== pollen.hardware.GlobalInterruptsProtocol ========
 */

var $$c = function() {
    const GlobalInterruptsProtocol = {};
    GlobalInterruptsProtocol.GlobalInterruptsProtocol = GlobalInterruptsProtocol
    GlobalInterruptsProtocol.$name = 'pollen.hardware.GlobalInterruptsProtocol';
    GlobalInterruptsProtocol.pollen$used = 0;
    GlobalInterruptsProtocol.pollen__uses__ = function() {
    }
    GlobalInterruptsProtocol.$$privateInit = function() {
    }
    return GlobalInterruptsProtocol;
}
var $$u = $$c();
$units['pollen.hardware.GlobalInterruptsProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.mcu.GlobalInterrupts ========
 */

var $$c = function() {
    const GlobalInterrupts = {};
    GlobalInterrupts.GlobalInterrupts = GlobalInterrupts
    GlobalInterrupts.$name = 'local.mcu.GlobalInterrupts';
    GlobalInterrupts.pollen$used = 0;
    GlobalInterrupts.enable = new $$Ref('local_mcu_GlobalInterrupts_enable__E');
    GlobalInterrupts.disable = new $$Ref('local_mcu_GlobalInterrupts_disable__E');
    GlobalInterrupts.restore = new $$Ref('local_mcu_GlobalInterrupts_restore__E');
    GlobalInterrupts.isEnabled = new $$Ref('local_mcu_GlobalInterrupts_isEnabled__E');
    GlobalInterrupts.targetInit = new $$Ref('local_mcu_GlobalInterrupts_targetInit__I');
    GlobalInterrupts.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    GlobalInterrupts.pollen__uses__ = function() {
    }
    GlobalInterrupts.$$privateInit = function() {
        GlobalInterrupts.enabled = false;
    }
    return GlobalInterrupts;
}
var $$u = $$c();
$units['local.mcu.GlobalInterrupts'] = $$u;
$units.push($$u);

/*
 * ======== pollen.event.HandlerProtocol ========
 */

var $$c = function() {
    const HandlerProtocol = {};
    HandlerProtocol.HandlerProtocol = HandlerProtocol
    HandlerProtocol.$name = 'pollen.event.HandlerProtocol';
    HandlerProtocol.pollen$used = 0;
    HandlerProtocol.pollen__uses__ = function() {
    }
    HandlerProtocol.$$privateInit = function() {
    }
    return HandlerProtocol;
}
var $$u = $$c();
$units['pollen.event.HandlerProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.hardware.HardwareTimerProtocol ========
 */

var $$c = function() {
    const HardwareTimerProtocol = {};
    HardwareTimerProtocol.HardwareTimerProtocol = HardwareTimerProtocol
    HardwareTimerProtocol.$name = 'pollen.hardware.HardwareTimerProtocol';
    HardwareTimerProtocol.pollen$used = 0;
    HardwareTimerProtocol.pollen__uses__ = function() {
    }
    HardwareTimerProtocol.$$privateInit = function() {
    }
    return HardwareTimerProtocol;
}
var $$u = $$c();
$units['pollen.hardware.HardwareTimerProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.mcu.TimerMilli ========
 */

var $$c = function() {
    const TimerMilli = {};
    TimerMilli.TimerMilli = TimerMilli
    TimerMilli.$name = 'local.mcu.TimerMilli';
    TimerMilli.pollen$used = 0;
    TimerMilli.targetInit = new $$Ref('local_mcu_TimerMilli_targetInit__I');
    TimerMilli.setHandler = new $$Ref('local_mcu_TimerMilli_setHandler__E');
    TimerMilli.start = new $$Ref('local_mcu_TimerMilli_start__E');
    TimerMilli.stop = new $$Ref('local_mcu_TimerMilli_stop__E');
    TimerMilli.isRunning = new $$Ref('local_mcu_TimerMilli_isRunning__E');
    TimerMilli.resetTimer = new $$Ref('local_mcu_TimerMilli_resetTimer__I');
    TimerMilli.sigAlarm = new $$Ref('local_mcu_TimerMilli_sigAlarm__I');
    TimerMilli.setHandlerOnHost = function( h ) {
        var $$text = '';
        (TimerMilli.tickHandler) = (h);
        return $$text;
    }
    TimerMilli.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    TimerMilli.pollen__uses__ = function() {
    }
    TimerMilli.$$privateInit = function() {
        TimerMilli.repeat = false;
    }
    return TimerMilli;
}
var $$u = $$c();
$units['local.mcu.TimerMilli'] = $$u;
$units.push($$u);

/*
 * ======== pollen.hardware.PinProtocol ========
 */

var $$c = function() {
    const PinProtocol = {};
    PinProtocol.PinProtocol = PinProtocol
    PinProtocol.$name = 'pollen.hardware.PinProtocol';
    PinProtocol.pollen$used = 0;
    PinProtocol.pollen__uses__ = function() {
    }
    PinProtocol.$$privateInit = function() {
    }
    return PinProtocol;
}
var $$u = $$c();
$units['pollen.hardware.PinProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.mcu.Pin0 ========
 */

var $$c = function() {
    const Pin0 = {};
    Pin0.Pin0 = Pin0
    Pin0.$name = 'local.mcu.Pin0';
    Pin0.pollen$used = 0;
    Pin0.targetInit = new $$Ref('local_mcu_Pin0_targetInit__I');
    Pin0.set = new $$Ref('local_mcu_Pin0_set__E');
    Pin0.clear = new $$Ref('local_mcu_Pin0_clear__E');
    Pin0.toggle = new $$Ref('local_mcu_Pin0_toggle__E');
    Pin0.get = new $$Ref('local_mcu_Pin0_get__E');
    Pin0.makeInput = new $$Ref('local_mcu_Pin0_makeInput__E');
    Pin0.isInput = new $$Ref('local_mcu_Pin0_isInput__E');
    Pin0.makeOutput = new $$Ref('local_mcu_Pin0_makeOutput__E');
    Pin0.isOutput = new $$Ref('local_mcu_Pin0_isOutput__E');
    Pin0.pname = "Pin";
    Pin0.pnum = 0;
    Pin0.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Pin0.pollen__uses__ = function() {
    }
    Pin0.$$privateInit = function() {
        Pin0.name = null;
        Pin0.num = 0;
        Pin0.state = 0;
        Pin0.input = 0;
        Pin0.pollen__unitname = "Pin0";
    }
    return Pin0;
}
var $$u = $$c();
$units['local.mcu.Pin0'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.mcu.Pin1 ========
 */

var $$c = function() {
    const Pin1 = {};
    Pin1.Pin1 = Pin1
    Pin1.$name = 'local.mcu.Pin1';
    Pin1.pollen$used = 0;
    Pin1.targetInit = new $$Ref('local_mcu_Pin1_targetInit__I');
    Pin1.set = new $$Ref('local_mcu_Pin1_set__E');
    Pin1.clear = new $$Ref('local_mcu_Pin1_clear__E');
    Pin1.toggle = new $$Ref('local_mcu_Pin1_toggle__E');
    Pin1.get = new $$Ref('local_mcu_Pin1_get__E');
    Pin1.makeInput = new $$Ref('local_mcu_Pin1_makeInput__E');
    Pin1.isInput = new $$Ref('local_mcu_Pin1_isInput__E');
    Pin1.makeOutput = new $$Ref('local_mcu_Pin1_makeOutput__E');
    Pin1.isOutput = new $$Ref('local_mcu_Pin1_isOutput__E');
    Pin1.pname = "Pin";
    Pin1.pnum = 1;
    Pin1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Pin1.pollen__uses__ = function() {
    }
    Pin1.$$privateInit = function() {
        Pin1.name = null;
        Pin1.num = 0;
        Pin1.state = 0;
        Pin1.input = 0;
        Pin1.pollen__unitname = "Pin1";
    }
    return Pin1;
}
var $$u = $$c();
$units['local.mcu.Pin1'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.mcu.Pin2 ========
 */

var $$c = function() {
    const Pin2 = {};
    Pin2.Pin2 = Pin2
    Pin2.$name = 'local.mcu.Pin2';
    Pin2.pollen$used = 0;
    Pin2.targetInit = new $$Ref('local_mcu_Pin2_targetInit__I');
    Pin2.set = new $$Ref('local_mcu_Pin2_set__E');
    Pin2.clear = new $$Ref('local_mcu_Pin2_clear__E');
    Pin2.toggle = new $$Ref('local_mcu_Pin2_toggle__E');
    Pin2.get = new $$Ref('local_mcu_Pin2_get__E');
    Pin2.makeInput = new $$Ref('local_mcu_Pin2_makeInput__E');
    Pin2.isInput = new $$Ref('local_mcu_Pin2_isInput__E');
    Pin2.makeOutput = new $$Ref('local_mcu_Pin2_makeOutput__E');
    Pin2.isOutput = new $$Ref('local_mcu_Pin2_isOutput__E');
    Pin2.pname = "Pin";
    Pin2.pnum = 2;
    Pin2.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Pin2.pollen__uses__ = function() {
    }
    Pin2.$$privateInit = function() {
        Pin2.name = null;
        Pin2.num = 0;
        Pin2.state = 0;
        Pin2.input = 0;
        Pin2.pollen__unitname = "Pin2";
    }
    return Pin2;
}
var $$u = $$c();
$units['local.mcu.Pin2'] = $$u;
$units.push($$u);

/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.mcu.ConsolePrint ========
 */

var $$c = function() {
    const ConsolePrint = {};
    ConsolePrint.ConsolePrint = ConsolePrint
    ConsolePrint.$name = 'local.mcu.ConsolePrint';
    ConsolePrint.pollen$used = 0;
    ConsolePrint.printBool = new $$Ref('local_mcu_ConsolePrint_printBool__E');
    ConsolePrint.printInt = new $$Ref('local_mcu_ConsolePrint_printInt__E');
    ConsolePrint.printReal = new $$Ref('local_mcu_ConsolePrint_printReal__E');
    ConsolePrint.printUint = new $$Ref('local_mcu_ConsolePrint_printUint__E');
    ConsolePrint.printStr = new $$Ref('local_mcu_ConsolePrint_printStr__E');
    ConsolePrint.targetInit = new $$Ref('local_mcu_ConsolePrint_targetInit__I');
    ConsolePrint.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    ConsolePrint.pollen__uses__ = function() {
    }
    ConsolePrint.$$privateInit = function() {
        ConsolePrint.HEADER = "\033[95m";
        ConsolePrint.OKBLUE = "\033[94m";
        ConsolePrint.OKGREEN = "\033[92m";
        ConsolePrint.WARNING = "\033[93m";
        ConsolePrint.FAIL = "\033[91m";
        ConsolePrint.ENDC = "\033[0m";
    }
    return ConsolePrint;
}
var $$u = $$c();
$units['local.mcu.ConsolePrint'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.math.Random8 ========
 */

var $$c = function() {
    const Random8 = {};
    Random8.Random8 = Random8
    Random8.$name = 'pollen.math.Random8';
    Random8.pollen$used = 0;
    Random8.srand8 = new $$Ref('pollen_math_Random8_srand8__E');
    Random8.rand8 = new $$Ref('pollen_math_Random8_rand8__E');
    Random8.rand8f = new $$Ref('pollen_math_Random8_rand8f__E');
    Random8.targetInit = new $$Ref('pollen_math_Random8_targetInit__I');
    Random8.$$hostInit = function() {
        var $$text = '';
        (Random8.seed) = 0xAC;
        (Random8.lfsr) = (Random8.seed);
        (Random8.period) = 0;
        return $$text;
    }
    Random8.pollen__uses__ = function() {
    }
    Random8.$$privateInit = function() {
        Random8.seed = 0xAC;
        Random8.lfsr = (Random8.seed);
        Random8.period = 0;
    }
    return Random8;
}
var $$u = $$c();
$units['pollen.math.Random8'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.math.Random16 ========
 */

var $$c = function() {
    const Random16 = {};
    Random16.Random16 = Random16
    Random16.$name = 'pollen.math.Random16';
    Random16.pollen$used = 0;
    Random16.srand16 = new $$Ref('pollen_math_Random16_srand16__E');
    Random16.rand16 = new $$Ref('pollen_math_Random16_rand16__E');
    Random16.rand16f = new $$Ref('pollen_math_Random16_rand16f__E');
    Random16.targetInit = new $$Ref('pollen_math_Random16_targetInit__I');
    Random16.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Random16.pollen__uses__ = function() {
    }
    Random16.$$privateInit = function() {
        Random16.seed = 0xACE1;
        Random16.lfsr = (Random16.seed);
        Random16.period = 0;
    }
    return Random16;
}
var $$u = $$c();
$units['pollen.math.Random16'] = $$u;
$units.push($$u);

/*
 * ======== CLASS bijou.parts.LedState ========
 */

var $$c = function() {
    const LedState = {};
    LedState.LedState = LedState
    LedState.$name = 'bijou.parts.LedState';
    LedState.pollen$used = 0;
    LedState.LedState$$id = 1;
    LedState.LedState = function(cn) {
        this.$$id = LedState.LedState$$id++;
        this.$$cname = cn ? cn : 'bijou_parts_LedState_LedState__'+this.$$id+'__S';
        this.$$tname = 'bijou_parts_LedState_LedState';
        this.$$uname = 'bijou.parts.LedState';
        this.id = 0;
    }
    LedState.LedState.prototype = new $$Struct('bijou.parts.LedState.LedState');
    LedState.LedState.prototype.$$isAggFld = {};
    LedState.LedState.prototype.$$isAggFld.id = false;
    LedState.LedState.prototype.$$isAggFld.rgba = true;
    LedState.LedState.prototype.new_host = function( id ) {
        var $$text = '';
        this.$$privateInit();
        this.rgba = new $$Array(4, function($$cn,$$idx){ return 0;}, 'bijou_parts_LedState_rgba__A', false); this.rgba.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0 ]));
        if (arguments.length == 1) {
                this.id = (id);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Red), 0);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Green), 0);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Blue), 0);
                (this.rgba).set(($units['bijou.parts.LedState'].Colors_Alpha), 255);
        }
        this.$$hostInitLastPass();
        return this;
    }
    LedState.pollen__uses__ = function() {
        $$bind($units['local.mcu.Cpu'], 'pollen$used', true);
        $$bind($units['local.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['local.mcu.TimerMilli'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin0'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin1'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin2'], 'pollen$used', true);
        $$bind($units['local.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['local.parts.ColorLed'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led0'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led1'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led2'], 'pollen$used', true);
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
        $$bind($units['localhost.Lifecycle'], 'pollen$used', true);
        $$bind($units['pollen.math.Random8'], 'pollen$used', true);
        $$bind($units['pollen.math.Random16'], 'pollen$used', true);
    }
    LedState.LedState.prototype.$$privateInit = function() {
        this.id = 0;
        this.rgba = new $$Array(4, function($$cn,$$idx){ return 0;}, 'bijou_parts_LedState_rgba__A', false); this.rgba.$$assign((new $$Array(4, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0 ]));
    }
    LedState.LedState.prototype.$$hostInitLastPass = function() {
    }
    return LedState;
}
var $$u = $$c();
$units['bijou.parts.LedState'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.text.Text ========
 */

var $$c = function() {
    const Text = {};
    Text.Text = Text
    Text.$name = 'pollen.text.Text';
    Text.pollen$used = 0;
    Text.itoa = new $$Ref('pollen_text_Text_itoa__E');
    Text.reverse = new $$Ref('pollen_text_Text_reverse__E');
    Text.strcmp = new $$Ref('pollen_text_Text_strcmp__E');
    Text.strncmp = new $$Ref('pollen_text_Text_strncmp__E');
    Text.strlen = new $$Ref('pollen_text_Text_strlen__E');
    Text.targetInit = new $$Ref('pollen_text_Text_targetInit__I');
    Text.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Text.pollen__uses__ = function() {
    }
    Text.$$privateInit = function() {
    }
    return Text;
}
var $$u = $$c();
$units['pollen.text.Text'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.output.SendOsc ========
 */

var $$c = function() {
    const SendOsc = {};
    SendOsc.SendOsc = SendOsc
    SendOsc.$name = 'local.output.SendOsc';
    SendOsc.pollen$used = 0;
    SendOsc.Text = $units['pollen.text.Text'];
    SendOsc.sendRGB = new $$Ref('local_output_SendOsc_sendRGB__E');
    SendOsc.sprint = new $$Ref('local_output_SendOsc_sprint__I');
    SendOsc.targetInit = new $$Ref('local_output_SendOsc_targetInit__I');
    SendOsc.$$hostInit = function() {
        var $$text = '';
        SendOsc.data = new $$Array(50, function($$cn,$$idx){ return 0;}, 'local_output_SendOsc_data__A', false); SendOsc.data.$$assign((new $$Array(50, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]));
        return $$text;
    }
    SendOsc.pollen__uses__ = function() {
        $$bind($units['pollen.text.Text'], 'pollen$used', true);
    }
    SendOsc.$$privateInit = function() {
        SendOsc.header = "oscsend 127.0.0.1 7000 /led/1 iii ";
        SendOsc.data = new $$Array(50, function($$cn,$$idx){ return 0;}, 'local_output_SendOsc_data__A', false); SendOsc.data.$$assign((new $$Array(50, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]));
    }
    return SendOsc;
}
var $$u = $$c();
$units['local.output.SendOsc'] = $$u;
$units.push($$u);

/*
 * ======== MODULE local.parts.ColorLed ========
 */

var $$c = function() {
    const ColorLed = {};
    ColorLed.ColorLed = ColorLed
    ColorLed.$name = 'local.parts.ColorLed';
    ColorLed.pollen$used = 0;
    ColorLed.LedState = $units['bijou.parts.LedState'];
    ColorLed.SendOsc = $units['local.output.SendOsc'];
    ColorLed.targetInit = new $$Ref('local_parts_ColorLed_targetInit__I');
    ColorLed.setState = new $$Ref('local_parts_ColorLed_setState__E');
    ColorLed.setRGBA = new $$Ref('local_parts_ColorLed_setRGBA__E');
    ColorLed.setRGB = new $$Ref('local_parts_ColorLed_setRGB__E');
    ColorLed.getRGB = new $$Ref('local_parts_ColorLed_getRGB__E');
    ColorLed.getRGBA = new $$Ref('local_parts_ColorLed_getRGBA__E');
    ColorLed.doSetColor = new $$Ref('local_parts_ColorLed_doSetColor__I');
    ColorLed.$$hostInit = function() {
        var $$text = '';
        ColorLed.state = new $units['bijou.parts.LedState'].LedState('local_parts_ColorLed_state__V'); ColorLed.state.new_host(0);
        return $$text;
    }
    ColorLed.pollen__uses__ = function() {
        $$bind($units['bijou.parts.LedState'], 'pollen$used', true);
        $$bind($units['local.output.SendOsc'], 'pollen$used', true);
    }
    ColorLed.$$privateInit = function() {
    }
    return ColorLed;
}
var $$u = $$c();
$units['local.parts.ColorLed'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.parts.Led0 ========
 */

var $$c = function() {
    const Led0 = {};
    Led0.Led0 = Led0
    Led0.$name = 'pollen.parts.Led0';
    Led0.pollen$used = 0;
    Led0.targetInit = new $$Ref('pollen_parts_Led0_targetInit__E');
    Led0.on = new $$Ref('pollen_parts_Led0_on__E');
    Led0.off = new $$Ref('pollen_parts_Led0_off__E');
    Led0.toggle = new $$Ref('pollen_parts_Led0_toggle__E');
    Led0.isOn = new $$Ref('pollen_parts_Led0_isOn__E');
    Led0.activeLow = false;
    Led0.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Led0.pollen__uses__ = function() {
    }
    Led0.$$privateInit = function() {
        Led0.pin = 0;
    }
    return Led0;
}
var $$u = $$c();
$units['pollen.parts.Led0'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.parts.Led1 ========
 */

var $$c = function() {
    const Led1 = {};
    Led1.Led1 = Led1
    Led1.$name = 'pollen.parts.Led1';
    Led1.pollen$used = 0;
    Led1.targetInit = new $$Ref('pollen_parts_Led1_targetInit__E');
    Led1.on = new $$Ref('pollen_parts_Led1_on__E');
    Led1.off = new $$Ref('pollen_parts_Led1_off__E');
    Led1.toggle = new $$Ref('pollen_parts_Led1_toggle__E');
    Led1.isOn = new $$Ref('pollen_parts_Led1_isOn__E');
    Led1.activeLow = false;
    Led1.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Led1.pollen__uses__ = function() {
    }
    Led1.$$privateInit = function() {
        Led1.pin = 0;
    }
    return Led1;
}
var $$u = $$c();
$units['pollen.parts.Led1'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.parts.Led2 ========
 */

var $$c = function() {
    const Led2 = {};
    Led2.Led2 = Led2
    Led2.$name = 'pollen.parts.Led2';
    Led2.pollen$used = 0;
    Led2.targetInit = new $$Ref('pollen_parts_Led2_targetInit__E');
    Led2.on = new $$Ref('pollen_parts_Led2_on__E');
    Led2.off = new $$Ref('pollen_parts_Led2_off__E');
    Led2.toggle = new $$Ref('pollen_parts_Led2_toggle__E');
    Led2.isOn = new $$Ref('pollen_parts_Led2_isOn__E');
    Led2.activeLow = false;
    Led2.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Led2.pollen__uses__ = function() {
    }
    Led2.$$privateInit = function() {
        Led2.pin = 0;
    }
    return Led2;
}
var $$u = $$c();
$units['pollen.parts.Led2'] = $$u;
$units.push($$u);

/*
 * ======== CLASS pollen.event.Event ========
 */

var $$c = function() {
    const Event = {};
    Event.Event = Event
    Event.$name = 'pollen.event.Event';
    Event.pollen$used = 0;
    Event.Newsroom = $units['pollen.event.Newsroom'];
    Event.Event$$id = 1;
    Event.Event = function(cn) {
        this.$$id = Event.Event$$id++;
        this.$$cname = cn ? cn : 'pollen_event_Event_Event__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_Event_Event';
        this.$$uname = 'pollen.event.Event';
        this.eventHandler = null;
    }
    Event.Event.prototype = new $$Struct('pollen.event.Event.Event');
    Event.Event.prototype.$$isAggFld = {};
    Event.Event.prototype.$$isAggFld.eventHandler = false;
    Event.Event.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                this.eventHandler = (h);
                $units['pollen.event.Newsroom'].registerEventOnHost();
        }
        this.$$hostInitLastPass();
        return this;
    }
    Event.Event.prototype.setHandlerOnHost = function( h ) {
        var $$text = '';
        this.eventHandler = (h);
        $units['pollen.event.Newsroom'].registerEventOnHost();
        this.$$hostInitLastPass();
        return $$text;
    }
    Event.pollen__uses__ = function() {
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
    }
    Event.Event.prototype.$$privateInit = function() {
    }
    Event.Event.prototype.$$hostInitLastPass = function() {
    }
    return Event;
}
var $$u = $$c();
$units['pollen.event.Event'] = $$u;
$units.push($$u);

/*
 * ======== CLASS pollen.event.EventQueue ========
 */

var $$c = function() {
    const EventQueue = {};
    EventQueue.EventQueue = EventQueue
    EventQueue.$name = 'pollen.event.EventQueue';
    EventQueue.pollen$used = 0;
    EventQueue.Event = $units['pollen.event.Event'];
    EventQueue.EventQueue$$id = 1;
    EventQueue.EventQueue = function(cn) {
        this.$$id = EventQueue.EventQueue$$id++;
        this.$$cname = cn ? cn : 'pollen_event_EventQueue_EventQueue__'+this.$$id+'__S';
        this.$$tname = 'pollen_event_EventQueue_EventQueue';
        this.$$uname = 'pollen.event.EventQueue';
        this.capacity = 1;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
    }
    EventQueue.EventQueue.prototype = new $$Struct('pollen.event.EventQueue.EventQueue');
    EventQueue.EventQueue.prototype.$$isAggFld = {};
    EventQueue.EventQueue.prototype.$$isAggFld.capacity = false;
    EventQueue.EventQueue.prototype.$$isAggFld.elements = true;
    EventQueue.EventQueue.prototype.$$isAggFld.length = false;
    EventQueue.EventQueue.prototype.$$isAggFld.head = false;
    EventQueue.EventQueue.prototype.$$isAggFld.tail = false;
    EventQueue.EventQueue.prototype.new_host = function( max ) {
        var $$text = '';
        this.$$privateInit();
        if (arguments.length == 1) {
                this.length = 0;
                this.head = 0;
                this.tail = 0;
                this.capacity = (max);
        }
        this.$$hostInitLastPass();
        return this;
    }
    EventQueue.EventQueue.prototype.setCapacityOnHost = function( capacity ) {
        var $$text = '';
        this.capacity = (capacity);
        $$printf("EventQueue: setting new capacity =", this.capacity, "\n");
        this.$$hostInitLastPass();
        return $$text;
    }
    EventQueue.EventQueue.prototype.getCapacityOnHost = function() {
        var $$text = '';
        return(  this.capacity  );
        this.$$hostInitLastPass();
        return $$text;
    }
    EventQueue.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
    }
    EventQueue.EventQueue.prototype.$$privateInit = function() {
        this.capacity = 1;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
    }
    EventQueue.EventQueue.prototype.$$hostInitLastPass = function() {
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_event_EventQueue_elements__A', false); this.elements.$$assign((new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null ]));
    }
    return EventQueue;
}
var $$u = $$c();
$units['pollen.event.EventQueue'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.event.Newsroom ========
 */

var $$c = function() {
    const Newsroom = {};
    Newsroom.Newsroom = Newsroom
    Newsroom.$name = 'pollen.event.Newsroom';
    Newsroom.pollen$used = 0;
    Newsroom.Event = $units['pollen.event.Event'];
    Newsroom.EventQueue = $units['pollen.event.EventQueue'];
    Newsroom.targetInit = new $$Ref('pollen_event_Newsroom_targetInit__I');
    Newsroom.post = new $$Ref('pollen_event_Newsroom_post__E');
    Newsroom.postFromInterrupt = new $$Ref('pollen_event_Newsroom_postFromInterrupt__E');
    Newsroom.run = new $$Ref('pollen_event_Newsroom_run__E');
    Newsroom.dispatch = new $$Ref('pollen_event_Newsroom_dispatch__I');
    Newsroom.$$hostInit = function() {
        var $$text = '';
        Newsroom.events = new $units['pollen.event.EventQueue'].EventQueue('pollen_event_Newsroom_events__V'); Newsroom.events.new_host(0);
        return $$text;
    }
    Newsroom.registerEventOnHost = function() {
        var $$text = '';
        Newsroom.events.setCapacityOnHost(Newsroom.events.getCapacityOnHost() + 1);
        $$printf("Newsroom: event registered. Event capacity = ", Newsroom.events.getCapacityOnHost(), "\n");
        return $$text;
    }
    Newsroom.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
        $$bind($units['pollen.event.EventQueue'], 'pollen$used', true);
    }
    Newsroom.$$privateInit = function() {
        Newsroom.GI = 0;
    }
    return Newsroom;
}
var $$u = $$c();
$units['pollen.event.Newsroom'] = $$u;
$units.push($$u);

/*
 * ======== CLASS pollen.time.Timer ========
 */

var $$c = function() {
    const Timer = {};
    Timer.Timer = Timer
    Timer.$name = 'pollen.time.Timer';
    Timer.pollen$used = 0;
    Timer.Event = $units['pollen.event.Event'];
    Timer.TimerManager = $units['pollen.time.TimerManager'];
    Timer.Timer$$id = 1;
    Timer.Timer = function(cn) {
        this.$$id = Timer.Timer$$id++;
        this.$$cname = cn ? cn : 'pollen_time_Timer_Timer__'+this.$$id+'__S';
        this.$$tname = 'pollen_time_Timer_Timer';
        this.$$uname = 'pollen.time.Timer';
        this.eventHandler = null;
        this.active = false;
        this.periodic = false;
        this.duration = 0;
        this.tickCount = 0;
        this.added = false;
    }
    Timer.Timer.prototype = new $$Struct('pollen.time.Timer.Timer');
    Timer.Timer.prototype.$$isAggFld = {};
    Timer.Timer.prototype.$$isAggFld.eventHandler = false;
    Timer.Timer.prototype.$$isAggFld.tickEvent = false;
    Timer.Timer.prototype.$$isAggFld.active = false;
    Timer.Timer.prototype.$$isAggFld.periodic = false;
    Timer.Timer.prototype.$$isAggFld.duration = false;
    Timer.Timer.prototype.$$isAggFld.tickCount = false;
    Timer.Timer.prototype.$$isAggFld.added = false;
    Timer.Timer.prototype.new_host = function( h ) {
        var $$text = '';
        this.$$privateInit();
        this.tickEvent = new $units['pollen.event.Event'].Event('pollen_time_Timer_tickEvent__V');
        if (arguments.length == 1) {
                (this.tickEvent) = new $units['pollen.event.Event'].Event().new_host((h));
                $units['pollen.time.TimerManager'].registerTimerOnHost(this);
        }
        this.$$hostInitLastPass();
        return this;
    }
    Timer.Timer.prototype.getDurationOnHost = function() {
        var $$text = '';
        return(  this.duration  );
        this.$$hostInitLastPass();
        return $$text;
    }
    Timer.pollen__uses__ = function() {
        $$bind($units['pollen.event.Event'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
    }
    Timer.Timer.prototype.$$privateInit = function() {
        this.active = false;
        this.periodic = false;
        this.duration = 0;
        this.tickCount = 0;
        this.added = false;
    }
    Timer.Timer.prototype.$$hostInitLastPass = function() {
    }
    return Timer;
}
var $$u = $$c();
$units['pollen.time.Timer'] = $$u;
$units.push($$u);

/*
 * ======== MODULE pollen.time.TimerManager ========
 */

var $$c = function() {
    const TimerManager = {};
    TimerManager.TimerManager = TimerManager
    TimerManager.$name = 'pollen.time.TimerManager';
    TimerManager.pollen$used = 0;
    TimerManager.Timer = $units['pollen.time.Timer'];
    TimerManager.targetInit = new $$Ref('pollen_time_TimerManager_targetInit__I');
    TimerManager.addTimer = new $$Ref('pollen_time_TimerManager_addTimer__E');
    TimerManager.start = new $$Ref('pollen_time_TimerManager_start__E');
    TimerManager.stop = new $$Ref('pollen_time_TimerManager_stop__E');
    TimerManager.isActive = new $$Ref('pollen_time_TimerManager_isActive__E');
    TimerManager.tickISR = new $$Ref('pollen_time_TimerManager_tickISR__I');
    TimerManager.$$hostInit = function() {
        var $$text = '';
        $units['local.mcu.TimerMilli'].setHandlerOnHost((TimerManager.tickISR));
        (TimerManager.numMsTimers) = 0;
        return $$text;
    }
    TimerManager.registerTimerOnHost = function( t ) {
        var $$text = '';
        (TimerManager.numMsTimers) += 1;
        $$printf("TimerManager: registering milli timer ", "(total=", (TimerManager.numMsTimers), ")\n");
        return $$text;
    }
    TimerManager.pollen__uses__ = function() {
        $$bind($units['pollen.time.Timer'], 'pollen$used', true);
    }
    TimerManager.$$privateInit = function() {
        TimerManager.hwTimer = 0;
        TimerManager.numMsTimers = 1;
    }
    TimerManager.$$hostInitLastPass = function() {
        TimerManager.msTimers = new $$Array((TimerManager.numMsTimers), function($$cn,$$idx){ return 0;}, 'pollen_time_TimerManager_msTimers__A', false); TimerManager.msTimers.$$assign((new $$Array((TimerManager.numMsTimers), function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ null ]));
    }
    return TimerManager;
}
var $$u = $$c();
$units['pollen.time.TimerManager'] = $$u;
$units.push($$u);

/*
 * ======== MODULE localhost.Lifecycle ========
 */

var $$c = function() {
    const Lifecycle = {};
    Lifecycle.Lifecycle = Lifecycle
    Lifecycle.$name = 'localhost.Lifecycle';
    Lifecycle.pollen$used = 0;
    Lifecycle.pollen__reset = new $$Ref('localhost_Lifecycle_pollen__reset__E');
    Lifecycle.pollen__ready = new $$Ref('localhost_Lifecycle_pollen__ready__E');
    Lifecycle.pollen__shutdown = new $$Ref('localhost_Lifecycle_pollen__shutdown__E');
    Lifecycle.targetInit = new $$Ref('localhost_Lifecycle_targetInit__I');
    Lifecycle.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Lifecycle.pollen__uses__ = function() {
        $$bind($units['local.mcu.Cpu'], 'pollen$used', true);
        $$bind($units['local.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['local.mcu.TimerMilli'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin0'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin1'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin2'], 'pollen$used', true);
        $$bind($units['local.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['local.parts.ColorLed'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led0'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led1'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led2'], 'pollen$used', true);
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
        $$bind($units['localhost.Lifecycle'], 'pollen$used', true);
    }
    Lifecycle.$$privateInit = function() {
    }
    return Lifecycle;
}
var $$u = $$c();
$units['localhost.Lifecycle'] = $$u;
$units.push($$u);

/*
 * ======== COMPOSITION localhost.LocalHost ========
 */

var $$c = function() {
    const LocalHost = {};
    LocalHost.LocalHost = LocalHost
    LocalHost.$name = 'localhost.LocalHost';
    LocalHost.pollen$used = 0;
    LocalHost.TimerMilli = $units['local.mcu.TimerMilli'];
    LocalHost.GlobalInterrupts = $units['local.mcu.GlobalInterrupts'];
    LocalHost.ConsolePrint = $units['local.mcu.ConsolePrint'];
    LocalHost.ColorLed = $units['local.parts.ColorLed'];
    LocalHost.Led0 = $units['pollen.parts.Led0'];
    LocalHost.Led1 = $units['pollen.parts.Led1'];
    LocalHost.Led2 = $units['pollen.parts.Led2'];
    LocalHost.Newsroom = $units['pollen.event.Newsroom'];
    LocalHost.TimerManager = $units['pollen.time.TimerManager'];
    LocalHost.Lifecycle = $units['localhost.Lifecycle'];
    LocalHost.pollen__presets__ = function() {
        var $$text = '';
        var $$v = 'local_mcu_GlobalInterrupts';
        var $$s = $$bind($units['localhost.LocalHost'], 'Newsroom.GI', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.GlobalInterrupts'].pollen$used = true;}

        var $$v = 'local_mcu_TimerMilli';
        var $$s = $$bind($units['localhost.LocalHost'], 'TimerManager.hwTimer', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.TimerMilli'].pollen$used = true;}

        var $$v = 'local_mcu_Pin0';
        var $$s = $$bind($units['localhost.LocalHost'], 'Led0.pin', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.Pin0'].pollen$used = true;}

        var $$v = 'local_mcu_Pin1';
        var $$s = $$bind($units['localhost.LocalHost'], 'Led1.pin', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.Pin1'].pollen$used = true;}

        var $$v = 'local_mcu_Pin2';
        var $$s = $$bind($units['localhost.LocalHost'], 'Led2.pin', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.Pin2'].pollen$used = true;}

        var $$v = 'local_mcu_ConsolePrint';
        var $$s = $$bind($units['localhost.LocalHost'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['local.mcu.ConsolePrint'].pollen$used = true;}

        return $$text;
    }
    return LocalHost;
}
var $$u = $$c();
$units['localhost.LocalHost'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test54.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test54.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test54_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test54_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test54_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test54_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test54_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test54_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test54.PrintImpl'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test90.Test_03 ========
 */

var $$c = function() {
    const Test_03 = {};
    Test_03.Test_03 = Test_03
    Test_03.$name = 'test90.Test_03';
    Test_03.pollen$used = 0;
    Test_03.Timer = $units['pollen.time.Timer'];
    Test_03.PrintImpl = $units['test54.PrintImpl'];
    Test_03.tick = new $$Ref('test90_Test_03_tick__I');
    Test_03.pollen__run = new $$Ref('test90_Test_03_pollen__run__E');
    Test_03.targetInit = new $$Ref('test90_Test_03_targetInit__I');
    Test_03.$$hostInit = function() {
        var $$text = '';
        Test_03.t1 = new $units['pollen.time.Timer'].Timer('test90_Test_03_t1__V'); Test_03.t1.new_host((Test_03.tick));
        return $$text;
    }
    Test_03.pollen__uses__ = function() {
        $$bind($units['local.mcu.Cpu'], 'pollen$used', true);
        $$bind($units['local.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['local.mcu.TimerMilli'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin0'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin1'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin2'], 'pollen$used', true);
        $$bind($units['local.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['local.parts.ColorLed'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led0'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led1'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led2'], 'pollen$used', true);
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
        $$bind($units['localhost.Lifecycle'], 'pollen$used', true);
        $$bind($units['pollen.time.Timer'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Test_03.$$privateInit = function() {
        Test_03.count = 0;
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test90.Test_03'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Test_03;
}
var $$u = $$c();
$units['test90.Test_03'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test90.Test_03'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test90.Test_03 ========
 */

var $$c = function() {
    const Test_03 = {};
    Test_03.Test_03 = Test_03
    Test_03.$name = 'test90.Test_03';
    Test_03.pollen$used = 0;
    Test_03.Timer = $units['pollen.time.Timer'];
    Test_03.PrintImpl = $units['test54.PrintImpl'];
    Test_03.tick = new $$Ref('test90_Test_03_tick__I');
    Test_03.pollen__run = new $$Ref('test90_Test_03_pollen__run__E');
    Test_03.targetInit = new $$Ref('test90_Test_03_targetInit__I');
    Test_03.$$hostInit = function() {
        var $$text = '';
        Test_03.t1 = new $units['pollen.time.Timer'].Timer('test90_Test_03_t1__V'); Test_03.t1.new_host((Test_03.tick));
        return $$text;
    }
    Test_03.pollen__uses__ = function() {
        $$bind($units['local.mcu.Cpu'], 'pollen$used', true);
        $$bind($units['local.mcu.GlobalInterrupts'], 'pollen$used', true);
        $$bind($units['local.mcu.TimerMilli'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin0'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin1'], 'pollen$used', true);
        $$bind($units['local.mcu.Pin2'], 'pollen$used', true);
        $$bind($units['local.mcu.ConsolePrint'], 'pollen$used', true);
        $$bind($units['local.parts.ColorLed'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led0'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led1'], 'pollen$used', true);
        $$bind($units['pollen.parts.Led2'], 'pollen$used', true);
        $$bind($units['pollen.event.Newsroom'], 'pollen$used', true);
        $$bind($units['pollen.time.TimerManager'], 'pollen$used', true);
        $$bind($units['localhost.Lifecycle'], 'pollen$used', true);
        $$bind($units['pollen.time.Timer'], 'pollen$used', true);
        $$bind($units['test54.PrintImpl'], 'pollen$used', true);
    }
    Test_03.$$privateInit = function() {
        Test_03.count = 0;
var $$v = 'test54_PrintImpl';
        var $$s = $$bind($units['test90.Test_03'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test54.PrintImpl'].pollen$used = true;}

    }
    return Test_03;
}
var $$u = $$c();
$units['test90.Test_03'] = $$u;
$units.push($$u);

