pollen version 0.2.137
pollen version 0.2.137
go to TestProg
Now run executeable
PASS buffer peg to function return 
Test assigning (uint8) elements from array function return:
PASS buffer 0th element assigned from returned array
PASS buffer 3th element assigned from returned array
PASS buffer 4th element assigned from returned array
Test assigning (bool) elements from array function return:
PASS buffer2 0th element assigned from returned array
PASS buffer2 3th element assigned from returned array
PASS buffer2 4th element assigned from returned array
PASS local buffer peg to function return 

/*
 * ======== string literals ========
 */

static const char test61_PrintImpl__s__fileName[] = "PrintImpl.p";
static const char test61_PrintImpl__s__0[] = "PrintImpl";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test61_PrintImpl_printUint__E( uint32 u ) {
     printf("%u", (unsigned int)u) ;

}

void test61_PrintImpl_printInt__E( int32 i ) {
     printf("%i", (int)i) ;

}

void test61_PrintImpl_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void test61_PrintImpl_printBool__E( bool b ) {
    if ((b)) {
         printf("%s", "true") ;

    }
    else {
         printf("%s", "false") ;

    }
}

void test61_PrintImpl_targetInit__I() {
}

void test61_PrintImpl_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test81_TestProg_pollen__reset__E();
void test81_TestProg_pollen__ready__E();
void test81_TestProg_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test61_PrintImpl_ test61_PrintImpl;

/*
 * ======== struct module definition (unit PrintImpl) ========
 */

struct test61_PrintImpl_ {
};
typedef struct test61_PrintImpl_ test61_PrintImpl_;

/*
 * ======== function members (unit PrintImpl) ========
 */

extern void test61_PrintImpl_printUint__E( uint32 u );
extern void test61_PrintImpl_printInt__E( int32 i );
extern void test61_PrintImpl_printReal__E( float f );
extern void test61_PrintImpl_printBool__E( bool b );
extern void test61_PrintImpl_targetInit__I();
extern void test61_PrintImpl_printStr__E( string s );

/*
 * ======== data members (unit PrintImpl) ========
 */


/*
 * ======== string literals ========
 */

static const char test81_ArrayReturn__s__fileName[] = "ArrayReturn.p";
static const char test81_ArrayReturn__s__3[] = "PASS buffer peg to function return \n";
static const char test81_ArrayReturn__s__6[] = "FAIL buffer 0th element assigned from returned array\n";
static const char test81_ArrayReturn__s__1[] = "PASS local buffer peg to function return \n";
static const char test81_ArrayReturn__s__9[] = "PASS buffer 4th element assigned from returned array\n";
static const char test81_ArrayReturn__s__10[] = "FAIL buffer 4th element assigned from returned array\n";
static const char test81_ArrayReturn__s__0[] = "FAIL local buffer peg to function return \n";
static const char test81_ArrayReturn__s__18[] = "ArrayReturn";
static const char test81_ArrayReturn__s__15[] = "FAIL buffer2 3th element assigned from returned array\n";
static const char test81_ArrayReturn__s__17[] = "FAIL buffer2 4th element assigned from returned array\n";
static const char test81_ArrayReturn__s__11[] = "Test assigning (bool) elements from array function return:\n";
static const char test81_ArrayReturn__s__8[] = "FAIL buffer 3th element assigned from returned array\n";
static const char test81_ArrayReturn__s__4[] = "Test assigning (uint8) elements from array function return:\n";
static const char test81_ArrayReturn__s__14[] = "PASS buffer2 3th element assigned from returned array\n";
static const char test81_ArrayReturn__s__16[] = "PASS buffer2 4th element assigned from returned array\n";
static const char test81_ArrayReturn__s__12[] = "PASS buffer2 0th element assigned from returned array\n";
static const char test81_ArrayReturn__s__2[] = "FAIL buffer peg to function return \n";
static const char test81_ArrayReturn__s__7[] = "PASS buffer 3th element assigned from returned array\n";
static const char test81_ArrayReturn__s__5[] = "PASS buffer 0th element assigned from returned array\n";
static const char test81_ArrayReturn__s__13[] = "FAIL buffer2 0th element assigned from returned array\n";

/*
 * ======== function definitions ========
 */

bool *  test81_ArrayReturn_bar2__I() {
    return(  (test81_ArrayReturn_test2__A)  );
}

uint8 *  test81_ArrayReturn_bar__I() {
    return(  (test81_ArrayReturn_test1__A)  );
}

void test81_ArrayReturn_foobar__I() {
    uint8 * bufNoDim;
    bool fail;
    uint8 i;
    
    (bufNoDim) = (uint8*) test81_ArrayReturn_bar__I();
    fail = false;
    for (i = 0; (i) < 5; (i)++) {
        if ((bufNoDim[(i)]) != (test81_ArrayReturn_test1__A[(i)])) {
            (fail) = true;
        }
    }
    if ((fail)) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__0);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__1);
    }
}

void test81_ArrayReturn_foo__E() {
    bool fail;
    uint8 i;
    (test81_ArrayReturn_bufNoDim__V) = (uint8*) test81_ArrayReturn_bar__I();
    fail = false;
    for (i = 0; (i) < 5; (i)++) {
        if ((test81_ArrayReturn_bufNoDim__V[(i)]) != (test81_ArrayReturn_test1__A[(i)])) {
            (fail) = true;
        }
    }
    if ((fail)) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__2);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__3);
    }
    test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__4);
    (test81_ArrayReturn_buffer__A[0]) = test81_ArrayReturn_bar__I()[0];
    if ((test81_ArrayReturn_buffer__A[0]) == 1) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__5);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__6);
    }
    (test81_ArrayReturn_buffer__A[3]) = test81_ArrayReturn_bar__I()[3];
    if ((test81_ArrayReturn_buffer__A[3]) == 4) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__7);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__8);
    }
    (test81_ArrayReturn_buffer__A[4]) = test81_ArrayReturn_bar__I()[4];
    if ((test81_ArrayReturn_buffer__A[4]) == 5) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__9);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__10);
    }
    test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__11);
    (test81_ArrayReturn_buffer2__A[0]) = test81_ArrayReturn_bar2__I()[0];
    if ((test81_ArrayReturn_buffer2__A[0]) == true) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__12);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__13);
    }
    (test81_ArrayReturn_buffer2__A[3]) = test81_ArrayReturn_bar2__I()[3];
    if ((test81_ArrayReturn_buffer2__A[3]) == true) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__14);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__15);
    }
    (test81_ArrayReturn_buffer2__A[4]) = test81_ArrayReturn_bar2__I()[4];
    if ((test81_ArrayReturn_buffer2__A[4]) == false) {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__16);
    }
    else {
        test81_TestProg_pollen__printStr((string)test81_ArrayReturn__s__17);
    }
    test81_ArrayReturn_foobar__I();
}

void test81_ArrayReturn_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test81_TestProg_pollen__reset__E();
void test81_TestProg_pollen__ready__E();
void test81_TestProg_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test81_ArrayReturn_ test81_ArrayReturn;

/*
 * ======== struct module definition (unit ArrayReturn) ========
 */

struct test81_ArrayReturn_ {
    uint8 * bufNoDim;
    uint8 buffer[5];
    uint8 test1[5];
    bool test2[5];
    bool buffer2[5];
};
typedef struct test81_ArrayReturn_ test81_ArrayReturn_;

/*
 * ======== function members (unit ArrayReturn) ========
 */

extern bool *  test81_ArrayReturn_bar2__I();
extern uint8 *  test81_ArrayReturn_bar__I();
extern void test81_ArrayReturn_foobar__I();
extern void test81_ArrayReturn_foo__E();
extern void test81_ArrayReturn_targetInit__I();

/*
 * ======== data members (unit ArrayReturn) ========
 */

#define test81_ArrayReturn_bufNoDim__V test81_ArrayReturn.bufNoDim
#define test81_ArrayReturn_buffer__A test81_ArrayReturn.buffer
#define test81_ArrayReturn_test1__A test81_ArrayReturn.test1
#define test81_ArrayReturn_test2__A test81_ArrayReturn.test2
#define test81_ArrayReturn_buffer2__A test81_ArrayReturn.buffer2
#include <std.h>

/*
 * ======== protocol member test81.TestProg.pollenPrintProxy delegates test61_PrintImpl ========
 */

#ifndef test61_PrintImpl__M
#define test61_PrintImpl__M
#include "../../test61/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== unit headers ========
 */

#ifndef test81_ArrayReturn__M
#define test81_ArrayReturn__M
#include "../../test81/ArrayReturn/ArrayReturn.h"
#endif

#ifndef test61_PrintImpl__M
#define test61_PrintImpl__M
#include "../../test61/PrintImpl/PrintImpl.h"
#endif

#ifndef test81_TestProg__M
#define test81_TestProg__M
#include "../../test81/TestProg/TestProg.h"
#endif

/*
 * ======== target data definitions (unit ArrayReturn) ========
 */

struct test81_ArrayReturn_ test81_ArrayReturn = { /* module data */
    null,                    /* bufNoDim */
    {
        (uint8)0x0,  /* [0] */
        (uint8)0x0,  /* [1] */
        (uint8)0x0,  /* [2] */
        (uint8)0x0,  /* [3] */
        (uint8)0x0,  /* [4] */
    },    /* buffer */
    {
        (uint8)0x1,  /* [0] */
        (uint8)0x2,  /* [1] */
        (uint8)0x3,  /* [2] */
        (uint8)0x4,  /* [3] */
        (uint8)0x5,  /* [4] */
    },    /* test1 */
    {
        true,  /* [0] */
        false,  /* [1] */
        false,  /* [2] */
        true,  /* [3] */
        false,  /* [4] */
    },    /* test2 */
    {
        (bool)0x0,  /* [0] */
        (bool)0x0,  /* [1] */
        (bool)0x0,  /* [2] */
        (bool)0x0,  /* [3] */
        (bool)0x0,  /* [4] */
    },    /* buffer2 */
};

/*
 * ======== target data definitions (unit PrintImpl) ========
 */

struct test61_PrintImpl_ test61_PrintImpl = { /* module data */
};

/*
 * ======== target data definitions (unit TestProg) ========
 */

struct test81_TestProg_ test81_TestProg = { /* module data */
    &test61_PrintImpl,    /* pollenPrintProxy */
};

/*
 * ======== pollen print ========
 */

void test81_TestProg_pollen__printBool(bool b) {
    test61_PrintImpl_printBool__E(b);
}
void test81_TestProg_pollen__printInt(int32 i) {
    test61_PrintImpl_printInt__E(i);
}
void test81_TestProg_pollen__printReal(float f) {
    test61_PrintImpl_printReal__E(f);
}
void test81_TestProg_pollen__printUint(uint32 u) {
    test61_PrintImpl_printUint__E(u);
}
void test81_TestProg_pollen__printStr(string s) {
    test61_PrintImpl_printStr__E(s);
}

/*
 * ======== module functions ========
 */

#include "../../test81/ArrayReturn/ArrayReturn.c"
#include "../../test61/PrintImpl/PrintImpl.c"
#include "../../test81/TestProg/TestProg.c"

/*
 * ======== pollen.reset() ========
 */

void test81_TestProg_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test81_TestProg_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== pollen.shutdown(uint8) ========
 */

void test81_TestProg_pollen__shutdown__E(uint8 i) {
    volatile int dummy = 0xCAFE;
    while (dummy) ;
}

/*
 * ======== main() ========
 */

int main() {
    test81_TestProg_pollen__reset__E();
    test81_ArrayReturn_targetInit__I();
    test61_PrintImpl_targetInit__I();
    test81_TestProg_targetInit__I();
    test81_TestProg_pollen__ready__E();
    test81_TestProg_pollen__run__E();
    test81_TestProg_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test81_TestProg__s__fileName[] = "TestProg.p";
static const char test81_TestProg__s__0[] = "TestProg";

/*
 * ======== code injections ========
 */

 #include <stdlib.h> 

/*
 * ======== function definitions ========
 */

void test81_TestProg_pollen__run__E() {
    test81_ArrayReturn_foo__E();
     exit(0) ;

}

void test81_TestProg_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef test81_ArrayReturn__M
#define test81_ArrayReturn__M
#include "../../test81/ArrayReturn/ArrayReturn.h"
#endif

#ifndef test61_PrintImpl__M
#define test61_PrintImpl__M
#include "../../test61/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test81_TestProg_pollen__reset__E();
void test81_TestProg_pollen__ready__E();
void test81_TestProg_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test81_TestProg_ test81_TestProg;

/*
 * ======== struct module definition (unit TestProg) ========
 */

struct test61_PrintImpl_;
struct test81_TestProg_ {
    struct test61_PrintImpl_ *pollenPrintProxy;
};
typedef struct test81_TestProg_ test81_TestProg_;

/*
 * ======== function members (unit TestProg) ========
 */

extern void test81_TestProg_pollen__run__E();
extern void test81_TestProg_targetInit__I();

/*
 * ======== data members (unit TestProg) ========
 */

#define test81_TestProg_pollenPrintProxy__V test81_TestProg.pollenPrintProxy

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test61.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test61.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test61_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test61_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test61_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test61_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test61_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test61_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test61.PrintImpl'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test81.ArrayReturn ========
 */

var $$c = function() {
    const ArrayReturn = {};
    ArrayReturn.ArrayReturn = ArrayReturn
    ArrayReturn.$name = 'test81.ArrayReturn';
    ArrayReturn.pollen$used = 0;
    ArrayReturn.bar = new $$Ref('test81_ArrayReturn_bar__I');
    ArrayReturn.bar2 = new $$Ref('test81_ArrayReturn_bar2__I');
    ArrayReturn.foobar = new $$Ref('test81_ArrayReturn_foobar__I');
    ArrayReturn.foo = new $$Ref('test81_ArrayReturn_foo__E');
    ArrayReturn.targetInit = new $$Ref('test81_ArrayReturn_targetInit__I');
    ArrayReturn.$$hostInit = function() {
        var $$text = '';
        ArrayReturn.bufNoDim = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_bufNoDim__A', false);
        ArrayReturn.buffer = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer__A', false);
        ArrayReturn.test1 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test1__A', false); ArrayReturn.test1.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4, 5 ]));
        ArrayReturn.test2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test2__A', false); ArrayReturn.test2.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ true, false, false, true, false ]));
        ArrayReturn.buffer2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer2__A', false);
        return $$text;
    }
    ArrayReturn.pollen__uses__ = function() {
    }
    ArrayReturn.$$privateInit = function() {
        ArrayReturn.bufNoDim = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_bufNoDim__A', false);
        ArrayReturn.buffer = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer__A', false);
        ArrayReturn.test1 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test1__A', false); ArrayReturn.test1.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4, 5 ]));
        ArrayReturn.test2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test2__A', false); ArrayReturn.test2.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ true, false, false, true, false ]));
        ArrayReturn.buffer2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer2__A', false);
    }
    return ArrayReturn;
}
var $$u = $$c();
$units['test81.ArrayReturn'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test81.ArrayReturn ========
 */

var $$c = function() {
    const ArrayReturn = {};
    ArrayReturn.ArrayReturn = ArrayReturn
    ArrayReturn.$name = 'test81.ArrayReturn';
    ArrayReturn.pollen$used = 0;
    ArrayReturn.bar = new $$Ref('test81_ArrayReturn_bar__I');
    ArrayReturn.bar2 = new $$Ref('test81_ArrayReturn_bar2__I');
    ArrayReturn.foobar = new $$Ref('test81_ArrayReturn_foobar__I');
    ArrayReturn.foo = new $$Ref('test81_ArrayReturn_foo__E');
    ArrayReturn.targetInit = new $$Ref('test81_ArrayReturn_targetInit__I');
    ArrayReturn.$$hostInit = function() {
        var $$text = '';
        ArrayReturn.bufNoDim = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_bufNoDim__A', false);
        ArrayReturn.buffer = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer__A', false);
        ArrayReturn.test1 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test1__A', false); ArrayReturn.test1.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4, 5 ]));
        ArrayReturn.test2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test2__A', false); ArrayReturn.test2.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ true, false, false, true, false ]));
        ArrayReturn.buffer2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer2__A', false);
        return $$text;
    }
    ArrayReturn.pollen__uses__ = function() {
    }
    ArrayReturn.$$privateInit = function() {
        ArrayReturn.bufNoDim = new $$Array(-1, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_bufNoDim__A', false);
        ArrayReturn.buffer = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer__A', false);
        ArrayReturn.test1 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test1__A', false); ArrayReturn.test1.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ 1, 2, 3, 4, 5 ]));
        ArrayReturn.test2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_test2__A', false); ArrayReturn.test2.$$assign((new $$Array(5, function($$cn,$$idx){ return 0;}, '__new_'+($$Array.$$idx++)+'__A', false)).$$assign([ true, false, false, true, false ]));
        ArrayReturn.buffer2 = new $$Array(5, function($$cn,$$idx){ return 0;}, 'test81_ArrayReturn_buffer2__A', false);
    }
    return ArrayReturn;
}
var $$u = $$c();
$units['test81.ArrayReturn'] = $$u;
$units.push($$u);

/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test61.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test61.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test61_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test61_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test61_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test61_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test61_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test61_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test61.PrintImpl'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test81.TestProg ========
 */

var $$c = function() {
    const TestProg = {};
    TestProg.TestProg = TestProg
    TestProg.$name = 'test81.TestProg';
    TestProg.pollen$used = 0;
    TestProg.ArrayReturn = $units['test81.ArrayReturn'];
    TestProg.PrintImpl = $units['test61.PrintImpl'];
    TestProg.pollen__run = new $$Ref('test81_TestProg_pollen__run__E');
    TestProg.targetInit = new $$Ref('test81_TestProg_targetInit__I');
    TestProg.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    TestProg.pollen__uses__ = function() {
        $$bind($units['test81.ArrayReturn'], 'pollen$used', true);
        $$bind($units['test61.PrintImpl'], 'pollen$used', true);
    }
    TestProg.$$privateInit = function() {
var $$v = 'test61_PrintImpl';
        var $$s = $$bind($units['test81.TestProg'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test61.PrintImpl'].pollen$used = true;}

    }
    return TestProg;
}
var $$u = $$c();
$units['test81.TestProg'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test81.TestProg'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test81.TestProg ========
 */

var $$c = function() {
    const TestProg = {};
    TestProg.TestProg = TestProg
    TestProg.$name = 'test81.TestProg';
    TestProg.pollen$used = 0;
    TestProg.ArrayReturn = $units['test81.ArrayReturn'];
    TestProg.PrintImpl = $units['test61.PrintImpl'];
    TestProg.pollen__run = new $$Ref('test81_TestProg_pollen__run__E');
    TestProg.targetInit = new $$Ref('test81_TestProg_targetInit__I');
    TestProg.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    TestProg.pollen__uses__ = function() {
        $$bind($units['test81.ArrayReturn'], 'pollen$used', true);
        $$bind($units['test61.PrintImpl'], 'pollen$used', true);
    }
    TestProg.$$privateInit = function() {
var $$v = 'test61_PrintImpl';
        var $$s = $$bind($units['test81.TestProg'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test61.PrintImpl'].pollen$used = true;}

    }
    return TestProg;
}
var $$u = $$c();
$units['test81.TestProg'] = $$u;
$units.push($$u);

