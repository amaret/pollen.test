pollen version 0.2.137
pollen version 0.2.137
test79.TestProg.p, line 59:11, Unimplemented type for pollen print (references are not supported)
go to TestProg
Now run executeable
enter pollen.run, print some stuff
 Test this string 77EOL
Now print out the test data
(unsigned):
1 2 3
(signed):
4 5 6
Now print out the Nest class field aNum
77 
Now print out a boolean value: true
Now print out a boolean value function return: true
Now print out a uint8 value function return: 7
Now (fail to) print out a agg function return: 
Boo: you are in Junk.foo

/*
 * ======== string literals ========
 */

static const char test79_Junk__s__fileName[] = "Junk.p";
static const char test79_Junk__s__0[] = "Boo: you are in Junk.foo\n";
static const char test79_Junk__s__1[] = "Junk";

/*
 * ======== function definitions ========
 */

void test79_Junk_foo__E() {
    test79_TestProg_pollen__printStr((string)test79_Junk__s__0);
}

void test79_Junk_targetInit__I() {
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test79_TestProg_pollen__reset__E();
void test79_TestProg_pollen__ready__E();
void test79_TestProg_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test79_Junk_ test79_Junk;

/*
 * ======== struct module definition (unit Junk) ========
 */

struct test79_Junk_ {
};
typedef struct test79_Junk_ test79_Junk_;

/*
 * ======== function members (unit Junk) ========
 */

extern void test79_Junk_foo__E();
extern void test79_Junk_targetInit__I();

/*
 * ======== data members (unit Junk) ========
 */


/*
 * ======== string literals ========
 */

static const char test79_PrintImpl__s__fileName[] = "PrintImpl.p";
static const char test79_PrintImpl__s__0[] = "PrintImpl";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

void test79_PrintImpl_printUint__E( uint32 u ) {
     printf("%u", (unsigned int)u) ;

}

void test79_PrintImpl_printInt__E( int32 i ) {
     printf("%i", (int)i) ;

}

void test79_PrintImpl_printReal__E( float f ) {
     printf("%f", (float)f) ;

}

void test79_PrintImpl_printBool__E( bool b ) {
    if ((b)) {
         printf("%s", "true") ;

    }
    else {
         printf("%s", "false") ;

    }
}

void test79_PrintImpl_targetInit__I() {
}

void test79_PrintImpl_printStr__E( string s ) {
     printf("%s", s) ;

}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test79_TestProg_pollen__reset__E();
void test79_TestProg_pollen__ready__E();
void test79_TestProg_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test79_PrintImpl_ test79_PrintImpl;

/*
 * ======== struct module definition (unit PrintImpl) ========
 */

struct test79_PrintImpl_ {
};
typedef struct test79_PrintImpl_ test79_PrintImpl_;

/*
 * ======== function members (unit PrintImpl) ========
 */

extern void test79_PrintImpl_printUint__E( uint32 u );
extern void test79_PrintImpl_printInt__E( int32 i );
extern void test79_PrintImpl_printReal__E( float f );
extern void test79_PrintImpl_printBool__E( bool b );
extern void test79_PrintImpl_targetInit__I();
extern void test79_PrintImpl_printStr__E( string s );

/*
 * ======== data members (unit PrintImpl) ========
 */

#include <std.h>

/*
 * ======== protocol member test79.TestProg.pollenPrintProxy delegates test79_PrintImpl ========
 */

#ifndef test79_PrintImpl__M
#define test79_PrintImpl__M
#include "../../test79/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== unit headers ========
 */

#ifndef test79_Junk__M
#define test79_Junk__M
#include "../../test79/Junk/Junk.h"
#endif

#ifndef test79_PrintImpl__M
#define test79_PrintImpl__M
#include "../../test79/PrintImpl/PrintImpl.h"
#endif

#ifndef test79_TestProg__M
#define test79_TestProg__M
#include "../../test79/TestProg/TestProg.h"
#endif

/*
 * ======== target data definitions (unit Junk) ========
 */

struct test79_Junk_ test79_Junk = { /* module data */
};

/*
 * ======== target data definitions (unit PrintImpl) ========
 */

struct test79_PrintImpl_ test79_PrintImpl = { /* module data */
};

/*
 * ======== host data definitions (unit TestProg) ========
 */

test79_TestProg_aNest__TYPE test79_TestProg_aNest__V = /* test79.TestProg.Nest object init */
{
    true,                    /* flag */
    (uint32)0x4d,            /* aNum */
};

/*
 * ======== target data definitions (unit TestProg) ========
 */

struct test79_TestProg_ test79_TestProg = { /* module data */
    "Test this string",    /* s1 */
    (uint8)0x1,              /* u8 */
    (uint16)0x2,             /* u16 */
    (uint32)0x3,             /* u32 */
    (int8)0x4,               /* i8 */
    (int16)0x5,              /* i16 */
    (int32)0x6,              /* i32 */
    &test79_PrintImpl,    /* pollenPrintProxy */
};

/*
 * ======== pollen print ========
 */

void test79_TestProg_pollen__printBool(bool b) {
    test79_PrintImpl_printBool__E(b);
}
void test79_TestProg_pollen__printInt(int32 i) {
    test79_PrintImpl_printInt__E(i);
}
void test79_TestProg_pollen__printReal(float f) {
    test79_PrintImpl_printReal__E(f);
}
void test79_TestProg_pollen__printUint(uint32 u) {
    test79_PrintImpl_printUint__E(u);
}
void test79_TestProg_pollen__printStr(string s) {
    test79_PrintImpl_printStr__E(s);
}

/*
 * ======== pollen.assert(bool, string) ========
 */

void test79_TestProg_pollen__assert__E(bool b, string msg) {
    if (!b) {
        test79_TestProg_pollen__printStr(msg);
        test79_TestProg_pollen__printStr("\n");
    }
}

/*
 * ======== module functions ========
 */

#include "../../test79/Junk/Junk.c"
#include "../../test79/PrintImpl/PrintImpl.c"
#include "../../test79/TestProg/TestProg.c"

/*
 * ======== pollen.reset() ========
 */

void test79_TestProg_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test79_TestProg_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== pollen.shutdown(uint8) ========
 */

void test79_TestProg_pollen__shutdown__E(uint8 i) {
    volatile int dummy = 0xCAFE;
    while (dummy) ;
}

/*
 * ======== main() ========
 */

int main() {
    test79_TestProg_pollen__reset__E();
    test79_Junk_targetInit__I();
    test79_PrintImpl_targetInit__I();
    test79_TestProg_targetInit__I();
    test79_TestProg_pollen__ready__E();
    test79_TestProg_pollen__run__E();
    test79_TestProg_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test79_TestProg__s__fileName[] = "TestProg.p";
static const char test79_TestProg__s__1[] = "Test this string";
static const char test79_TestProg__s__5[] = "Now print out the test data\n";
static const char test79_TestProg__s__3[] = " ";
static const char test79_TestProg__s__13[] = "Now print out a uint8 value function return: ";
static const char test79_TestProg__s__12[] = "Now print out a boolean value function return: ";
static const char test79_TestProg__s__11[] = "Now print out a boolean value: ";
static const char test79_TestProg__s__15[] = "TestProg";
static const char test79_TestProg__s__2[] = "enter pollen.run, print some stuff\n";
static const char test79_TestProg__s__0[] = "Nest";
static const char test79_TestProg__s__8[] = "(signed):\n";
static const char test79_TestProg__s__9[] = "Now print out the Nest class field aNum\n";
static const char test79_TestProg__s__6[] = "(unsigned):\n";
static const char test79_TestProg__s__10[] = " \n";
static const char test79_TestProg__s__7[] = "\n";
static const char test79_TestProg__s__14[] = "Now (fail to) print out a agg function return: ";
static const char test79_TestProg__s__4[] = "EOL\n";

/*
 * ======== code injections ========
 */

 #include <stdlib.h> 

/*
 * ======== function definitions ========
 */

uint8 test79_TestProg_getAge__I() {
    return(  7  );
}

void test79_TestProg_pollen__run__E() {
    bool f;
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__2);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__3);
	test79_TestProg_pollen__printStr((string)(test79_TestProg_s1__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__3);
	test79_TestProg_pollen__printUint((uint32)(test79_TestProg_aNest_aNum__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__4);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__5);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__6);
    test79_TestProg_pollen__printUint((uint32)(test79_TestProg_u8__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__3);
	test79_TestProg_pollen__printUint((uint32)(test79_TestProg_u16__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__3);
	test79_TestProg_pollen__printUint((uint32)(test79_TestProg_u32__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__7);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__8);
    test79_TestProg_pollen__printInt((int32)(test79_TestProg_i8__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__3);
	test79_TestProg_pollen__printInt((int32)(test79_TestProg_i16__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__3);
	test79_TestProg_pollen__printInt((int32)(test79_TestProg_i32__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__7);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__9);
    test79_TestProg_pollen__printUint((uint32)(test79_TestProg_aNest_aNum__V));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__10);
    f = test79_TestProg_Nest_getFlag__I(&(test79_TestProg_aNest__V));
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__11);
	test79_TestProg_pollen__printBool((f));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__7);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__12);
	test79_TestProg_pollen__printBool(test79_TestProg_Nest_getFlag__I(&(test79_TestProg_aNest__V)));
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__7);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__13);
	test79_TestProg_pollen__printUint((uint32)test79_TestProg_getAge__I());
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__7);
    test79_TestProg_pollen__printStr((string)test79_TestProg__s__14);
	test79_TestProg_pollen__printStr((string)test79_TestProg__s__7);
    test79_Junk_foo__E();
     exit(0) ;

}

test79_TestProg_Nest_ test79_TestProg_foo__I() {
    return&(  (test79_TestProg_aNest__V)  );
}

test79_TestProg_Nest_ test79_TestProg_Nest_new___E( test79_TestProg_Nest_ this ) {
    return this;
}

bool test79_TestProg_Nest_getFlag__I( test79_TestProg_Nest_ this ) {
    return(  (this->flag)  );
}

void test79_TestProg_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef test79_Junk__M
#define test79_Junk__M
#include "../../test79/Junk/Junk.h"
#endif

#ifndef test79_PrintImpl__M
#define test79_PrintImpl__M
#include "../../test79/PrintImpl/PrintImpl.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test79_TestProg_pollen__reset__E();
void test79_TestProg_pollen__ready__E();
void test79_TestProg_pollen__shutdown__E(uint8 i);

/*
 * ======== extern definition ========
 */

extern struct test79_TestProg_ test79_TestProg;

/*
 * ======== class definition (unit TestProg.Nest) ========
 */

struct test79_TestProg_Nest {
    bool flag;
    uint32 aNum;
};
typedef struct test79_TestProg_Nest test79_TestProg_Nest;
typedef struct test79_TestProg_Nest* test79_TestProg_Nest_;

/*
 * ======== struct module definition (unit TestProg) ========
 */

struct test79_PrintImpl_;
struct test79_TestProg_ {
    string s1;
    uint8 u8;
    uint16 u16;
    uint32 u32;
    int8 i8;
    int16 i16;
    int32 i32;
    struct test79_PrintImpl_ *pollenPrintProxy;
};
typedef struct test79_TestProg_ test79_TestProg_;

/*
 * ======== host variables (unit TestProg) ========
 */

typedef struct test79_TestProg_Nest test79_TestProg_aNest__TYPE;
extern test79_TestProg_aNest__TYPE test79_TestProg_aNest__V;

/*
 * ======== function members (unit TestProg) ========
 */

extern uint8 test79_TestProg_getAge__I();
extern void test79_TestProg_pollen__run__E();
extern test79_TestProg_Nest_ test79_TestProg_foo__I();
extern test79_TestProg_Nest_ test79_TestProg_Nest_new___E( test79_TestProg_Nest_ this );
extern bool test79_TestProg_Nest_getFlag__I( test79_TestProg_Nest_ this );
extern void test79_TestProg_targetInit__I();

/*
 * ======== data members (unit TestProg) ========
 */

#define test79_TestProg_s1__V test79_TestProg.s1
#define test79_TestProg_u8__V test79_TestProg.u8
#define test79_TestProg_u16__V test79_TestProg.u16
#define test79_TestProg_u32__V test79_TestProg.u32
#define test79_TestProg_i8__V test79_TestProg.i8
#define test79_TestProg_i16__V test79_TestProg.i16
#define test79_TestProg_i32__V test79_TestProg.i32
#define test79_TestProg_aNest__V test79_TestProg_aNest
#define test79_TestProg_aNest_flag__V test79_TestProg_aNest.flag
#define test79_TestProg_aNest_aNum__V test79_TestProg_aNest.aNum
#define test79_TestProg_aNest_getFlag__V test79_TestProg_aNest.getFlag
#define test79_TestProg_aNest_new_host__V test79_TestProg_aNest.new_host
#define test79_TestProg_aNest_new___V test79_TestProg_aNest.new_
#define test79_TestProg_pollenPrintProxy__V test79_TestProg.pollenPrintProxy

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test79.Junk ========
 */

var $$c = function() {
    const Junk = {};
    Junk.Junk = Junk
    Junk.$name = 'test79.Junk';
    Junk.pollen$used = 0;
    Junk.foo = new $$Ref('test79_Junk_foo__E');
    Junk.targetInit = new $$Ref('test79_Junk_targetInit__I');
    Junk.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Junk.pollen__uses__ = function() {
    }
    Junk.$$privateInit = function() {
    }
    return Junk;
}
var $$u = $$c();
$units['test79.Junk'] = $$u;
$units.push($$u);


/*
 * ======== MODULE test79.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test79.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test79_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test79_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test79_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test79_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test79_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test79_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test79.PrintImpl'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test79.Junk ========
 */

var $$c = function() {
    const Junk = {};
    Junk.Junk = Junk
    Junk.$name = 'test79.Junk';
    Junk.pollen$used = 0;
    Junk.foo = new $$Ref('test79_Junk_foo__E');
    Junk.targetInit = new $$Ref('test79_Junk_targetInit__I');
    Junk.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    Junk.pollen__uses__ = function() {
    }
    Junk.$$privateInit = function() {
    }
    return Junk;
}
var $$u = $$c();
$units['test79.Junk'] = $$u;
$units.push($$u);

/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test79.PrintImpl ========
 */

var $$c = function() {
    const PrintImpl = {};
    PrintImpl.PrintImpl = PrintImpl
    PrintImpl.$name = 'test79.PrintImpl';
    PrintImpl.pollen$used = 0;
    PrintImpl.printBool = new $$Ref('test79_PrintImpl_printBool__E');
    PrintImpl.printInt = new $$Ref('test79_PrintImpl_printInt__E');
    PrintImpl.printReal = new $$Ref('test79_PrintImpl_printReal__E');
    PrintImpl.printUint = new $$Ref('test79_PrintImpl_printUint__E');
    PrintImpl.printStr = new $$Ref('test79_PrintImpl_printStr__E');
    PrintImpl.targetInit = new $$Ref('test79_PrintImpl_targetInit__I');
    PrintImpl.$$hostInit = function() {
        var $$text = '';
        return $$text;
    }
    PrintImpl.pollen__uses__ = function() {
    }
    PrintImpl.$$privateInit = function() {
    }
    return PrintImpl;
}
var $$u = $$c();
$units['test79.PrintImpl'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test79.TestProg ========
 */

var $$c = function() {
    const TestProg = {};
    TestProg.TestProg = TestProg
    TestProg.$name = 'test79.TestProg';
    TestProg.pollen$used = 0;
    TestProg.Junk = $units['test79.Junk'];
    TestProg.Cls1 = $units['test79.Cls1'];
    TestProg.PrintImpl = $units['test79.PrintImpl'];
    TestProg.Nest$$id = 1;
    TestProg.Nest = function(cn) {
        this.$$id = TestProg.Nest$$id++;
        this.$$cname = cn ? cn : 'test79_TestProg_Nest__'+this.$$id+'__S';
        this.$$tname = 'test79_TestProg_Nest';
        this.$$uname = 'test79.TestProg';
        this.flag = true;
        this.aNum = 77;
    }
    TestProg.Nest.prototype = new $$Struct('test79.TestProg.Nest');
    TestProg.Nest.prototype.$$isAggFld = {};
    TestProg.Nest.prototype.$$isAggFld.flag = false;
    TestProg.Nest.prototype.$$isAggFld.aNum = false;
    TestProg.Nest.prototype.new_host = function() {
        var $$text = '';
        this.$$privateInit();
        this.$$hostInitLastPass();
        return this;
    }
    TestProg.Nest.prototype.$$privateInit = function() {
        this.flag = true;
        this.aNum = 77;
    }
    TestProg.Nest.prototype.$$hostInitLastPass = function() {
    }
    TestProg.foo = new $$Ref('test79_TestProg_foo__I');
    TestProg.getAge = new $$Ref('test79_TestProg_getAge__I');
    TestProg.pollen__run = new $$Ref('test79_TestProg_pollen__run__E');
    TestProg.targetInit = new $$Ref('test79_TestProg_targetInit__I');
    TestProg.$$hostInit = function() {
        var $$text = '';
        TestProg.aNest = new TestProg.Nest('test79_TestProg_aNest__V'); TestProg.aNest.new_host();
        var $$v = 'test79_PrintImpl';
        var $$s = $$bind($units['test79.TestProg'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test79.PrintImpl'].pollen$used = true;}

        return $$text;
    }
    TestProg.pollen__uses__ = function() {
        $$bind($units['test79.Junk'], 'pollen$used', true);
        $$bind($units['test79.PrintImpl'], 'pollen$used', true);
    }
    TestProg.$$privateInit = function() {
        TestProg.s1 = "Test this string";
        TestProg.u8 = 1;
        TestProg.u16 = 2;
        TestProg.u32 = 3;
        TestProg.i8 = 4;
        TestProg.i16 = 5;
        TestProg.i32 = 6;
        TestProg.pollenPrintProxy = 0;
    }
    return TestProg;
}
var $$u = $$c();
$units['test79.TestProg'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test79.TestProg'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test79.TestProg ========
 */

var $$c = function() {
    const TestProg = {};
    TestProg.TestProg = TestProg
    TestProg.$name = 'test79.TestProg';
    TestProg.pollen$used = 0;
    TestProg.Junk = $units['test79.Junk'];
    TestProg.Cls1 = $units['test79.Cls1'];
    TestProg.PrintImpl = $units['test79.PrintImpl'];
    TestProg.Nest$$id = 1;
    TestProg.Nest = function(cn) {
        this.$$id = TestProg.Nest$$id++;
        this.$$cname = cn ? cn : 'test79_TestProg_Nest__'+this.$$id+'__S';
        this.$$tname = 'test79_TestProg_Nest';
        this.$$uname = 'test79.TestProg';
        this.flag = true;
        this.aNum = 77;
    }
    TestProg.Nest.prototype = new $$Struct('test79.TestProg.Nest');
    TestProg.Nest.prototype.$$isAggFld = {};
    TestProg.Nest.prototype.$$isAggFld.flag = false;
    TestProg.Nest.prototype.$$isAggFld.aNum = false;
    TestProg.Nest.prototype.new_host = function() {
        var $$text = '';
        this.$$privateInit();
        this.$$hostInitLastPass();
        return this;
    }
    TestProg.Nest.prototype.$$privateInit = function() {
        this.flag = true;
        this.aNum = 77;
    }
    TestProg.Nest.prototype.$$hostInitLastPass = function() {
    }
    TestProg.foo = new $$Ref('test79_TestProg_foo__I');
    TestProg.getAge = new $$Ref('test79_TestProg_getAge__I');
    TestProg.pollen__run = new $$Ref('test79_TestProg_pollen__run__E');
    TestProg.targetInit = new $$Ref('test79_TestProg_targetInit__I');
    TestProg.$$hostInit = function() {
        var $$text = '';
        TestProg.aNest = new TestProg.Nest('test79_TestProg_aNest__V'); TestProg.aNest.new_host();
        var $$v = 'test79_PrintImpl';
        var $$s = $$bind($units['test79.TestProg'], 'pollenPrintProxy', $$v);{ $$v.pollen$used = true;
        $units['test79.PrintImpl'].pollen$used = true;}

        return $$text;
    }
    TestProg.pollen__uses__ = function() {
        $$bind($units['test79.Junk'], 'pollen$used', true);
        $$bind($units['test79.PrintImpl'], 'pollen$used', true);
    }
    TestProg.$$privateInit = function() {
        TestProg.s1 = "Test this string";
        TestProg.u8 = 1;
        TestProg.u16 = 2;
        TestProg.u32 = 3;
        TestProg.i8 = 4;
        TestProg.i16 = 5;
        TestProg.i32 = 6;
        TestProg.pollenPrintProxy = 0;
    }
    return TestProg;
}
var $$u = $$c();
$units['test79.TestProg'] = $$u;
$units.push($$u);

