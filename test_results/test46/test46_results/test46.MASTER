pollen version 0.2.137
pollen version 0.2.137
pollen.data.Queue.p, line 14:5, 'elements': if specified, array dimensions must be constant or preset or host
pollen.data.Queue.p, line 14:5, 'elements': for arrays defined in class scope, array dimensions must resolve to compile time constant values.
In file included from ../test46_out/test46/Test1/Test1-prog.c:10:0:
../test46_out/test46/Test1/../../pollen.data/Qint8/Qint8.h:22:11: error: flexible array member not at end of struct

/*
 * ======== string literals ========
 */

static const char pollen_data_Qint8__s__fileName[] = "Qint8.p";
static const char pollen_data_Qint8__s__0[] = "Qint8";

/*
 * ======== code injections ========
 */

 #include <stdio.h> 

/*
 * ======== function definitions ========
 */

bool pollen_data_Qint8_Qint8_add__E( pollen_data_Qint8_ this, uint8 e ) {
    if (this->length < this->capacity) {
        this->elements[(this->tail)] = (e);
        ++(this->tail);
        ++(this->length);
        if ((this->tail) == (this->capacity)) {
            (this->tail) = 0;
        }
        return(  true  );
    }
    else {
        return(  false  );
    }
}

bool pollen_data_Qint8_Qint8_isEmpty__E( pollen_data_Qint8_ this ) {
    return(  (this->length) == 0  );
}

void pollen_data_Qint8_Qint8_printInt__I( pollen_data_Qint8_ this, uint32 i ) {
     printf("%d\n", i) ;

}

uint8 pollen_data_Qint8_Qint8_getLength__E( pollen_data_Qint8_ this ) {
    return(  this->length  );
}

pollen_data_Qint8_ pollen_data_Qint8_Qint8_new___E( pollen_data_Qint8_ this ) {
    return this;
}

uint8 pollen_data_Qint8_Qint8_remove__E( pollen_data_Qint8_ this ) {
    uint8 e;
    e = 0;
    if (!pollen_data_Qint8_Qint8_isEmpty__E(this)) {
        (e) = this->elements[(this->head)];
        ++(this->head);
        --(this->length);
        if ((this->head) == (this->capacity)) {
            (this->head) = 0;
        }
    }
    return(  (e)  );
}

void pollen_data_Qint8_Qint8_printStr__I( pollen_data_Qint8_ this, string str ) {
     printf("%s\n", str) ;

}

uint8 pollen_data_Qint8_Qint8_peek__E( pollen_data_Qint8_ this ) {
    if (!pollen_data_Qint8_Qint8_isEmpty__E(this)) {
        return(  (this->elements[(this->head)])  );
    }
}

uint8 pollen_data_Qint8_Qint8_getCapacity__E( pollen_data_Qint8_ this ) {
    return(  this->capacity  );
}


/*
 * ======== imports ========
 */

/*
 * ======== forward declarations for intrinsics ========
 */

void test46_Test1_pollen__reset__E();
void test46_Test1_pollen__ready__E();
void test46_Test1_pollen__shutdown__E(uint8 i);

/*
 * ======== class definition (unit Qint8) ========
 */

struct pollen_data_Qint8 {
;
    uint8 capacity;
    uint8 elements[];
    uint8 length;
    uint8 head;
    uint8 tail;
};
typedef struct pollen_data_Qint8 pollen_data_Qint8;
typedef struct pollen_data_Qint8* pollen_data_Qint8_;

/*
 * ======== function members (unit Qint8) ========
 */

extern bool pollen_data_Qint8_Qint8_add__E( pollen_data_Qint8_ this, uint8 e );
extern bool pollen_data_Qint8_Qint8_isEmpty__E( pollen_data_Qint8_ this );
extern void pollen_data_Qint8_Qint8_printInt__I( pollen_data_Qint8_ this, uint32 i );
extern uint8 pollen_data_Qint8_Qint8_getLength__E( pollen_data_Qint8_ this );
extern pollen_data_Qint8_ pollen_data_Qint8_Qint8_new___E( pollen_data_Qint8_ this );
extern uint8 pollen_data_Qint8_Qint8_remove__E( pollen_data_Qint8_ this );
extern void pollen_data_Qint8_Qint8_printStr__I( pollen_data_Qint8_ this, string str );
extern uint8 pollen_data_Qint8_Qint8_peek__E( pollen_data_Qint8_ this );
extern uint8 pollen_data_Qint8_Qint8_getCapacity__E( pollen_data_Qint8_ this );

#include <std.h>

/*
 * ======== unit headers ========
 */

#ifndef pollen_data_Qint8__M
#define pollen_data_Qint8__M
#include "../../pollen.data/Qint8/Qint8.h"
#endif

#ifndef test46_Test1__M
#define test46_Test1__M
#include "../../test46/Test1/Test1.h"
#endif

/*
 * ======== host data definitions (unit Test1) ========
 */

test46_Test1_myQ__TYPE test46_Test1_myQ__V = /* pollen.data.Qint8 object init */
{
    (uint8)0x0,              /* capacity */
        0  /* empty */
,    /* elements */
    (uint8)0x0,              /* length */
    (uint8)0x0,              /* head */
    (uint8)0x0,              /* tail */
};

/*
 * ======== target data definitions (unit Test1) ========
 */

struct test46_Test1_ test46_Test1 = { /* module data */
};

/*
 * ======== pollen print ========
 */

void test46_Test1_pollen__printBool(bool b) {
}
void test46_Test1_pollen__printInt(int32 i) {
}
void test46_Test1_pollen__printReal(float f) {
}
void test46_Test1_pollen__printUint(uint32 u) {
}
void test46_Test1_pollen__printStr(string s) {
}

/*
 * ======== module functions ========
 */

#include "../../pollen.data/Qint8/Qint8.c"
#include "../../test46/Test1/Test1.c"

/*
 * ======== pollen.reset() ========
 */

void test46_Test1_pollen__reset__E() {
    /* empty default */
}

/*
 * ======== pollen.ready() ========
 */

void test46_Test1_pollen__ready__E() {
    /* empty default */
}

/*
 * ======== main() ========
 */

int main() {
    test46_Test1_pollen__reset__E();
    test46_Test1_targetInit__I();
    test46_Test1_pollen__ready__E();
    test46_Test1_pollen__run__E();
    test46_Test1_pollen__shutdown__E(0);
}

/*
 * ======== string literals ========
 */

static const char test46_Test1__s__fileName[] = "Test1.p";
static const char test46_Test1__s__0[] = "Test1";

/*
 * ======== function definitions ========
 */

void test46_Test1_pollen__run__E() {
}

void test46_Test1_pollen__shutdown__E( uint8 id ) {
}

void test46_Test1_targetInit__I() {
}


/*
 * ======== imports ========
 */

#ifndef pollen_data_Qint8__M
#define pollen_data_Qint8__M
#include "../../pollen.data/Qint8/Qint8.h"
#endif

/*
 * ======== forward declarations for intrinsics ========
 */

void test46_Test1_pollen__reset__E();
void test46_Test1_pollen__ready__E();

/*
 * ======== extern definition ========
 */

extern struct test46_Test1_ test46_Test1;

/*
 * ======== struct module definition (unit Test1) ========
 */

struct pollen_data_Qint8;
struct test46_Test1_ {
};
typedef struct test46_Test1_ test46_Test1_;

/*
 * ======== host variables (unit Test1) ========
 */

typedef struct pollen_data_Qint8 test46_Test1_myQ__TYPE;
extern test46_Test1_myQ__TYPE test46_Test1_myQ__V;

/*
 * ======== function members (unit Test1) ========
 */

extern void test46_Test1_pollen__run__E();
extern void test46_Test1_pollen__shutdown__E( uint8 id );
extern void test46_Test1_targetInit__I();

/*
 * ======== data members (unit Test1) ========
 */

#define test46_Test1_myQ__V test46_Test1_myQ

/*
 * ======== CLASS pollen.data.Qint8 ========
 */

var $$c = function() {
    const Qint8 = {};
    Qint8.Qint8 = Qint8
    Qint8.$name = 'pollen.data.Qint8';
    Qint8.pollen$used = 0;
    Qint8.Qint8$$id = 1;
    Qint8.Qint8 = function(cn) {
        this.$$id = Qint8.Qint8$$id++;
        this.$$cname = cn ? cn : 'pollen_data_Qint8_Qint8__'+this.$$id+'__S';
        this.$$tname = 'pollen_data_Qint8_Qint8';
        this.$$uname = 'pollen.data.Qint8';
        this.capacity = 0;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
    }
    Qint8.Qint8.prototype = new $$Struct('pollen.data.Qint8.Qint8');
    Qint8.Qint8.prototype.$$isAggFld = {};
    Qint8.Qint8.prototype.$$isAggFld.capacity = false;
    Qint8.Qint8.prototype.$$isAggFld.elements = true;
    Qint8.Qint8.prototype.$$isAggFld.length = false;
    Qint8.Qint8.prototype.$$isAggFld.head = false;
    Qint8.Qint8.prototype.$$isAggFld.tail = false;
    Qint8.Qint8.prototype.new_host = function( capacity ) {
        var $$text = '';
        this.$$privateInit();
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_data_Qint8_elements__A', false);
        if (arguments.length == 1) {
                this.capacity = (capacity);
                this.length = 0;
                this.head = 0;
                this.tail = 0;
        }
        this.$$hostInitLastPass();
        return this;
    }
    Qint8.Qint8.prototype.setCapacity = function( capacity ) {
        var $$text = '';
        this.capacity = (capacity);
        this.$$hostInitLastPass();
        return $$text;
    }
    Qint8.pollen__uses__ = function() {
    }
    Qint8.Qint8.prototype.$$privateInit = function() {
        this.capacity = 0;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_data_Qint8_elements__A', false);
    }
    Qint8.Qint8.prototype.$$hostInitLastPass = function() {
    }
    return Qint8;
}
var $$u = $$c();
$units['pollen.data.Qint8'] = $$u;
$units.push($$u);


/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.output.PrintProtocol ========
 */

var $$c = function() {
    const PrintProtocol = {};
    PrintProtocol.PrintProtocol = PrintProtocol
    PrintProtocol.$name = 'pollen.output.PrintProtocol';
    PrintProtocol.pollen$used = 0;
    PrintProtocol.$$privateInit = function() {
    }
    return PrintProtocol;
}
var $$u = $$c();
$units['pollen.output.PrintProtocol'] = $$u;
$units.push($$u);


/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);


/*
 * ======== prologue ========
 */

function $$alignof() {
	return arguments.length > 0 ? arguments[0][1] : 0
}

function $$printf() {
    var out = Packages.com.amaret.pollen.parser.ParseUnit.current().getOutputStream();

    var res = [];
    var result = "";

    for (var i = 0; i < arguments.length; i++) {
        var a = arguments[i]
        if (typeof a == 'number') {
            a = Math.round(a) == a ? java.lang.Long(a) : java.lang.Double(a)
        }
        else if (typeof a == 'object' && a != null) {
            a = a.toString()
        }
	result += a
    }
    res.push(result);
    out.printf.apply(out, res)
}
function debug_line(where, obj) {
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")
}
function debug(where, obj) {
        
        //$$printf("DBG:" + where + " for unit " + obj.$name + "\n")

                // old:
        //var names = "";
        //for (var name in obj) {
        //      names += "   DBG:" + name + ": ";
        //      names += obj[name] + '\n';
        //
        //$$printf(names)
}

// obj is the unit
// sel is the field in unit being assigned to
// val is the assigned value
function $$bind( obj, sel, val ) {

    debug_line("entering $$bind ", obj)

    if (!('$$bound' in obj)) {
        obj.$$bound = {};
    }
    if (!obj.$$bound[sel]) {
        obj[sel] = val;
        obj.$$bound[sel] = true;
        debug_line("...in $$bind, set " + sel + " to " + val, obj)

    }
    debug_line("exiting $$bind ", obj)

    return obj[sel];
}

function $$sizeof() {
	var a0 = -1
	var sz = 0
	var d
	for (var i = 0; i < arguments.length; i++) {
		var ti = arguments[i]
		if (a0 == -1) {
			a0 = ti[1];
		}
        if ((d = sz % ti[1]) != 0) {
            sz += ti[1] - d;
        }
        sz += ti[0];
	}
    if ((d = sz % a0) != 0) {
        sz += a0 - d;
    }
    return sz
}

function $$Array( dim, baseD, cname, aggFlg ) {
    this.$$baseD = baseD;
    this.$$category = '$$Array';
    this.$$dim = dim
    this.$$elems = [];
    this.$$cname = cname
    this.$$aggFlg = aggFlg
    if (dim > 0) {
        for (var i = 0; i < dim; i++) {
            this.$$elems[i] = this.$$baseD(this.$$cname, i);
        }
    }
    this.$$len = this.$$elems.length
    this.$$virgin = (this.$$len == 0)
}

$$Array.prototype.$$assign = function( arr ) {
    var src = arr instanceof Array ? arr : arr instanceof $$Array ? arr.$$elems : [];
    var dst = this.$$elems;
    this.length = src.length;
    this.extend();
    for (var i = 0; i < this.$$len; i++) {
        if (i == src.length) break;
        if (this.$$aggFlg) {
            dst[i].$$assign(src[i]);
        }
        else {
            dst[i] = src[i];
        }
    }
    return this;
}

$$Array.prototype.extend = function() {
    if (this.$$dim < 0 && this.$$len > this.$$elems.length) {
        for (var k = this.$$elems.length; k < this.$$len; k++) {
            this.$$elems[k] = this.$$baseD(this.$$cname, k);
        }
    }
    this.$$virgin = false;
}
    

$$Array.prototype.get = function( idx ) {
    this.extend()
    return this.$$elems[idx];
}

$$Array.prototype.set = function ( idx, val ) {
    if (idx < 0 || idx >= this.$$len) {
        return undefined;
    }
    if (this.$$virgin) {
        this.extend();
    }
    return (this.$$elems[idx] = val);
}

$$Array.prototype.toString = function() {
    if (this.$$virgin && this.$$len > 0) {
        return '[...' + this.$$len + ']';
    }
    var res = '[';
    var sep = '';
    for (var i = 0; i < this.$$len; i++) {
        res += sep + this.$$elems[i].toString();
        sep = ",";
    }
    return res + ']';
}

$$Array.prototype.__defineGetter__('length', function() {
    return this.$$len;
})

$$Array.prototype.__defineSetter__('length', function( len ) {
    if (this.$$dim < 0 && len > this.$$len) {
        this.$$len = len;
    }
    return this.$$len;
})

$$Array.$$idx = 1

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// used for functions
function $$Ref( t ) {
    this.$$category = '$$Ref';
    this.$$text = t;
}

function $$Struct( qn ) {
    this.$$category = '$$Struct';
    this.$$qname = qn;
}

$$Struct.prototype.$$assign = function( str ) {
    for (var fld in this) {
        if (str[fld] === undefined) {
            continue;
        }
        var isAgg = this.$$isAggFld[fld];
        if (isAgg === false) {
            this[fld] = str[fld];
        }
        else if (isAgg === true) {
            this[fld].$$assign(str[fld]);
        }
    }
    return this
}

$$Struct.prototype.toString = function() {
    return "struct " + this.$$qname;
}

// legacy, unused. 
// In Em, triggered by '&' Em operator.
$$Ref.prototype.toString = function() {
    return "&" + this.$$text;
}

const $units = [];

/*
 * ======== pollen.hardware.SleepWakeProtocol ========
 */

var $$c = function() {
    const SleepWakeProtocol = {};
    SleepWakeProtocol.SleepWakeProtocol = SleepWakeProtocol
    SleepWakeProtocol.$name = 'pollen.hardware.SleepWakeProtocol';
    SleepWakeProtocol.pollen$used = 0;
    SleepWakeProtocol.$$privateInit = function() {
    }
    return SleepWakeProtocol;
}
var $$u = $$c();
$units['pollen.hardware.SleepWakeProtocol'] = $$u;
$units.push($$u);

/*
 * ======== pollen.utils.DynamicMemoryProtocol ========
 */

var $$c = function() {
    const DynamicMemoryProtocol = {};
    DynamicMemoryProtocol.DynamicMemoryProtocol = DynamicMemoryProtocol
    DynamicMemoryProtocol.$name = 'pollen.utils.DynamicMemoryProtocol';
    DynamicMemoryProtocol.pollen$used = 0;
    DynamicMemoryProtocol.$$privateInit = function() {
    }
    return DynamicMemoryProtocol;
}
var $$u = $$c();
$units['pollen.utils.DynamicMemoryProtocol'] = $$u;
$units.push($$u);

/*
 * ======== CLASS pollen.data.Qint8 ========
 */

var $$c = function() {
    const Qint8 = {};
    Qint8.Qint8 = Qint8
    Qint8.$name = 'pollen.data.Qint8';
    Qint8.pollen$used = 0;
    Qint8.Qint8$$id = 1;
    Qint8.Qint8 = function(cn) {
        this.$$id = Qint8.Qint8$$id++;
        this.$$cname = cn ? cn : 'pollen_data_Qint8_Qint8__'+this.$$id+'__S';
        this.$$tname = 'pollen_data_Qint8_Qint8';
        this.$$uname = 'pollen.data.Qint8';
        this.capacity = 0;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
    }
    Qint8.Qint8.prototype = new $$Struct('pollen.data.Qint8.Qint8');
    Qint8.Qint8.prototype.$$isAggFld = {};
    Qint8.Qint8.prototype.$$isAggFld.capacity = false;
    Qint8.Qint8.prototype.$$isAggFld.elements = true;
    Qint8.Qint8.prototype.$$isAggFld.length = false;
    Qint8.Qint8.prototype.$$isAggFld.head = false;
    Qint8.Qint8.prototype.$$isAggFld.tail = false;
    Qint8.Qint8.prototype.new_host = function( capacity ) {
        var $$text = '';
        this.$$privateInit();
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_data_Qint8_elements__A', false);
        if (arguments.length == 1) {
                this.capacity = (capacity);
                this.length = 0;
                this.head = 0;
                this.tail = 0;
        }
        this.$$hostInitLastPass();
        return this;
    }
    Qint8.Qint8.prototype.setCapacity = function( capacity ) {
        var $$text = '';
        this.capacity = (capacity);
        this.$$hostInitLastPass();
        return $$text;
    }
    Qint8.pollen__uses__ = function() {
    }
    Qint8.Qint8.prototype.$$privateInit = function() {
        this.capacity = 0;
        this.length = 0;
        this.head = 0;
        this.tail = 0;
        this.elements = new $$Array((this.capacity), function($$cn,$$idx){ return 0;}, 'pollen_data_Qint8_elements__A', false);
    }
    Qint8.Qint8.prototype.$$hostInitLastPass = function() {
    }
    return Qint8;
}
var $$u = $$c();
$units['pollen.data.Qint8'] = $$u;
$units.push($$u);

/*
 * ======== MODULE test46.Test1 ========
 */

var $$c = function() {
    const Test1 = {};
    Test1.Test1 = Test1
    Test1.$name = 'test46.Test1';
    Test1.pollen$used = 0;
    Test1.Qint8 = $units['pollen.data.Qint8'];
    Test1.pollen__run = new $$Ref('test46_Test1_pollen__run__E');
    Test1.pollen__shutdown = new $$Ref('test46_Test1_pollen__shutdown__E');
    Test1.targetInit = new $$Ref('test46_Test1_targetInit__I');
    Test1.Test0 = function() {
        var $$text = '';
        (Test1.myQ) = new $units['pollen.data.Qint8'].Qint8().new_host(10);
        return $$text;
    }
    Test1.$$hostInit = function() {
        var $$text = '';
        Test1.myQ = new $units['pollen.data.Qint8'].Qint8('test46_Test1_myQ__V');
        return $$text;
    }
    Test1.pollen__uses__ = function() {
        $$bind($units['pollen.data.Qint8'], 'pollen$used', true);
    }
    Test1.$$privateInit = function() {
    }
    return Test1;
}
var $$u = $$c();
$units['test46.Test1'] = $$u;
$units.push($$u);

/*
 * ======== epilogue ========
 */

$units['test46.Test1'].pollen$used = true;

// note that the first loop runs twice. This was needed
// because a later occurring module used an earlier occurring
// module. Complex code may require more work to resolve 
// uses: could iterate the array until there is a pass where
// no new uses are discovered.
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ ", u)
        u.pollen__uses__();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if (u.pollen$used && 'pollen__uses__' in u) {
        debug_line("  pollen__uses__ pass 2", u)
        u.pollen__uses__();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$privateInit' in u) {
        debug_line("  privateInit ", u)
        u.$$privateInit();
    }
}

for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('pollen__presets__' in u) {
        debug_line("  pollen__presets ", u)
        u.pollen__presets__();
    }
}
// note that the order below calls main_unit hostInit last
// this causes the more top level composition initializers to 
// run last, thus taking precedence.
for (var i = 0; i < $units.length;  i++) {
//for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInit' in u) {
        debug_line("  HOST INIT ", u)
        u.$$hostInit();
    }
}
for (var i = $units.length - 1; i >= 0; i--) {
    var u = $units[i];
    if ('$$hostInitLastPass' in u) {
        debug_line("  HOST INIT LAST PASS ", u)
        u.$$hostInitLastPass();
    }
}

/*
 * ======== MODULE test46.Test1 ========
 */

var $$c = function() {
    const Test1 = {};
    Test1.Test1 = Test1
    Test1.$name = 'test46.Test1';
    Test1.pollen$used = 0;
    Test1.Qint8 = $units['pollen.data.Qint8'];
    Test1.pollen__run = new $$Ref('test46_Test1_pollen__run__E');
    Test1.pollen__shutdown = new $$Ref('test46_Test1_pollen__shutdown__E');
    Test1.targetInit = new $$Ref('test46_Test1_targetInit__I');
    Test1.Test0 = function() {
        var $$text = '';
        (Test1.myQ) = new $units['pollen.data.Qint8'].Qint8().new_host(10);
        return $$text;
    }
    Test1.$$hostInit = function() {
        var $$text = '';
        Test1.myQ = new $units['pollen.data.Qint8'].Qint8('test46_Test1_myQ__V');
        return $$text;
    }
    Test1.pollen__uses__ = function() {
        $$bind($units['pollen.data.Qint8'], 'pollen$used', true);
    }
    Test1.$$privateInit = function() {
    }
    return Test1;
}
var $$u = $$c();
$units['test46.Test1'] = $$u;
$units.push($$u);

