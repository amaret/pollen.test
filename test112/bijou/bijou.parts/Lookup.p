

module Lookup {

  const uint16 curveSize = 256
//  host uint8 gammaData[curveSize] = {0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,12,12,12,13,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,21,21,21,22,22,23,23,24,24,25,25,25,26,26,27,27,28,29,29,30,30,31,31,32,32,33,34,34,35,36,36,37,37,38,39,40,40,41,42,42,43,44,45,45,46,47,48,49,50,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,76,78,79,80,81,83,84,85,87,88,90,91,93,94,95,97,99,100,102,103,105,107,108,110,112,113,115,117,119,120,122,124,126,128,130,132,134,136,138,140,142,144,147,149,151,153,156,158,160,163,165,168,170,173,175,178,180,183,186,189,191,194,197,200,203,206,209,212,215,218,221,224,227,231,234,237,241,244,248,251,255}
  host uint8 gammaData[curveSize] = {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,6,6,6,7,7,8,8,8,9,9,10,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,21,21,22,22,23,24,24,25,26,26,27,28,28,29,30,30,31,32,32,33,34,35,35,36,37,38,38,39,40,41,41,42,43,44,45,46,46,47,48,49,50,51,52,53,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,90,91,92,93,95,96,97,98,99,100,102,103,104,105,107,108,109,110,111,113,114,115,116,118,119,120,122,123,124,126,127,128,129,131,132,134,135,136,138,139,140,142,143,145,146,147,149,150,152,153,154,156,157,159,160,162,163,165,166,168,169,171,172,174,175,177,178,180,181,183,184,186,188,189,191,192,194,195,197,199,200,202,204,205,207,208,210,212,213,215,217,218,220,222,224,225,227,229,230,232,234,236,237,239,241,243,244,246,248,250,251,253,255}
  host uint8 sineData[curveSize] =  {1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,7,7,7,8,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,16,16,17,18,18,19,20,21,22,23,23,24,25,26,27,28,29,31,32,33,34,35,37,38,40,41,42,44,46,47,49,51,52,54,56,58,60,62,64,67,69,71,74,76,79,81,84,87,90,93,96,99,102,105,109,112,116,119,123,127,131,135,140,144,148,153,158,163,168,173,178,184,189,195,201,207,213,220,227,233,240,247,255,255,247,240,233,227,220,213,207,201,195,189,184,178,173,168,163,158,153,148,144,140,135,131,127,123,119,116,112,109,105,102,99,96,93,90,87,84,81,79,76,74,71,69,67,64,62,60,58,56,54,52,51,49,47,46,44,42,41,40,38,37,35,34,33,32,31,29,28,27,26,25,24,23,23,22,21,20,19,18,18,17,16,16,15,14,14,13,13,12,12,11,11,10,10,9,9,8,8,8,7,7,7,6,6,6,5,5,5,5,4,4,4,4,3,3,3,3,3,2,2,2,2,2,2,1,1,1,1}
  host uint8 inverseCosineData[curveSize] = {0,0,0,0,1,1,1,2,2,3,4,5,6,6,8,9,10,11,12,14,15,17,18,20,22,23,25,27,29,31,33,35,38,40,42,45,47,49,52,54,57,60,62,65,68,71,73,76,79,82,85,88,91,94,97,100,103,106,109,113,116,119,122,125,128,131,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,191,194,197,199,202,204,207,209,212,214,216,218,221,223,225,227,229,231,232,234,236,238,239,241,242,243,245,246,247,248,249,250,251,252,252,253,253,254,254,255,255,255,255,255,255,255,255,254,254,253,253,252,252,251,250,249,248,247,246,245,243,242,241,239,238,236,234,232,231,229,227,225,223,221,218,216,214,212,209,207,204,202,199,197,194,191,189,186,183,180,177,174,171,168,165,162,159,156,153,150,147,144,141,138,135,131,128,125,122,119,116,113,109,106,103,100,97,94,91,88,85,82,79,76,73,71,68,65,62,60,57,54,52,49,47,45,42,40,38,35,33,31,29,27,25,23,22,20,18,17,15,14,12,11,10,9,8,6,6,5,4,3,2,2,1,1,1,0,0,0,0}

  public uint16 map(uint16 value, uint16 min1, uint16 max1, uint16 min2, uint16 max2) {
    uint16 endVal
    uint16 oldRange
    uint16 newRange
    endVal = 0
    oldRange = max1 - min1
    newRange = 0

    if (oldRange == 0) {
      endVal = min2
    }
    else {
      newRange = max2 - min2
      endVal = (((value - min1) * newRange) / oldRange) + min2
    }

    return  endVal
  }

  public uint8 getCurveSize(){
    return curveSize
  }

  public uint8 get(uint8 index) {
    return 0
  }

  public uint8 gamma(uint8 index) {
    return gammaData[index]
  }

  public uint8 sine(uint8 index) {
    return sineData[index]
  }

  public uint8 fadein(uint8 index) {
    return fadeinData[index]
  }

  public uint8 fadeout(uint8 index) {
    return fadeinData[255-index]
  }

  public uint8 icosine(uint8 index) {
    return inverseCosineData[index]
  }

  public uint8 twowaygamma(uint8 index) {
    return twoWayGammaData[index]
  }

  public uint8 test(uint8 index) {
    return gammaData[testData[index]]
  }

}